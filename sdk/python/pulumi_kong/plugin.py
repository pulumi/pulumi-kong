# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Plugin(pulumi.CustomResource):
    computed_config: pulumi.Output[str]
    config_json: pulumi.Output[str]
    """
    plugin configuration in JSON format, configuration must be a valid JSON object.
    """
    consumer_id: pulumi.Output[str]
    enabled: pulumi.Output[bool]
    name: pulumi.Output[str]
    route_id: pulumi.Output[str]
    service_id: pulumi.Output[str]
    strict_match: pulumi.Output[bool]
    def __init__(__self__, resource_name, opts=None, config_json=None, consumer_id=None, enabled=None, name=None, route_id=None, service_id=None, strict_match=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Plugin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: plugin configuration in JSON format, configuration must be a valid JSON object.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config_json'] = config_json
            __props__['consumer_id'] = consumer_id
            __props__['enabled'] = enabled
            __props__['name'] = name
            __props__['route_id'] = route_id
            __props__['service_id'] = service_id
            __props__['strict_match'] = strict_match
            __props__['computed_config'] = None
        super(Plugin, __self__).__init__(
            'kong:index/plugin:Plugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, computed_config=None, config_json=None, consumer_id=None, enabled=None, name=None, route_id=None, service_id=None, strict_match=None):
        """
        Get an existing Plugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: plugin configuration in JSON format, configuration must be a valid JSON object.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["computed_config"] = computed_config
        __props__["config_json"] = config_json
        __props__["consumer_id"] = consumer_id
        __props__["enabled"] = enabled
        __props__["name"] = name
        __props__["route_id"] = route_id
        __props__["service_id"] = service_id
        __props__["strict_match"] = strict_match
        return Plugin(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

