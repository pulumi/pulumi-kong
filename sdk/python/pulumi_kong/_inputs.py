# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'RouteDestinationArgs',
    'RouteHeaderArgs',
    'RouteSourceArgs',
    'UpstreamHealthchecksArgs',
    'UpstreamHealthchecksActiveArgs',
    'UpstreamHealthchecksActiveHealthyArgs',
    'UpstreamHealthchecksActiveUnhealthyArgs',
    'UpstreamHealthchecksPassiveArgs',
    'UpstreamHealthchecksPassiveHealthyArgs',
    'UpstreamHealthchecksPassiveUnhealthyArgs',
]

@pulumi.input_type
class RouteDestinationArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        RouteDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip=ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if ip is not None:
            _setter("ip", ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class RouteHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: The name of the route
        """
        RouteHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the route
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RouteSourceArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        RouteSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip=ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if ip is not None:
            _setter("ip", ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class UpstreamHealthchecksArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input['UpstreamHealthchecksActiveArgs']] = None,
                 passive: Optional[pulumi.Input['UpstreamHealthchecksPassiveArgs']] = None):
        UpstreamHealthchecksArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            passive=passive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: Optional[pulumi.Input['UpstreamHealthchecksActiveArgs']] = None,
             passive: Optional[pulumi.Input['UpstreamHealthchecksPassiveArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if active is not None:
            _setter("active", active)
        if passive is not None:
            _setter("passive", passive)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input['UpstreamHealthchecksActiveArgs']]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input['UpstreamHealthchecksActiveArgs']]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input['UpstreamHealthchecksPassiveArgs']]:
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input['UpstreamHealthchecksPassiveArgs']]):
        pulumi.set(self, "passive", value)


@pulumi.input_type
class UpstreamHealthchecksActiveArgs:
    def __init__(__self__, *,
                 concurrency: Optional[pulumi.Input[int]] = None,
                 healthy: Optional[pulumi.Input['UpstreamHealthchecksActiveHealthyArgs']] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 https_sni: Optional[pulumi.Input[str]] = None,
                 https_verify_certificate: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unhealthy: Optional[pulumi.Input['UpstreamHealthchecksActiveUnhealthyArgs']] = None):
        UpstreamHealthchecksActiveArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            concurrency=concurrency,
            healthy=healthy,
            http_path=http_path,
            https_sni=https_sni,
            https_verify_certificate=https_verify_certificate,
            timeout=timeout,
            type=type,
            unhealthy=unhealthy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             concurrency: Optional[pulumi.Input[int]] = None,
             healthy: Optional[pulumi.Input['UpstreamHealthchecksActiveHealthyArgs']] = None,
             http_path: Optional[pulumi.Input[str]] = None,
             https_sni: Optional[pulumi.Input[str]] = None,
             https_verify_certificate: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             unhealthy: Optional[pulumi.Input['UpstreamHealthchecksActiveUnhealthyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_path is None and 'httpPath' in kwargs:
            http_path = kwargs['httpPath']
        if https_sni is None and 'httpsSni' in kwargs:
            https_sni = kwargs['httpsSni']
        if https_verify_certificate is None and 'httpsVerifyCertificate' in kwargs:
            https_verify_certificate = kwargs['httpsVerifyCertificate']

        if concurrency is not None:
            _setter("concurrency", concurrency)
        if healthy is not None:
            _setter("healthy", healthy)
        if http_path is not None:
            _setter("http_path", http_path)
        if https_sni is not None:
            _setter("https_sni", https_sni)
        if https_verify_certificate is not None:
            _setter("https_verify_certificate", https_verify_certificate)
        if timeout is not None:
            _setter("timeout", timeout)
        if type is not None:
            _setter("type", type)
        if unhealthy is not None:
            _setter("unhealthy", unhealthy)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[pulumi.Input['UpstreamHealthchecksActiveHealthyArgs']]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[pulumi.Input['UpstreamHealthchecksActiveHealthyArgs']]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter(name="httpsSni")
    def https_sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_sni")

    @https_sni.setter
    def https_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_sni", value)

    @property
    @pulumi.getter(name="httpsVerifyCertificate")
    def https_verify_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "https_verify_certificate")

    @https_verify_certificate.setter
    def https_verify_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_verify_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional[pulumi.Input['UpstreamHealthchecksActiveUnhealthyArgs']]:
        return pulumi.get(self, "unhealthy")

    @unhealthy.setter
    def unhealthy(self, value: Optional[pulumi.Input['UpstreamHealthchecksActiveUnhealthyArgs']]):
        pulumi.set(self, "unhealthy", value)


@pulumi.input_type
class UpstreamHealthchecksActiveHealthyArgs:
    def __init__(__self__, *,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 successes: Optional[pulumi.Input[int]] = None):
        UpstreamHealthchecksActiveHealthyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_statuses=http_statuses,
            interval=interval,
            successes=successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             interval: Optional[pulumi.Input[int]] = None,
             successes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']

        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if interval is not None:
            _setter("interval", interval)
        if successes is not None:
            _setter("successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successes", value)


@pulumi.input_type
class UpstreamHealthchecksActiveUnhealthyArgs:
    def __init__(__self__, *,
                 http_failures: Optional[pulumi.Input[int]] = None,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 tcp_failures: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[int]] = None):
        UpstreamHealthchecksActiveUnhealthyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_failures=http_failures,
            http_statuses=http_statuses,
            interval=interval,
            tcp_failures=tcp_failures,
            timeouts=timeouts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_failures: Optional[pulumi.Input[int]] = None,
             http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             interval: Optional[pulumi.Input[int]] = None,
             tcp_failures: Optional[pulumi.Input[int]] = None,
             timeouts: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_failures is None and 'httpFailures' in kwargs:
            http_failures = kwargs['httpFailures']
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']
        if tcp_failures is None and 'tcpFailures' in kwargs:
            tcp_failures = kwargs['tcpFailures']

        if http_failures is not None:
            _setter("http_failures", http_failures)
        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if interval is not None:
            _setter("interval", interval)
        if tcp_failures is not None:
            _setter("tcp_failures", tcp_failures)
        if timeouts is not None:
            _setter("timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_failures")

    @http_failures.setter
    def http_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_failures", value)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_failures")

    @tcp_failures.setter
    def tcp_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_failures", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class UpstreamHealthchecksPassiveArgs:
    def __init__(__self__, *,
                 healthy: Optional[pulumi.Input['UpstreamHealthchecksPassiveHealthyArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unhealthy: Optional[pulumi.Input['UpstreamHealthchecksPassiveUnhealthyArgs']] = None):
        UpstreamHealthchecksPassiveArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy=healthy,
            type=type,
            unhealthy=unhealthy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy: Optional[pulumi.Input['UpstreamHealthchecksPassiveHealthyArgs']] = None,
             type: Optional[pulumi.Input[str]] = None,
             unhealthy: Optional[pulumi.Input['UpstreamHealthchecksPassiveUnhealthyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if healthy is not None:
            _setter("healthy", healthy)
        if type is not None:
            _setter("type", type)
        if unhealthy is not None:
            _setter("unhealthy", unhealthy)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[pulumi.Input['UpstreamHealthchecksPassiveHealthyArgs']]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[pulumi.Input['UpstreamHealthchecksPassiveHealthyArgs']]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional[pulumi.Input['UpstreamHealthchecksPassiveUnhealthyArgs']]:
        return pulumi.get(self, "unhealthy")

    @unhealthy.setter
    def unhealthy(self, value: Optional[pulumi.Input['UpstreamHealthchecksPassiveUnhealthyArgs']]):
        pulumi.set(self, "unhealthy", value)


@pulumi.input_type
class UpstreamHealthchecksPassiveHealthyArgs:
    def __init__(__self__, *,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 successes: Optional[pulumi.Input[int]] = None):
        UpstreamHealthchecksPassiveHealthyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_statuses=http_statuses,
            successes=successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             successes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']

        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if successes is not None:
            _setter("successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successes", value)


@pulumi.input_type
class UpstreamHealthchecksPassiveUnhealthyArgs:
    def __init__(__self__, *,
                 http_failures: Optional[pulumi.Input[int]] = None,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tcp_failures: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[int]] = None):
        UpstreamHealthchecksPassiveUnhealthyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_failures=http_failures,
            http_statuses=http_statuses,
            tcp_failures=tcp_failures,
            timeouts=timeouts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_failures: Optional[pulumi.Input[int]] = None,
             http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             tcp_failures: Optional[pulumi.Input[int]] = None,
             timeouts: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_failures is None and 'httpFailures' in kwargs:
            http_failures = kwargs['httpFailures']
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']
        if tcp_failures is None and 'tcpFailures' in kwargs:
            tcp_failures = kwargs['tcpFailures']

        if http_failures is not None:
            _setter("http_failures", http_failures)
        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if tcp_failures is not None:
            _setter("tcp_failures", tcp_failures)
        if timeouts is not None:
            _setter("timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_failures")

    @http_failures.setter
    def http_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_failures", value)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_failures")

    @tcp_failures.setter
    def tcp_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_failures", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeouts", value)


