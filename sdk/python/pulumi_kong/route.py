# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Route(pulumi.CustomResource):
    destinations: pulumi.Output[list]
    hosts: pulumi.Output[list]
    methods: pulumi.Output[list]
    name: pulumi.Output[str]
    paths: pulumi.Output[list]
    preserve_host: pulumi.Output[bool]
    protocols: pulumi.Output[list]
    regex_priority: pulumi.Output[float]
    service_id: pulumi.Output[str]
    snis: pulumi.Output[list]
    sources: pulumi.Output[list]
    strip_path: pulumi.Output[bool]
    def __init__(__self__, resource_name, opts=None, destinations=None, hosts=None, methods=None, name=None, paths=None, preserve_host=None, protocols=None, regex_priority=None, service_id=None, snis=None, sources=None, strip_path=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Route resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **destinations** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)

        The **sources** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['destinations'] = destinations
            __props__['hosts'] = hosts
            __props__['methods'] = methods
            __props__['name'] = name
            __props__['paths'] = paths
            __props__['preserve_host'] = preserve_host
            if protocols is None:
                raise TypeError("Missing required property 'protocols'")
            __props__['protocols'] = protocols
            __props__['regex_priority'] = regex_priority
            if service_id is None:
                raise TypeError("Missing required property 'service_id'")
            __props__['service_id'] = service_id
            __props__['snis'] = snis
            __props__['sources'] = sources
            __props__['strip_path'] = strip_path
        super(Route, __self__).__init__(
            'kong:index/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, destinations=None, hosts=None, methods=None, name=None, paths=None, preserve_host=None, protocols=None, regex_priority=None, service_id=None, snis=None, sources=None, strip_path=None):
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **destinations** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)

        The **sources** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["destinations"] = destinations
        __props__["hosts"] = hosts
        __props__["methods"] = methods
        __props__["name"] = name
        __props__["paths"] = paths
        __props__["preserve_host"] = preserve_host
        __props__["protocols"] = protocols
        __props__["regex_priority"] = regex_priority
        __props__["service_id"] = service_id
        __props__["snis"] = snis
        __props__["sources"] = sources
        __props__["strip_path"] = strip_path
        return Route(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

