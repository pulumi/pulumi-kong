# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'RouteDestination',
    'RouteHeader',
    'RouteSource',
    'UpstreamHealthchecks',
    'UpstreamHealthchecksActive',
    'UpstreamHealthchecksActiveHealthy',
    'UpstreamHealthchecksActiveUnhealthy',
    'UpstreamHealthchecksPassive',
    'UpstreamHealthchecksPassiveHealthy',
    'UpstreamHealthchecksPassiveUnhealthy',
]

@pulumi.output_type
class RouteDestination(dict):
    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class RouteHeader(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The name of the route
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the route
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RouteSource(dict):
    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamHealthchecks(dict):
    def __init__(__self__, *,
                 active: Optional['outputs.UpstreamHealthchecksActive'] = None,
                 passive: Optional['outputs.UpstreamHealthchecksPassive'] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional['outputs.UpstreamHealthchecksActive']:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def passive(self) -> Optional['outputs.UpstreamHealthchecksPassive']:
        return pulumi.get(self, "passive")


@pulumi.output_type
class UpstreamHealthchecksActive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPath":
            suggest = "http_path"
        elif key == "httpsSni":
            suggest = "https_sni"
        elif key == "httpsVerifyCertificate":
            suggest = "https_verify_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency: Optional[_builtins.int] = None,
                 healthy: Optional['outputs.UpstreamHealthchecksActiveHealthy'] = None,
                 http_path: Optional[_builtins.str] = None,
                 https_sni: Optional[_builtins.str] = None,
                 https_verify_certificate: Optional[_builtins.bool] = None,
                 timeout: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 unhealthy: Optional['outputs.UpstreamHealthchecksActiveUnhealthy'] = None):
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if https_sni is not None:
            pulumi.set(__self__, "https_sni", https_sni)
        if https_verify_certificate is not None:
            pulumi.set(__self__, "https_verify_certificate", https_verify_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unhealthy is not None:
            pulumi.set(__self__, "unhealthy", unhealthy)

    @_builtins.property
    @pulumi.getter
    def concurrency(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "concurrency")

    @_builtins.property
    @pulumi.getter
    def healthy(self) -> Optional['outputs.UpstreamHealthchecksActiveHealthy']:
        return pulumi.get(self, "healthy")

    @_builtins.property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "http_path")

    @_builtins.property
    @pulumi.getter(name="httpsSni")
    def https_sni(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "https_sni")

    @_builtins.property
    @pulumi.getter(name="httpsVerifyCertificate")
    def https_verify_certificate(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "https_verify_certificate")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unhealthy(self) -> Optional['outputs.UpstreamHealthchecksActiveUnhealthy']:
        return pulumi.get(self, "unhealthy")


@pulumi.output_type
class UpstreamHealthchecksActiveHealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatuses":
            suggest = "http_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActiveHealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActiveHealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActiveHealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_statuses: Optional[Sequence[_builtins.int]] = None,
                 interval: Optional[_builtins.int] = None,
                 successes: Optional[_builtins.int] = None):
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @_builtins.property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "http_statuses")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def successes(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "successes")


@pulumi.output_type
class UpstreamHealthchecksActiveUnhealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpFailures":
            suggest = "http_failures"
        elif key == "httpStatuses":
            suggest = "http_statuses"
        elif key == "tcpFailures":
            suggest = "tcp_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActiveUnhealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActiveUnhealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActiveUnhealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_failures: Optional[_builtins.int] = None,
                 http_statuses: Optional[Sequence[_builtins.int]] = None,
                 interval: Optional[_builtins.int] = None,
                 tcp_failures: Optional[_builtins.int] = None,
                 timeouts: Optional[_builtins.int] = None):
        if http_failures is not None:
            pulumi.set(__self__, "http_failures", http_failures)
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if tcp_failures is not None:
            pulumi.set(__self__, "tcp_failures", tcp_failures)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "http_failures")

    @_builtins.property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "http_statuses")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "tcp_failures")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeouts")


@pulumi.output_type
class UpstreamHealthchecksPassive(dict):
    def __init__(__self__, *,
                 healthy: Optional['outputs.UpstreamHealthchecksPassiveHealthy'] = None,
                 type: Optional[_builtins.str] = None,
                 unhealthy: Optional['outputs.UpstreamHealthchecksPassiveUnhealthy'] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unhealthy is not None:
            pulumi.set(__self__, "unhealthy", unhealthy)

    @_builtins.property
    @pulumi.getter
    def healthy(self) -> Optional['outputs.UpstreamHealthchecksPassiveHealthy']:
        return pulumi.get(self, "healthy")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unhealthy(self) -> Optional['outputs.UpstreamHealthchecksPassiveUnhealthy']:
        return pulumi.get(self, "unhealthy")


@pulumi.output_type
class UpstreamHealthchecksPassiveHealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatuses":
            suggest = "http_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksPassiveHealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksPassiveHealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksPassiveHealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_statuses: Optional[Sequence[_builtins.int]] = None,
                 successes: Optional[_builtins.int] = None):
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @_builtins.property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "http_statuses")

    @_builtins.property
    @pulumi.getter
    def successes(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "successes")


@pulumi.output_type
class UpstreamHealthchecksPassiveUnhealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpFailures":
            suggest = "http_failures"
        elif key == "httpStatuses":
            suggest = "http_statuses"
        elif key == "tcpFailures":
            suggest = "tcp_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksPassiveUnhealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksPassiveUnhealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksPassiveUnhealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_failures: Optional[_builtins.int] = None,
                 http_statuses: Optional[Sequence[_builtins.int]] = None,
                 tcp_failures: Optional[_builtins.int] = None,
                 timeouts: Optional[_builtins.int] = None):
        if http_failures is not None:
            pulumi.set(__self__, "http_failures", http_failures)
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if tcp_failures is not None:
            pulumi.set(__self__, "tcp_failures", tcp_failures)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "http_failures")

    @_builtins.property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "http_statuses")

    @_builtins.property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "tcp_failures")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeouts")


