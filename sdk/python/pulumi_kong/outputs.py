# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'RouteDestination',
    'RouteHeader',
    'RouteSource',
    'UpstreamHealthchecks',
    'UpstreamHealthchecksActive',
    'UpstreamHealthchecksActiveHealthy',
    'UpstreamHealthchecksActiveUnhealthy',
    'UpstreamHealthchecksPassive',
    'UpstreamHealthchecksPassiveHealthy',
    'UpstreamHealthchecksPassiveUnhealthy',
]

@pulumi.output_type
class RouteDestination(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 port: Optional[int] = None):
        RouteDestination._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip=ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if ip is not None:
            _setter("ip", ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class RouteHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The name of the route
        """
        RouteHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the route
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RouteSource(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 port: Optional[int] = None):
        RouteSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip=ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if ip is not None:
            _setter("ip", ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamHealthchecks(dict):
    def __init__(__self__, *,
                 active: Optional['outputs.UpstreamHealthchecksActive'] = None,
                 passive: Optional['outputs.UpstreamHealthchecksPassive'] = None):
        UpstreamHealthchecks._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            passive=passive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: Optional['outputs.UpstreamHealthchecksActive'] = None,
             passive: Optional['outputs.UpstreamHealthchecksPassive'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if active is not None:
            _setter("active", active)
        if passive is not None:
            _setter("passive", passive)

    @property
    @pulumi.getter
    def active(self) -> Optional['outputs.UpstreamHealthchecksActive']:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def passive(self) -> Optional['outputs.UpstreamHealthchecksPassive']:
        return pulumi.get(self, "passive")


@pulumi.output_type
class UpstreamHealthchecksActive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPath":
            suggest = "http_path"
        elif key == "httpsSni":
            suggest = "https_sni"
        elif key == "httpsVerifyCertificate":
            suggest = "https_verify_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency: Optional[int] = None,
                 healthy: Optional['outputs.UpstreamHealthchecksActiveHealthy'] = None,
                 http_path: Optional[str] = None,
                 https_sni: Optional[str] = None,
                 https_verify_certificate: Optional[bool] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 unhealthy: Optional['outputs.UpstreamHealthchecksActiveUnhealthy'] = None):
        UpstreamHealthchecksActive._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            concurrency=concurrency,
            healthy=healthy,
            http_path=http_path,
            https_sni=https_sni,
            https_verify_certificate=https_verify_certificate,
            timeout=timeout,
            type=type,
            unhealthy=unhealthy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             concurrency: Optional[int] = None,
             healthy: Optional['outputs.UpstreamHealthchecksActiveHealthy'] = None,
             http_path: Optional[str] = None,
             https_sni: Optional[str] = None,
             https_verify_certificate: Optional[bool] = None,
             timeout: Optional[int] = None,
             type: Optional[str] = None,
             unhealthy: Optional['outputs.UpstreamHealthchecksActiveUnhealthy'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_path is None and 'httpPath' in kwargs:
            http_path = kwargs['httpPath']
        if https_sni is None and 'httpsSni' in kwargs:
            https_sni = kwargs['httpsSni']
        if https_verify_certificate is None and 'httpsVerifyCertificate' in kwargs:
            https_verify_certificate = kwargs['httpsVerifyCertificate']

        if concurrency is not None:
            _setter("concurrency", concurrency)
        if healthy is not None:
            _setter("healthy", healthy)
        if http_path is not None:
            _setter("http_path", http_path)
        if https_sni is not None:
            _setter("https_sni", https_sni)
        if https_verify_certificate is not None:
            _setter("https_verify_certificate", https_verify_certificate)
        if timeout is not None:
            _setter("timeout", timeout)
        if type is not None:
            _setter("type", type)
        if unhealthy is not None:
            _setter("unhealthy", unhealthy)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def healthy(self) -> Optional['outputs.UpstreamHealthchecksActiveHealthy']:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[str]:
        return pulumi.get(self, "http_path")

    @property
    @pulumi.getter(name="httpsSni")
    def https_sni(self) -> Optional[str]:
        return pulumi.get(self, "https_sni")

    @property
    @pulumi.getter(name="httpsVerifyCertificate")
    def https_verify_certificate(self) -> Optional[bool]:
        return pulumi.get(self, "https_verify_certificate")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional['outputs.UpstreamHealthchecksActiveUnhealthy']:
        return pulumi.get(self, "unhealthy")


@pulumi.output_type
class UpstreamHealthchecksActiveHealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatuses":
            suggest = "http_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActiveHealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActiveHealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActiveHealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_statuses: Optional[Sequence[int]] = None,
                 interval: Optional[int] = None,
                 successes: Optional[int] = None):
        UpstreamHealthchecksActiveHealthy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_statuses=http_statuses,
            interval=interval,
            successes=successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_statuses: Optional[Sequence[int]] = None,
             interval: Optional[int] = None,
             successes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']

        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if interval is not None:
            _setter("interval", interval)
        if successes is not None:
            _setter("successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "http_statuses")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def successes(self) -> Optional[int]:
        return pulumi.get(self, "successes")


@pulumi.output_type
class UpstreamHealthchecksActiveUnhealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpFailures":
            suggest = "http_failures"
        elif key == "httpStatuses":
            suggest = "http_statuses"
        elif key == "tcpFailures":
            suggest = "tcp_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksActiveUnhealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksActiveUnhealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksActiveUnhealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_failures: Optional[int] = None,
                 http_statuses: Optional[Sequence[int]] = None,
                 interval: Optional[int] = None,
                 tcp_failures: Optional[int] = None,
                 timeouts: Optional[int] = None):
        UpstreamHealthchecksActiveUnhealthy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_failures=http_failures,
            http_statuses=http_statuses,
            interval=interval,
            tcp_failures=tcp_failures,
            timeouts=timeouts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_failures: Optional[int] = None,
             http_statuses: Optional[Sequence[int]] = None,
             interval: Optional[int] = None,
             tcp_failures: Optional[int] = None,
             timeouts: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_failures is None and 'httpFailures' in kwargs:
            http_failures = kwargs['httpFailures']
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']
        if tcp_failures is None and 'tcpFailures' in kwargs:
            tcp_failures = kwargs['tcpFailures']

        if http_failures is not None:
            _setter("http_failures", http_failures)
        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if interval is not None:
            _setter("interval", interval)
        if tcp_failures is not None:
            _setter("tcp_failures", tcp_failures)
        if timeouts is not None:
            _setter("timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[int]:
        return pulumi.get(self, "http_failures")

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "http_statuses")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[int]:
        return pulumi.get(self, "tcp_failures")

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[int]:
        return pulumi.get(self, "timeouts")


@pulumi.output_type
class UpstreamHealthchecksPassive(dict):
    def __init__(__self__, *,
                 healthy: Optional['outputs.UpstreamHealthchecksPassiveHealthy'] = None,
                 type: Optional[str] = None,
                 unhealthy: Optional['outputs.UpstreamHealthchecksPassiveUnhealthy'] = None):
        UpstreamHealthchecksPassive._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy=healthy,
            type=type,
            unhealthy=unhealthy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy: Optional['outputs.UpstreamHealthchecksPassiveHealthy'] = None,
             type: Optional[str] = None,
             unhealthy: Optional['outputs.UpstreamHealthchecksPassiveUnhealthy'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if healthy is not None:
            _setter("healthy", healthy)
        if type is not None:
            _setter("type", type)
        if unhealthy is not None:
            _setter("unhealthy", unhealthy)

    @property
    @pulumi.getter
    def healthy(self) -> Optional['outputs.UpstreamHealthchecksPassiveHealthy']:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional['outputs.UpstreamHealthchecksPassiveUnhealthy']:
        return pulumi.get(self, "unhealthy")


@pulumi.output_type
class UpstreamHealthchecksPassiveHealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatuses":
            suggest = "http_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksPassiveHealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksPassiveHealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksPassiveHealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_statuses: Optional[Sequence[int]] = None,
                 successes: Optional[int] = None):
        UpstreamHealthchecksPassiveHealthy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_statuses=http_statuses,
            successes=successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_statuses: Optional[Sequence[int]] = None,
             successes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']

        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if successes is not None:
            _setter("successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "http_statuses")

    @property
    @pulumi.getter
    def successes(self) -> Optional[int]:
        return pulumi.get(self, "successes")


@pulumi.output_type
class UpstreamHealthchecksPassiveUnhealthy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpFailures":
            suggest = "http_failures"
        elif key == "httpStatuses":
            suggest = "http_statuses"
        elif key == "tcpFailures":
            suggest = "tcp_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthchecksPassiveUnhealthy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthchecksPassiveUnhealthy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthchecksPassiveUnhealthy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_failures: Optional[int] = None,
                 http_statuses: Optional[Sequence[int]] = None,
                 tcp_failures: Optional[int] = None,
                 timeouts: Optional[int] = None):
        UpstreamHealthchecksPassiveUnhealthy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_failures=http_failures,
            http_statuses=http_statuses,
            tcp_failures=tcp_failures,
            timeouts=timeouts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_failures: Optional[int] = None,
             http_statuses: Optional[Sequence[int]] = None,
             tcp_failures: Optional[int] = None,
             timeouts: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_failures is None and 'httpFailures' in kwargs:
            http_failures = kwargs['httpFailures']
        if http_statuses is None and 'httpStatuses' in kwargs:
            http_statuses = kwargs['httpStatuses']
        if tcp_failures is None and 'tcpFailures' in kwargs:
            tcp_failures = kwargs['tcpFailures']

        if http_failures is not None:
            _setter("http_failures", http_failures)
        if http_statuses is not None:
            _setter("http_statuses", http_statuses)
        if tcp_failures is not None:
            _setter("tcp_failures", tcp_failures)
        if timeouts is not None:
            _setter("timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[int]:
        return pulumi.get(self, "http_failures")

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "http_statuses")

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[int]:
        return pulumi.get(self, "tcp_failures")

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[int]:
        return pulumi.get(self, "timeouts")


