# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['UpstreamArgs', 'Upstream']

@pulumi.input_type
class UpstreamArgs:
    def __init__(__self__, *,
                 hash_fallback: Optional[pulumi.Input[str]] = None,
                 hash_fallback_header: Optional[pulumi.Input[str]] = None,
                 hash_on: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie_path: Optional[pulumi.Input[str]] = None,
                 hash_on_header: Optional[pulumi.Input[str]] = None,
                 healthchecks: Optional[pulumi.Input['UpstreamHealthchecksArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Upstream resource.
        """
        if hash_fallback is not None:
            pulumi.set(__self__, "hash_fallback", hash_fallback)
        if hash_fallback_header is not None:
            pulumi.set(__self__, "hash_fallback_header", hash_fallback_header)
        if hash_on is not None:
            pulumi.set(__self__, "hash_on", hash_on)
        if hash_on_cookie is not None:
            pulumi.set(__self__, "hash_on_cookie", hash_on_cookie)
        if hash_on_cookie_path is not None:
            pulumi.set(__self__, "hash_on_cookie_path", hash_on_cookie_path)
        if hash_on_header is not None:
            pulumi.set(__self__, "hash_on_header", hash_on_header)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter(name="hashFallback")
    def hash_fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_fallback")

    @hash_fallback.setter
    def hash_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_fallback", value)

    @property
    @pulumi.getter(name="hashFallbackHeader")
    def hash_fallback_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_fallback_header")

    @hash_fallback_header.setter
    def hash_fallback_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_fallback_header", value)

    @property
    @pulumi.getter(name="hashOn")
    def hash_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_on")

    @hash_on.setter
    def hash_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_on", value)

    @property
    @pulumi.getter(name="hashOnCookie")
    def hash_on_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_on_cookie")

    @hash_on_cookie.setter
    def hash_on_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_on_cookie", value)

    @property
    @pulumi.getter(name="hashOnCookiePath")
    def hash_on_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_on_cookie_path")

    @hash_on_cookie_path.setter
    def hash_on_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_on_cookie_path", value)

    @property
    @pulumi.getter(name="hashOnHeader")
    def hash_on_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_on_header")

    @hash_on_header.setter
    def hash_on_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_on_header", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input['UpstreamHealthchecksArgs']]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input['UpstreamHealthchecksArgs']]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slots", value)


class Upstream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hash_fallback: Optional[pulumi.Input[str]] = None,
                 hash_fallback_header: Optional[pulumi.Input[str]] = None,
                 hash_on: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie_path: Optional[pulumi.Input[str]] = None,
                 hash_on_header: Optional[pulumi.Input[str]] = None,
                 healthchecks: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthchecksArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Upstream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UpstreamArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Upstream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UpstreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpstreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hash_fallback: Optional[pulumi.Input[str]] = None,
                 hash_fallback_header: Optional[pulumi.Input[str]] = None,
                 hash_on: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie: Optional[pulumi.Input[str]] = None,
                 hash_on_cookie_path: Optional[pulumi.Input[str]] = None,
                 hash_on_header: Optional[pulumi.Input[str]] = None,
                 healthchecks: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthchecksArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['hash_fallback'] = hash_fallback
            __props__['hash_fallback_header'] = hash_fallback_header
            __props__['hash_on'] = hash_on
            __props__['hash_on_cookie'] = hash_on_cookie
            __props__['hash_on_cookie_path'] = hash_on_cookie_path
            __props__['hash_on_header'] = hash_on_header
            __props__['healthchecks'] = healthchecks
            __props__['name'] = name
            __props__['slots'] = slots
        super(Upstream, __self__).__init__(
            'kong:index/upstream:Upstream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            hash_fallback: Optional[pulumi.Input[str]] = None,
            hash_fallback_header: Optional[pulumi.Input[str]] = None,
            hash_on: Optional[pulumi.Input[str]] = None,
            hash_on_cookie: Optional[pulumi.Input[str]] = None,
            hash_on_cookie_path: Optional[pulumi.Input[str]] = None,
            hash_on_header: Optional[pulumi.Input[str]] = None,
            healthchecks: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthchecksArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            slots: Optional[pulumi.Input[int]] = None) -> 'Upstream':
        """
        Get an existing Upstream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["hash_fallback"] = hash_fallback
        __props__["hash_fallback_header"] = hash_fallback_header
        __props__["hash_on"] = hash_on
        __props__["hash_on_cookie"] = hash_on_cookie
        __props__["hash_on_cookie_path"] = hash_on_cookie_path
        __props__["hash_on_header"] = hash_on_header
        __props__["healthchecks"] = healthchecks
        __props__["name"] = name
        __props__["slots"] = slots
        return Upstream(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="hashFallback")
    def hash_fallback(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_fallback")

    @property
    @pulumi.getter(name="hashFallbackHeader")
    def hash_fallback_header(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_fallback_header")

    @property
    @pulumi.getter(name="hashOn")
    def hash_on(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_on")

    @property
    @pulumi.getter(name="hashOnCookie")
    def hash_on_cookie(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_on_cookie")

    @property
    @pulumi.getter(name="hashOnCookiePath")
    def hash_on_cookie_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_on_cookie_path")

    @property
    @pulumi.getter(name="hashOnHeader")
    def hash_on_header(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hash_on_header")

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Output['outputs.UpstreamHealthchecks']:
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "slots")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

