# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Upstream(pulumi.CustomResource):
    hash_fallback: pulumi.Output[str]
    hash_fallback_header: pulumi.Output[str]
    hash_on: pulumi.Output[str]
    hash_on_cookie: pulumi.Output[str]
    hash_on_cookie_path: pulumi.Output[str]
    hash_on_header: pulumi.Output[str]
    healthchecks: pulumi.Output[dict]
    name: pulumi.Output[str]
    slots: pulumi.Output[float]
    def __init__(__self__, resource_name, opts=None, hash_fallback=None, hash_fallback_header=None, hash_on=None, hash_on_cookie=None, hash_on_cookie_path=None, hash_on_header=None, healthchecks=None, name=None, slots=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Upstream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **healthchecks** object supports the following:

          * `active` (`pulumi.Input[dict]`)
            * `concurrency` (`pulumi.Input[float]`)
            * `healthy` (`pulumi.Input[dict]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `interval` (`pulumi.Input[float]`)
              * `successes` (`pulumi.Input[float]`)

            * `httpPath` (`pulumi.Input[str]`)
            * `httpsSni` (`pulumi.Input[str]`)
            * `httpsVerifyCertificate` (`pulumi.Input[bool]`)
            * `timeout` (`pulumi.Input[float]`)
            * `type` (`pulumi.Input[str]`)
            * `unhealthy` (`pulumi.Input[dict]`)
              * `httpFailures` (`pulumi.Input[float]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `interval` (`pulumi.Input[float]`)
              * `tcpFailures` (`pulumi.Input[float]`)
              * `timeouts` (`pulumi.Input[float]`)

          * `passive` (`pulumi.Input[dict]`)
            * `healthy` (`pulumi.Input[dict]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `successes` (`pulumi.Input[float]`)

            * `type` (`pulumi.Input[str]`)
            * `unhealthy` (`pulumi.Input[dict]`)
              * `httpFailures` (`pulumi.Input[float]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `tcpFailures` (`pulumi.Input[float]`)
              * `timeouts` (`pulumi.Input[float]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['hash_fallback'] = hash_fallback
            __props__['hash_fallback_header'] = hash_fallback_header
            __props__['hash_on'] = hash_on
            __props__['hash_on_cookie'] = hash_on_cookie
            __props__['hash_on_cookie_path'] = hash_on_cookie_path
            __props__['hash_on_header'] = hash_on_header
            __props__['healthchecks'] = healthchecks
            __props__['name'] = name
            __props__['slots'] = slots
        super(Upstream, __self__).__init__(
            'kong:index/upstream:Upstream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, hash_fallback=None, hash_fallback_header=None, hash_on=None, hash_on_cookie=None, hash_on_cookie_path=None, hash_on_header=None, healthchecks=None, name=None, slots=None):
        """
        Get an existing Upstream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **healthchecks** object supports the following:

          * `active` (`pulumi.Input[dict]`)
            * `concurrency` (`pulumi.Input[float]`)
            * `healthy` (`pulumi.Input[dict]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `interval` (`pulumi.Input[float]`)
              * `successes` (`pulumi.Input[float]`)

            * `httpPath` (`pulumi.Input[str]`)
            * `httpsSni` (`pulumi.Input[str]`)
            * `httpsVerifyCertificate` (`pulumi.Input[bool]`)
            * `timeout` (`pulumi.Input[float]`)
            * `type` (`pulumi.Input[str]`)
            * `unhealthy` (`pulumi.Input[dict]`)
              * `httpFailures` (`pulumi.Input[float]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `interval` (`pulumi.Input[float]`)
              * `tcpFailures` (`pulumi.Input[float]`)
              * `timeouts` (`pulumi.Input[float]`)

          * `passive` (`pulumi.Input[dict]`)
            * `healthy` (`pulumi.Input[dict]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `successes` (`pulumi.Input[float]`)

            * `type` (`pulumi.Input[str]`)
            * `unhealthy` (`pulumi.Input[dict]`)
              * `httpFailures` (`pulumi.Input[float]`)
              * `httpStatuses` (`pulumi.Input[list]`)
              * `tcpFailures` (`pulumi.Input[float]`)
              * `timeouts` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["hash_fallback"] = hash_fallback
        __props__["hash_fallback_header"] = hash_fallback_header
        __props__["hash_on"] = hash_on
        __props__["hash_on_cookie"] = hash_on_cookie
        __props__["hash_on_cookie_path"] = hash_on_cookie_path
        __props__["hash_on_header"] = hash_on_header
        __props__["healthchecks"] = healthchecks
        __props__["name"] = name
        __props__["slots"] = slots
        return Upstream(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

