// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ConsumerKeyAuth
//
// Resource that allows you to configure the [Key Authentication](https://docs.konghq.com/hub/kong-inc/key-auth/) plugin for a consumer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myConsumer, err := kong.NewConsumer(ctx, "my_consumer", &kong.ConsumerArgs{
//				Username: pulumi.String("User1"),
//				CustomId: pulumi.String("123"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kong.NewPlugin(ctx, "key_auth_plugin", &kong.PluginArgs{
//				Name: pulumi.String("key-auth"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kong.NewConsumerKeyAuth(ctx, "consumer_key_auth", &kong.ConsumerKeyAuthArgs{
//				ConsumerId: myConsumer.ID(),
//				Key:        pulumi.String("secret"),
//				Tags: pulumi.StringArray{
//					pulumi.String("myTag"),
//					pulumi.String("anotherTag"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConsumerKeyAuth struct {
	pulumi.CustomResourceState

	// the id of the consumer to associate the credentials to
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// Unique key to authenticate the client; if omitted the plugin will generate one
	Key pulumi.StringOutput `pulumi:"key"`
	// A list of strings associated with the consumer key auth for grouping and filtering
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConsumerKeyAuth registers a new resource with the given unique name, arguments, and options.
func NewConsumerKeyAuth(ctx *pulumi.Context,
	name string, args *ConsumerKeyAuthArgs, opts ...pulumi.ResourceOption) (*ConsumerKeyAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumerKeyAuth
	err := ctx.RegisterResource("kong:index/consumerKeyAuth:ConsumerKeyAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerKeyAuth gets an existing ConsumerKeyAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerKeyAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerKeyAuthState, opts ...pulumi.ResourceOption) (*ConsumerKeyAuth, error) {
	var resource ConsumerKeyAuth
	err := ctx.ReadResource("kong:index/consumerKeyAuth:ConsumerKeyAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerKeyAuth resources.
type consumerKeyAuthState struct {
	// the id of the consumer to associate the credentials to
	ConsumerId *string `pulumi:"consumerId"`
	// Unique key to authenticate the client; if omitted the plugin will generate one
	Key *string `pulumi:"key"`
	// A list of strings associated with the consumer key auth for grouping and filtering
	Tags []string `pulumi:"tags"`
}

type ConsumerKeyAuthState struct {
	// the id of the consumer to associate the credentials to
	ConsumerId pulumi.StringPtrInput
	// Unique key to authenticate the client; if omitted the plugin will generate one
	Key pulumi.StringPtrInput
	// A list of strings associated with the consumer key auth for grouping and filtering
	Tags pulumi.StringArrayInput
}

func (ConsumerKeyAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerKeyAuthState)(nil)).Elem()
}

type consumerKeyAuthArgs struct {
	// the id of the consumer to associate the credentials to
	ConsumerId string `pulumi:"consumerId"`
	// Unique key to authenticate the client; if omitted the plugin will generate one
	Key *string `pulumi:"key"`
	// A list of strings associated with the consumer key auth for grouping and filtering
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConsumerKeyAuth resource.
type ConsumerKeyAuthArgs struct {
	// the id of the consumer to associate the credentials to
	ConsumerId pulumi.StringInput
	// Unique key to authenticate the client; if omitted the plugin will generate one
	Key pulumi.StringPtrInput
	// A list of strings associated with the consumer key auth for grouping and filtering
	Tags pulumi.StringArrayInput
}

func (ConsumerKeyAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerKeyAuthArgs)(nil)).Elem()
}

type ConsumerKeyAuthInput interface {
	pulumi.Input

	ToConsumerKeyAuthOutput() ConsumerKeyAuthOutput
	ToConsumerKeyAuthOutputWithContext(ctx context.Context) ConsumerKeyAuthOutput
}

func (*ConsumerKeyAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerKeyAuth)(nil)).Elem()
}

func (i *ConsumerKeyAuth) ToConsumerKeyAuthOutput() ConsumerKeyAuthOutput {
	return i.ToConsumerKeyAuthOutputWithContext(context.Background())
}

func (i *ConsumerKeyAuth) ToConsumerKeyAuthOutputWithContext(ctx context.Context) ConsumerKeyAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyAuthOutput)
}

// ConsumerKeyAuthArrayInput is an input type that accepts ConsumerKeyAuthArray and ConsumerKeyAuthArrayOutput values.
// You can construct a concrete instance of `ConsumerKeyAuthArrayInput` via:
//
//	ConsumerKeyAuthArray{ ConsumerKeyAuthArgs{...} }
type ConsumerKeyAuthArrayInput interface {
	pulumi.Input

	ToConsumerKeyAuthArrayOutput() ConsumerKeyAuthArrayOutput
	ToConsumerKeyAuthArrayOutputWithContext(context.Context) ConsumerKeyAuthArrayOutput
}

type ConsumerKeyAuthArray []ConsumerKeyAuthInput

func (ConsumerKeyAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerKeyAuth)(nil)).Elem()
}

func (i ConsumerKeyAuthArray) ToConsumerKeyAuthArrayOutput() ConsumerKeyAuthArrayOutput {
	return i.ToConsumerKeyAuthArrayOutputWithContext(context.Background())
}

func (i ConsumerKeyAuthArray) ToConsumerKeyAuthArrayOutputWithContext(ctx context.Context) ConsumerKeyAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyAuthArrayOutput)
}

// ConsumerKeyAuthMapInput is an input type that accepts ConsumerKeyAuthMap and ConsumerKeyAuthMapOutput values.
// You can construct a concrete instance of `ConsumerKeyAuthMapInput` via:
//
//	ConsumerKeyAuthMap{ "key": ConsumerKeyAuthArgs{...} }
type ConsumerKeyAuthMapInput interface {
	pulumi.Input

	ToConsumerKeyAuthMapOutput() ConsumerKeyAuthMapOutput
	ToConsumerKeyAuthMapOutputWithContext(context.Context) ConsumerKeyAuthMapOutput
}

type ConsumerKeyAuthMap map[string]ConsumerKeyAuthInput

func (ConsumerKeyAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerKeyAuth)(nil)).Elem()
}

func (i ConsumerKeyAuthMap) ToConsumerKeyAuthMapOutput() ConsumerKeyAuthMapOutput {
	return i.ToConsumerKeyAuthMapOutputWithContext(context.Background())
}

func (i ConsumerKeyAuthMap) ToConsumerKeyAuthMapOutputWithContext(ctx context.Context) ConsumerKeyAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerKeyAuthMapOutput)
}

type ConsumerKeyAuthOutput struct{ *pulumi.OutputState }

func (ConsumerKeyAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerKeyAuth)(nil)).Elem()
}

func (o ConsumerKeyAuthOutput) ToConsumerKeyAuthOutput() ConsumerKeyAuthOutput {
	return o
}

func (o ConsumerKeyAuthOutput) ToConsumerKeyAuthOutputWithContext(ctx context.Context) ConsumerKeyAuthOutput {
	return o
}

// the id of the consumer to associate the credentials to
func (o ConsumerKeyAuthOutput) ConsumerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKeyAuth) pulumi.StringOutput { return v.ConsumerId }).(pulumi.StringOutput)
}

// Unique key to authenticate the client; if omitted the plugin will generate one
func (o ConsumerKeyAuthOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerKeyAuth) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// A list of strings associated with the consumer key auth for grouping and filtering
func (o ConsumerKeyAuthOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConsumerKeyAuth) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConsumerKeyAuthArrayOutput struct{ *pulumi.OutputState }

func (ConsumerKeyAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerKeyAuth)(nil)).Elem()
}

func (o ConsumerKeyAuthArrayOutput) ToConsumerKeyAuthArrayOutput() ConsumerKeyAuthArrayOutput {
	return o
}

func (o ConsumerKeyAuthArrayOutput) ToConsumerKeyAuthArrayOutputWithContext(ctx context.Context) ConsumerKeyAuthArrayOutput {
	return o
}

func (o ConsumerKeyAuthArrayOutput) Index(i pulumi.IntInput) ConsumerKeyAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerKeyAuth {
		return vs[0].([]*ConsumerKeyAuth)[vs[1].(int)]
	}).(ConsumerKeyAuthOutput)
}

type ConsumerKeyAuthMapOutput struct{ *pulumi.OutputState }

func (ConsumerKeyAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerKeyAuth)(nil)).Elem()
}

func (o ConsumerKeyAuthMapOutput) ToConsumerKeyAuthMapOutput() ConsumerKeyAuthMapOutput {
	return o
}

func (o ConsumerKeyAuthMapOutput) ToConsumerKeyAuthMapOutputWithContext(ctx context.Context) ConsumerKeyAuthMapOutput {
	return o
}

func (o ConsumerKeyAuthMapOutput) MapIndex(k pulumi.StringInput) ConsumerKeyAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerKeyAuth {
		return vs[0].(map[string]*ConsumerKeyAuth)[vs[1].(string)]
	}).(ConsumerKeyAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyAuthInput)(nil)).Elem(), &ConsumerKeyAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyAuthArrayInput)(nil)).Elem(), ConsumerKeyAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerKeyAuthMapInput)(nil)).Elem(), ConsumerKeyAuthMap{})
	pulumi.RegisterOutputType(ConsumerKeyAuthOutput{})
	pulumi.RegisterOutputType(ConsumerKeyAuthArrayOutput{})
	pulumi.RegisterOutputType(ConsumerKeyAuthMapOutput{})
}
