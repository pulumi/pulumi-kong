// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kong.NewTarget(ctx, "target", &kong.TargetArgs{
//				Target:     pulumi.String("sample_target:80"),
//				UpstreamId: pulumi.Any(kong_upstream.Upstream.Id),
//				Weight:     pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # To import a target use a combination of the upstream id and the target id as follows
//
// ```sh
//
//	$ pulumi import kong:index/target:Target <target_identifier> <upstream_id>/<target_id>
//
// ```
type Target struct {
	pulumi.CustomResourceState

	// A list set of strings associated with the Plugin for grouping and filtering
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
	Target pulumi.StringOutput `pulumi:"target"`
	// is the id of the upstream to apply this target to.
	UpstreamId pulumi.StringOutput `pulumi:"upstreamId"`
	// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewTarget registers a new resource with the given unique name, arguments, and options.
func NewTarget(ctx *pulumi.Context,
	name string, args *TargetArgs, opts ...pulumi.ResourceOption) (*Target, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.UpstreamId == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamId'")
	}
	if args.Weight == nil {
		return nil, errors.New("invalid value for required argument 'Weight'")
	}
	var resource Target
	err := ctx.RegisterResource("kong:index/target:Target", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTarget gets an existing Target resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetState, opts ...pulumi.ResourceOption) (*Target, error) {
	var resource Target
	err := ctx.ReadResource("kong:index/target:Target", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Target resources.
type targetState struct {
	// A list set of strings associated with the Plugin for grouping and filtering
	Tags []string `pulumi:"tags"`
	// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
	Target *string `pulumi:"target"`
	// is the id of the upstream to apply this target to.
	UpstreamId *string `pulumi:"upstreamId"`
	// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
	Weight *int `pulumi:"weight"`
}

type TargetState struct {
	// A list set of strings associated with the Plugin for grouping and filtering
	Tags pulumi.StringArrayInput
	// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
	Target pulumi.StringPtrInput
	// is the id of the upstream to apply this target to.
	UpstreamId pulumi.StringPtrInput
	// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
	Weight pulumi.IntPtrInput
}

func (TargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetState)(nil)).Elem()
}

type targetArgs struct {
	// A list set of strings associated with the Plugin for grouping and filtering
	Tags []string `pulumi:"tags"`
	// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
	Target string `pulumi:"target"`
	// is the id of the upstream to apply this target to.
	UpstreamId string `pulumi:"upstreamId"`
	// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
	Weight int `pulumi:"weight"`
}

// The set of arguments for constructing a Target resource.
type TargetArgs struct {
	// A list set of strings associated with the Plugin for grouping and filtering
	Tags pulumi.StringArrayInput
	// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
	Target pulumi.StringInput
	// is the id of the upstream to apply this target to.
	UpstreamId pulumi.StringInput
	// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
	Weight pulumi.IntInput
}

func (TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetArgs)(nil)).Elem()
}

type TargetInput interface {
	pulumi.Input

	ToTargetOutput() TargetOutput
	ToTargetOutputWithContext(ctx context.Context) TargetOutput
}

func (*Target) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (i *Target) ToTargetOutput() TargetOutput {
	return i.ToTargetOutputWithContext(context.Background())
}

func (i *Target) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput)
}

// TargetArrayInput is an input type that accepts TargetArray and TargetArrayOutput values.
// You can construct a concrete instance of `TargetArrayInput` via:
//
//	TargetArray{ TargetArgs{...} }
type TargetArrayInput interface {
	pulumi.Input

	ToTargetArrayOutput() TargetArrayOutput
	ToTargetArrayOutputWithContext(context.Context) TargetArrayOutput
}

type TargetArray []TargetInput

func (TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (i TargetArray) ToTargetArrayOutput() TargetArrayOutput {
	return i.ToTargetArrayOutputWithContext(context.Background())
}

func (i TargetArray) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetArrayOutput)
}

// TargetMapInput is an input type that accepts TargetMap and TargetMapOutput values.
// You can construct a concrete instance of `TargetMapInput` via:
//
//	TargetMap{ "key": TargetArgs{...} }
type TargetMapInput interface {
	pulumi.Input

	ToTargetMapOutput() TargetMapOutput
	ToTargetMapOutputWithContext(context.Context) TargetMapOutput
}

type TargetMap map[string]TargetInput

func (TargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (i TargetMap) ToTargetMapOutput() TargetMapOutput {
	return i.ToTargetMapOutputWithContext(context.Background())
}

func (i TargetMap) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetMapOutput)
}

type TargetOutput struct{ *pulumi.OutputState }

func (TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (o TargetOutput) ToTargetOutput() TargetOutput {
	return o
}

func (o TargetOutput) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return o
}

type TargetArrayOutput struct{ *pulumi.OutputState }

func (TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (o TargetArrayOutput) ToTargetArrayOutput() TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) Index(i pulumi.IntInput) TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Target {
		return vs[0].([]*Target)[vs[1].(int)]
	}).(TargetOutput)
}

type TargetMapOutput struct{ *pulumi.OutputState }

func (TargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (o TargetMapOutput) ToTargetMapOutput() TargetMapOutput {
	return o
}

func (o TargetMapOutput) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return o
}

func (o TargetMapOutput) MapIndex(k pulumi.StringInput) TargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Target {
		return vs[0].(map[string]*Target)[vs[1].(string)]
	}).(TargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetInput)(nil)).Elem(), &Target{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetArrayInput)(nil)).Elem(), TargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetMapInput)(nil)).Elem(), TargetMap{})
	pulumi.RegisterOutputType(TargetOutput{})
	pulumi.RegisterOutputType(TargetArrayOutput{})
	pulumi.RegisterOutputType(TargetMapOutput{})
}
