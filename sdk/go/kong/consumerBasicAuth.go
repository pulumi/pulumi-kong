// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ConsumerBasicAuth
//
// Consumer basic auth is a resource that allows you to configure the basic auth plugin for a consumer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myConsumer, err := kong.NewConsumer(ctx, "myConsumer", &kong.ConsumerArgs{
// 			CustomId: pulumi.String("123"),
// 			Username: pulumi.String("User1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kong.NewPlugin(ctx, "basicAuthPlugin", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kong.NewConsumerBasicAuth(ctx, "consumerBasicAuth", &kong.ConsumerBasicAuthArgs{
// 			ConsumerId: myConsumer.ID(),
// 			Password:   pulumi.String("bar_updated"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("myTag"),
// 				pulumi.String("anotherTag"),
// 			},
// 			Username: pulumi.String("foo_updated"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConsumerBasicAuth struct {
	pulumi.CustomResourceState

	// the id of the consumer to be configured with basic auth
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// password to be used for basic auth
	Password pulumi.StringOutput `pulumi:"password"`
	// A list of strings associated with the consumer basic auth for grouping and filtering
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// username to be used for basic auth
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewConsumerBasicAuth registers a new resource with the given unique name, arguments, and options.
func NewConsumerBasicAuth(ctx *pulumi.Context,
	name string, args *ConsumerBasicAuthArgs, opts ...pulumi.ResourceOption) (*ConsumerBasicAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource ConsumerBasicAuth
	err := ctx.RegisterResource("kong:index/consumerBasicAuth:ConsumerBasicAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerBasicAuth gets an existing ConsumerBasicAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerBasicAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerBasicAuthState, opts ...pulumi.ResourceOption) (*ConsumerBasicAuth, error) {
	var resource ConsumerBasicAuth
	err := ctx.ReadResource("kong:index/consumerBasicAuth:ConsumerBasicAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerBasicAuth resources.
type consumerBasicAuthState struct {
	// the id of the consumer to be configured with basic auth
	ConsumerId *string `pulumi:"consumerId"`
	// password to be used for basic auth
	Password *string `pulumi:"password"`
	// A list of strings associated with the consumer basic auth for grouping and filtering
	Tags []string `pulumi:"tags"`
	// username to be used for basic auth
	Username *string `pulumi:"username"`
}

type ConsumerBasicAuthState struct {
	// the id of the consumer to be configured with basic auth
	ConsumerId pulumi.StringPtrInput
	// password to be used for basic auth
	Password pulumi.StringPtrInput
	// A list of strings associated with the consumer basic auth for grouping and filtering
	Tags pulumi.StringArrayInput
	// username to be used for basic auth
	Username pulumi.StringPtrInput
}

func (ConsumerBasicAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerBasicAuthState)(nil)).Elem()
}

type consumerBasicAuthArgs struct {
	// the id of the consumer to be configured with basic auth
	ConsumerId string `pulumi:"consumerId"`
	// password to be used for basic auth
	Password string `pulumi:"password"`
	// A list of strings associated with the consumer basic auth for grouping and filtering
	Tags []string `pulumi:"tags"`
	// username to be used for basic auth
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ConsumerBasicAuth resource.
type ConsumerBasicAuthArgs struct {
	// the id of the consumer to be configured with basic auth
	ConsumerId pulumi.StringInput
	// password to be used for basic auth
	Password pulumi.StringInput
	// A list of strings associated with the consumer basic auth for grouping and filtering
	Tags pulumi.StringArrayInput
	// username to be used for basic auth
	Username pulumi.StringInput
}

func (ConsumerBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerBasicAuthArgs)(nil)).Elem()
}

type ConsumerBasicAuthInput interface {
	pulumi.Input

	ToConsumerBasicAuthOutput() ConsumerBasicAuthOutput
	ToConsumerBasicAuthOutputWithContext(ctx context.Context) ConsumerBasicAuthOutput
}

func (*ConsumerBasicAuth) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerBasicAuth)(nil))
}

func (i *ConsumerBasicAuth) ToConsumerBasicAuthOutput() ConsumerBasicAuthOutput {
	return i.ToConsumerBasicAuthOutputWithContext(context.Background())
}

func (i *ConsumerBasicAuth) ToConsumerBasicAuthOutputWithContext(ctx context.Context) ConsumerBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicAuthOutput)
}

func (i *ConsumerBasicAuth) ToConsumerBasicAuthPtrOutput() ConsumerBasicAuthPtrOutput {
	return i.ToConsumerBasicAuthPtrOutputWithContext(context.Background())
}

func (i *ConsumerBasicAuth) ToConsumerBasicAuthPtrOutputWithContext(ctx context.Context) ConsumerBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicAuthPtrOutput)
}

type ConsumerBasicAuthPtrInput interface {
	pulumi.Input

	ToConsumerBasicAuthPtrOutput() ConsumerBasicAuthPtrOutput
	ToConsumerBasicAuthPtrOutputWithContext(ctx context.Context) ConsumerBasicAuthPtrOutput
}

type consumerBasicAuthPtrType ConsumerBasicAuthArgs

func (*consumerBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerBasicAuth)(nil))
}

func (i *consumerBasicAuthPtrType) ToConsumerBasicAuthPtrOutput() ConsumerBasicAuthPtrOutput {
	return i.ToConsumerBasicAuthPtrOutputWithContext(context.Background())
}

func (i *consumerBasicAuthPtrType) ToConsumerBasicAuthPtrOutputWithContext(ctx context.Context) ConsumerBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicAuthPtrOutput)
}

// ConsumerBasicAuthArrayInput is an input type that accepts ConsumerBasicAuthArray and ConsumerBasicAuthArrayOutput values.
// You can construct a concrete instance of `ConsumerBasicAuthArrayInput` via:
//
//          ConsumerBasicAuthArray{ ConsumerBasicAuthArgs{...} }
type ConsumerBasicAuthArrayInput interface {
	pulumi.Input

	ToConsumerBasicAuthArrayOutput() ConsumerBasicAuthArrayOutput
	ToConsumerBasicAuthArrayOutputWithContext(context.Context) ConsumerBasicAuthArrayOutput
}

type ConsumerBasicAuthArray []ConsumerBasicAuthInput

func (ConsumerBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ConsumerBasicAuth)(nil))
}

func (i ConsumerBasicAuthArray) ToConsumerBasicAuthArrayOutput() ConsumerBasicAuthArrayOutput {
	return i.ToConsumerBasicAuthArrayOutputWithContext(context.Background())
}

func (i ConsumerBasicAuthArray) ToConsumerBasicAuthArrayOutputWithContext(ctx context.Context) ConsumerBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicAuthArrayOutput)
}

// ConsumerBasicAuthMapInput is an input type that accepts ConsumerBasicAuthMap and ConsumerBasicAuthMapOutput values.
// You can construct a concrete instance of `ConsumerBasicAuthMapInput` via:
//
//          ConsumerBasicAuthMap{ "key": ConsumerBasicAuthArgs{...} }
type ConsumerBasicAuthMapInput interface {
	pulumi.Input

	ToConsumerBasicAuthMapOutput() ConsumerBasicAuthMapOutput
	ToConsumerBasicAuthMapOutputWithContext(context.Context) ConsumerBasicAuthMapOutput
}

type ConsumerBasicAuthMap map[string]ConsumerBasicAuthInput

func (ConsumerBasicAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ConsumerBasicAuth)(nil))
}

func (i ConsumerBasicAuthMap) ToConsumerBasicAuthMapOutput() ConsumerBasicAuthMapOutput {
	return i.ToConsumerBasicAuthMapOutputWithContext(context.Background())
}

func (i ConsumerBasicAuthMap) ToConsumerBasicAuthMapOutputWithContext(ctx context.Context) ConsumerBasicAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerBasicAuthMapOutput)
}

type ConsumerBasicAuthOutput struct {
	*pulumi.OutputState
}

func (ConsumerBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerBasicAuth)(nil))
}

func (o ConsumerBasicAuthOutput) ToConsumerBasicAuthOutput() ConsumerBasicAuthOutput {
	return o
}

func (o ConsumerBasicAuthOutput) ToConsumerBasicAuthOutputWithContext(ctx context.Context) ConsumerBasicAuthOutput {
	return o
}

func (o ConsumerBasicAuthOutput) ToConsumerBasicAuthPtrOutput() ConsumerBasicAuthPtrOutput {
	return o.ToConsumerBasicAuthPtrOutputWithContext(context.Background())
}

func (o ConsumerBasicAuthOutput) ToConsumerBasicAuthPtrOutputWithContext(ctx context.Context) ConsumerBasicAuthPtrOutput {
	return o.ApplyT(func(v ConsumerBasicAuth) *ConsumerBasicAuth {
		return &v
	}).(ConsumerBasicAuthPtrOutput)
}

type ConsumerBasicAuthPtrOutput struct {
	*pulumi.OutputState
}

func (ConsumerBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerBasicAuth)(nil))
}

func (o ConsumerBasicAuthPtrOutput) ToConsumerBasicAuthPtrOutput() ConsumerBasicAuthPtrOutput {
	return o
}

func (o ConsumerBasicAuthPtrOutput) ToConsumerBasicAuthPtrOutputWithContext(ctx context.Context) ConsumerBasicAuthPtrOutput {
	return o
}

type ConsumerBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (ConsumerBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerBasicAuth)(nil))
}

func (o ConsumerBasicAuthArrayOutput) ToConsumerBasicAuthArrayOutput() ConsumerBasicAuthArrayOutput {
	return o
}

func (o ConsumerBasicAuthArrayOutput) ToConsumerBasicAuthArrayOutputWithContext(ctx context.Context) ConsumerBasicAuthArrayOutput {
	return o
}

func (o ConsumerBasicAuthArrayOutput) Index(i pulumi.IntInput) ConsumerBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerBasicAuth {
		return vs[0].([]ConsumerBasicAuth)[vs[1].(int)]
	}).(ConsumerBasicAuthOutput)
}

type ConsumerBasicAuthMapOutput struct{ *pulumi.OutputState }

func (ConsumerBasicAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConsumerBasicAuth)(nil))
}

func (o ConsumerBasicAuthMapOutput) ToConsumerBasicAuthMapOutput() ConsumerBasicAuthMapOutput {
	return o
}

func (o ConsumerBasicAuthMapOutput) ToConsumerBasicAuthMapOutputWithContext(ctx context.Context) ConsumerBasicAuthMapOutput {
	return o
}

func (o ConsumerBasicAuthMapOutput) MapIndex(k pulumi.StringInput) ConsumerBasicAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConsumerBasicAuth {
		return vs[0].(map[string]ConsumerBasicAuth)[vs[1].(string)]
	}).(ConsumerBasicAuthOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsumerBasicAuthOutput{})
	pulumi.RegisterOutputType(ConsumerBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(ConsumerBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(ConsumerBasicAuthMapOutput{})
}
