// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Consumer struct {
	pulumi.CustomResourceState

	CustomId pulumi.StringPtrOutput `pulumi:"customId"`
	Username pulumi.StringOutput    `pulumi:"username"`
}

// NewConsumer registers a new resource with the given unique name, arguments, and options.
func NewConsumer(ctx *pulumi.Context,
	name string, args *ConsumerArgs, opts ...pulumi.ResourceOption) (*Consumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource Consumer
	err := ctx.RegisterResource("kong:index/consumer:Consumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumer gets an existing Consumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerState, opts ...pulumi.ResourceOption) (*Consumer, error) {
	var resource Consumer
	err := ctx.ReadResource("kong:index/consumer:Consumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Consumer resources.
type consumerState struct {
	CustomId *string `pulumi:"customId"`
	Username *string `pulumi:"username"`
}

type ConsumerState struct {
	CustomId pulumi.StringPtrInput
	Username pulumi.StringPtrInput
}

func (ConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerState)(nil)).Elem()
}

type consumerArgs struct {
	CustomId *string `pulumi:"customId"`
	Username string  `pulumi:"username"`
}

// The set of arguments for constructing a Consumer resource.
type ConsumerArgs struct {
	CustomId pulumi.StringPtrInput
	Username pulumi.StringInput
}

func (ConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerArgs)(nil)).Elem()
}

type ConsumerInput interface {
	pulumi.Input

	ToConsumerOutput() ConsumerOutput
	ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput
}

func (*Consumer) ElementType() reflect.Type {
	return reflect.TypeOf((*Consumer)(nil))
}

func (i *Consumer) ToConsumerOutput() ConsumerOutput {
	return i.ToConsumerOutputWithContext(context.Background())
}

func (i *Consumer) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerOutput)
}

func (i *Consumer) ToConsumerPtrOutput() ConsumerPtrOutput {
	return i.ToConsumerPtrOutputWithContext(context.Background())
}

func (i *Consumer) ToConsumerPtrOutputWithContext(ctx context.Context) ConsumerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPtrOutput)
}

type ConsumerPtrInput interface {
	pulumi.Input

	ToConsumerPtrOutput() ConsumerPtrOutput
	ToConsumerPtrOutputWithContext(ctx context.Context) ConsumerPtrOutput
}

type consumerPtrType ConsumerArgs

func (*consumerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Consumer)(nil))
}

func (i *consumerPtrType) ToConsumerPtrOutput() ConsumerPtrOutput {
	return i.ToConsumerPtrOutputWithContext(context.Background())
}

func (i *consumerPtrType) ToConsumerPtrOutputWithContext(ctx context.Context) ConsumerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPtrOutput)
}

// ConsumerArrayInput is an input type that accepts ConsumerArray and ConsumerArrayOutput values.
// You can construct a concrete instance of `ConsumerArrayInput` via:
//
//          ConsumerArray{ ConsumerArgs{...} }
type ConsumerArrayInput interface {
	pulumi.Input

	ToConsumerArrayOutput() ConsumerArrayOutput
	ToConsumerArrayOutputWithContext(context.Context) ConsumerArrayOutput
}

type ConsumerArray []ConsumerInput

func (ConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Consumer)(nil))
}

func (i ConsumerArray) ToConsumerArrayOutput() ConsumerArrayOutput {
	return i.ToConsumerArrayOutputWithContext(context.Background())
}

func (i ConsumerArray) ToConsumerArrayOutputWithContext(ctx context.Context) ConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerArrayOutput)
}

// ConsumerMapInput is an input type that accepts ConsumerMap and ConsumerMapOutput values.
// You can construct a concrete instance of `ConsumerMapInput` via:
//
//          ConsumerMap{ "key": ConsumerArgs{...} }
type ConsumerMapInput interface {
	pulumi.Input

	ToConsumerMapOutput() ConsumerMapOutput
	ToConsumerMapOutputWithContext(context.Context) ConsumerMapOutput
}

type ConsumerMap map[string]ConsumerInput

func (ConsumerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Consumer)(nil))
}

func (i ConsumerMap) ToConsumerMapOutput() ConsumerMapOutput {
	return i.ToConsumerMapOutputWithContext(context.Background())
}

func (i ConsumerMap) ToConsumerMapOutputWithContext(ctx context.Context) ConsumerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerMapOutput)
}

type ConsumerOutput struct {
	*pulumi.OutputState
}

func (ConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Consumer)(nil))
}

func (o ConsumerOutput) ToConsumerOutput() ConsumerOutput {
	return o
}

func (o ConsumerOutput) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return o
}

func (o ConsumerOutput) ToConsumerPtrOutput() ConsumerPtrOutput {
	return o.ToConsumerPtrOutputWithContext(context.Background())
}

func (o ConsumerOutput) ToConsumerPtrOutputWithContext(ctx context.Context) ConsumerPtrOutput {
	return o.ApplyT(func(v Consumer) *Consumer {
		return &v
	}).(ConsumerPtrOutput)
}

type ConsumerPtrOutput struct {
	*pulumi.OutputState
}

func (ConsumerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Consumer)(nil))
}

func (o ConsumerPtrOutput) ToConsumerPtrOutput() ConsumerPtrOutput {
	return o
}

func (o ConsumerPtrOutput) ToConsumerPtrOutputWithContext(ctx context.Context) ConsumerPtrOutput {
	return o
}

type ConsumerArrayOutput struct{ *pulumi.OutputState }

func (ConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Consumer)(nil))
}

func (o ConsumerArrayOutput) ToConsumerArrayOutput() ConsumerArrayOutput {
	return o
}

func (o ConsumerArrayOutput) ToConsumerArrayOutputWithContext(ctx context.Context) ConsumerArrayOutput {
	return o
}

func (o ConsumerArrayOutput) Index(i pulumi.IntInput) ConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Consumer {
		return vs[0].([]Consumer)[vs[1].(int)]
	}).(ConsumerOutput)
}

type ConsumerMapOutput struct{ *pulumi.OutputState }

func (ConsumerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Consumer)(nil))
}

func (o ConsumerMapOutput) ToConsumerMapOutput() ConsumerMapOutput {
	return o
}

func (o ConsumerMapOutput) ToConsumerMapOutputWithContext(ctx context.Context) ConsumerMapOutput {
	return o
}

func (o ConsumerMapOutput) MapIndex(k pulumi.StringInput) ConsumerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Consumer {
		return vs[0].(map[string]Consumer)[vs[1].(string)]
	}).(ConsumerOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsumerOutput{})
	pulumi.RegisterOutputType(ConsumerPtrOutput{})
	pulumi.RegisterOutputType(ConsumerArrayOutput{})
	pulumi.RegisterOutputType(ConsumerMapOutput{})
}
