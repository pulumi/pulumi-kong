// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Consumer struct {
	s *pulumi.ResourceState
}

// NewConsumer registers a new resource with the given unique name, arguments, and options.
func NewConsumer(ctx *pulumi.Context,
	name string, args *ConsumerArgs, opts ...pulumi.ResourceOpt) (*Consumer, error) {
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customId"] = nil
		inputs["username"] = nil
	} else {
		inputs["customId"] = args.CustomId
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("kong:index/consumer:Consumer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Consumer{s: s}, nil
}

// GetConsumer gets an existing Consumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConsumerState, opts ...pulumi.ResourceOpt) (*Consumer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customId"] = state.CustomId
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("kong:index/consumer:Consumer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Consumer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Consumer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Consumer) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Consumer) CustomId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["customId"])
}

func (r *Consumer) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering Consumer resources.
type ConsumerState struct {
	CustomId interface{}
	Username interface{}
}

// The set of arguments for constructing a Consumer resource.
type ConsumerArgs struct {
	CustomId interface{}
	Username interface{}
}
