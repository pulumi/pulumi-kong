// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Consumer struct {
	pulumi.CustomResourceState

	CustomId pulumi.StringPtrOutput `pulumi:"customId"`
	Username pulumi.StringOutput    `pulumi:"username"`
}

// NewConsumer registers a new resource with the given unique name, arguments, and options.
func NewConsumer(ctx *pulumi.Context,
	name string, args *ConsumerArgs, opts ...pulumi.ResourceOption) (*Consumer, error) {
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &ConsumerArgs{}
	}
	var resource Consumer
	err := ctx.RegisterResource("kong:index/consumer:Consumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumer gets an existing Consumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerState, opts ...pulumi.ResourceOption) (*Consumer, error) {
	var resource Consumer
	err := ctx.ReadResource("kong:index/consumer:Consumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Consumer resources.
type consumerState struct {
	CustomId *string `pulumi:"customId"`
	Username *string `pulumi:"username"`
}

type ConsumerState struct {
	CustomId pulumi.StringPtrInput
	Username pulumi.StringPtrInput
}

func (ConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerState)(nil)).Elem()
}

type consumerArgs struct {
	CustomId *string `pulumi:"customId"`
	Username string  `pulumi:"username"`
}

// The set of arguments for constructing a Consumer resource.
type ConsumerArgs struct {
	CustomId pulumi.StringPtrInput
	Username pulumi.StringInput
}

func (ConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerArgs)(nil)).Elem()
}

type ConsumerInput interface {
	pulumi.Input

	ToConsumerOutput() ConsumerOutput
	ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput
}

func (Consumer) ElementType() reflect.Type {
	return reflect.TypeOf((*Consumer)(nil)).Elem()
}

func (i Consumer) ToConsumerOutput() ConsumerOutput {
	return i.ToConsumerOutputWithContext(context.Background())
}

func (i Consumer) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerOutput)
}

type ConsumerOutput struct {
	*pulumi.OutputState
}

func (ConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerOutput)(nil)).Elem()
}

func (o ConsumerOutput) ToConsumerOutput() ConsumerOutput {
	return o
}

func (o ConsumerOutput) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConsumerOutput{})
}
