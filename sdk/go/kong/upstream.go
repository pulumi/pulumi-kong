// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Upstream struct {
	pulumi.CustomResourceState

	HashFallback       pulumi.StringPtrOutput     `pulumi:"hashFallback"`
	HashFallbackHeader pulumi.StringPtrOutput     `pulumi:"hashFallbackHeader"`
	HashOn             pulumi.StringPtrOutput     `pulumi:"hashOn"`
	HashOnCookie       pulumi.StringPtrOutput     `pulumi:"hashOnCookie"`
	HashOnCookiePath   pulumi.StringPtrOutput     `pulumi:"hashOnCookiePath"`
	HashOnHeader       pulumi.StringPtrOutput     `pulumi:"hashOnHeader"`
	Healthchecks       UpstreamHealthchecksOutput `pulumi:"healthchecks"`
	Name               pulumi.StringOutput        `pulumi:"name"`
	Slots              pulumi.IntPtrOutput        `pulumi:"slots"`
}

// NewUpstream registers a new resource with the given unique name, arguments, and options.
func NewUpstream(ctx *pulumi.Context,
	name string, args *UpstreamArgs, opts ...pulumi.ResourceOption) (*Upstream, error) {
	if args == nil {
		args = &UpstreamArgs{}
	}

	var resource Upstream
	err := ctx.RegisterResource("kong:index/upstream:Upstream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpstream gets an existing Upstream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpstream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpstreamState, opts ...pulumi.ResourceOption) (*Upstream, error) {
	var resource Upstream
	err := ctx.ReadResource("kong:index/upstream:Upstream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Upstream resources.
type upstreamState struct {
	HashFallback       *string               `pulumi:"hashFallback"`
	HashFallbackHeader *string               `pulumi:"hashFallbackHeader"`
	HashOn             *string               `pulumi:"hashOn"`
	HashOnCookie       *string               `pulumi:"hashOnCookie"`
	HashOnCookiePath   *string               `pulumi:"hashOnCookiePath"`
	HashOnHeader       *string               `pulumi:"hashOnHeader"`
	Healthchecks       *UpstreamHealthchecks `pulumi:"healthchecks"`
	Name               *string               `pulumi:"name"`
	Slots              *int                  `pulumi:"slots"`
}

type UpstreamState struct {
	HashFallback       pulumi.StringPtrInput
	HashFallbackHeader pulumi.StringPtrInput
	HashOn             pulumi.StringPtrInput
	HashOnCookie       pulumi.StringPtrInput
	HashOnCookiePath   pulumi.StringPtrInput
	HashOnHeader       pulumi.StringPtrInput
	Healthchecks       UpstreamHealthchecksPtrInput
	Name               pulumi.StringPtrInput
	Slots              pulumi.IntPtrInput
}

func (UpstreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamState)(nil)).Elem()
}

type upstreamArgs struct {
	HashFallback       *string               `pulumi:"hashFallback"`
	HashFallbackHeader *string               `pulumi:"hashFallbackHeader"`
	HashOn             *string               `pulumi:"hashOn"`
	HashOnCookie       *string               `pulumi:"hashOnCookie"`
	HashOnCookiePath   *string               `pulumi:"hashOnCookiePath"`
	HashOnHeader       *string               `pulumi:"hashOnHeader"`
	Healthchecks       *UpstreamHealthchecks `pulumi:"healthchecks"`
	Name               *string               `pulumi:"name"`
	Slots              *int                  `pulumi:"slots"`
}

// The set of arguments for constructing a Upstream resource.
type UpstreamArgs struct {
	HashFallback       pulumi.StringPtrInput
	HashFallbackHeader pulumi.StringPtrInput
	HashOn             pulumi.StringPtrInput
	HashOnCookie       pulumi.StringPtrInput
	HashOnCookiePath   pulumi.StringPtrInput
	HashOnHeader       pulumi.StringPtrInput
	Healthchecks       UpstreamHealthchecksPtrInput
	Name               pulumi.StringPtrInput
	Slots              pulumi.IntPtrInput
}

func (UpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamArgs)(nil)).Elem()
}

type UpstreamInput interface {
	pulumi.Input

	ToUpstreamOutput() UpstreamOutput
	ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput
}

func (*Upstream) ElementType() reflect.Type {
	return reflect.TypeOf((*Upstream)(nil))
}

func (i *Upstream) ToUpstreamOutput() UpstreamOutput {
	return i.ToUpstreamOutputWithContext(context.Background())
}

func (i *Upstream) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamOutput)
}

func (i *Upstream) ToUpstreamPtrOutput() UpstreamPtrOutput {
	return i.ToUpstreamPtrOutputWithContext(context.Background())
}

func (i *Upstream) ToUpstreamPtrOutputWithContext(ctx context.Context) UpstreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPtrOutput)
}

type UpstreamPtrInput interface {
	pulumi.Input

	ToUpstreamPtrOutput() UpstreamPtrOutput
	ToUpstreamPtrOutputWithContext(ctx context.Context) UpstreamPtrOutput
}

type upstreamPtrType UpstreamArgs

func (*upstreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil))
}

func (i *upstreamPtrType) ToUpstreamPtrOutput() UpstreamPtrOutput {
	return i.ToUpstreamPtrOutputWithContext(context.Background())
}

func (i *upstreamPtrType) ToUpstreamPtrOutputWithContext(ctx context.Context) UpstreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPtrOutput)
}

// UpstreamArrayInput is an input type that accepts UpstreamArray and UpstreamArrayOutput values.
// You can construct a concrete instance of `UpstreamArrayInput` via:
//
//          UpstreamArray{ UpstreamArgs{...} }
type UpstreamArrayInput interface {
	pulumi.Input

	ToUpstreamArrayOutput() UpstreamArrayOutput
	ToUpstreamArrayOutputWithContext(context.Context) UpstreamArrayOutput
}

type UpstreamArray []UpstreamInput

func (UpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Upstream)(nil))
}

func (i UpstreamArray) ToUpstreamArrayOutput() UpstreamArrayOutput {
	return i.ToUpstreamArrayOutputWithContext(context.Background())
}

func (i UpstreamArray) ToUpstreamArrayOutputWithContext(ctx context.Context) UpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamArrayOutput)
}

// UpstreamMapInput is an input type that accepts UpstreamMap and UpstreamMapOutput values.
// You can construct a concrete instance of `UpstreamMapInput` via:
//
//          UpstreamMap{ "key": UpstreamArgs{...} }
type UpstreamMapInput interface {
	pulumi.Input

	ToUpstreamMapOutput() UpstreamMapOutput
	ToUpstreamMapOutputWithContext(context.Context) UpstreamMapOutput
}

type UpstreamMap map[string]UpstreamInput

func (UpstreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Upstream)(nil))
}

func (i UpstreamMap) ToUpstreamMapOutput() UpstreamMapOutput {
	return i.ToUpstreamMapOutputWithContext(context.Background())
}

func (i UpstreamMap) ToUpstreamMapOutputWithContext(ctx context.Context) UpstreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamMapOutput)
}

type UpstreamOutput struct {
	*pulumi.OutputState
}

func (UpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Upstream)(nil))
}

func (o UpstreamOutput) ToUpstreamOutput() UpstreamOutput {
	return o
}

func (o UpstreamOutput) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return o
}

func (o UpstreamOutput) ToUpstreamPtrOutput() UpstreamPtrOutput {
	return o.ToUpstreamPtrOutputWithContext(context.Background())
}

func (o UpstreamOutput) ToUpstreamPtrOutputWithContext(ctx context.Context) UpstreamPtrOutput {
	return o.ApplyT(func(v Upstream) *Upstream {
		return &v
	}).(UpstreamPtrOutput)
}

type UpstreamPtrOutput struct {
	*pulumi.OutputState
}

func (UpstreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil))
}

func (o UpstreamPtrOutput) ToUpstreamPtrOutput() UpstreamPtrOutput {
	return o
}

func (o UpstreamPtrOutput) ToUpstreamPtrOutputWithContext(ctx context.Context) UpstreamPtrOutput {
	return o
}

type UpstreamArrayOutput struct{ *pulumi.OutputState }

func (UpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Upstream)(nil))
}

func (o UpstreamArrayOutput) ToUpstreamArrayOutput() UpstreamArrayOutput {
	return o
}

func (o UpstreamArrayOutput) ToUpstreamArrayOutputWithContext(ctx context.Context) UpstreamArrayOutput {
	return o
}

func (o UpstreamArrayOutput) Index(i pulumi.IntInput) UpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Upstream {
		return vs[0].([]Upstream)[vs[1].(int)]
	}).(UpstreamOutput)
}

type UpstreamMapOutput struct{ *pulumi.OutputState }

func (UpstreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Upstream)(nil))
}

func (o UpstreamMapOutput) ToUpstreamMapOutput() UpstreamMapOutput {
	return o
}

func (o UpstreamMapOutput) ToUpstreamMapOutputWithContext(ctx context.Context) UpstreamMapOutput {
	return o
}

func (o UpstreamMapOutput) MapIndex(k pulumi.StringInput) UpstreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Upstream {
		return vs[0].(map[string]Upstream)[vs[1].(string)]
	}).(UpstreamOutput)
}

func init() {
	pulumi.RegisterOutputType(UpstreamOutput{})
	pulumi.RegisterOutputType(UpstreamPtrOutput{})
	pulumi.RegisterOutputType(UpstreamArrayOutput{})
	pulumi.RegisterOutputType(UpstreamMapOutput{})
}
