// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Upstream struct {
	s *pulumi.ResourceState
}

// NewUpstream registers a new resource with the given unique name, arguments, and options.
func NewUpstream(ctx *pulumi.Context,
	name string, args *UpstreamArgs, opts ...pulumi.ResourceOpt) (*Upstream, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["hashFallback"] = nil
		inputs["hashFallbackHeader"] = nil
		inputs["hashOn"] = nil
		inputs["hashOnCookie"] = nil
		inputs["hashOnCookiePath"] = nil
		inputs["hashOnHeader"] = nil
		inputs["healthchecks"] = nil
		inputs["name"] = nil
		inputs["slots"] = nil
	} else {
		inputs["hashFallback"] = args.HashFallback
		inputs["hashFallbackHeader"] = args.HashFallbackHeader
		inputs["hashOn"] = args.HashOn
		inputs["hashOnCookie"] = args.HashOnCookie
		inputs["hashOnCookiePath"] = args.HashOnCookiePath
		inputs["hashOnHeader"] = args.HashOnHeader
		inputs["healthchecks"] = args.Healthchecks
		inputs["name"] = args.Name
		inputs["slots"] = args.Slots
	}
	s, err := ctx.RegisterResource("kong:index/upstream:Upstream", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Upstream{s: s}, nil
}

// GetUpstream gets an existing Upstream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpstream(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UpstreamState, opts ...pulumi.ResourceOpt) (*Upstream, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["hashFallback"] = state.HashFallback
		inputs["hashFallbackHeader"] = state.HashFallbackHeader
		inputs["hashOn"] = state.HashOn
		inputs["hashOnCookie"] = state.HashOnCookie
		inputs["hashOnCookiePath"] = state.HashOnCookiePath
		inputs["hashOnHeader"] = state.HashOnHeader
		inputs["healthchecks"] = state.Healthchecks
		inputs["name"] = state.Name
		inputs["slots"] = state.Slots
	}
	s, err := ctx.ReadResource("kong:index/upstream:Upstream", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Upstream{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Upstream) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Upstream) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Upstream) HashFallback() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashFallback"])
}

func (r *Upstream) HashFallbackHeader() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashFallbackHeader"])
}

func (r *Upstream) HashOn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashOn"])
}

func (r *Upstream) HashOnCookie() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashOnCookie"])
}

func (r *Upstream) HashOnCookiePath() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashOnCookiePath"])
}

func (r *Upstream) HashOnHeader() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hashOnHeader"])
}

func (r *Upstream) Healthchecks() pulumi.Output {
	return r.s.State["healthchecks"]
}

func (r *Upstream) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Upstream) Slots() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["slots"])
}

// Input properties used for looking up and filtering Upstream resources.
type UpstreamState struct {
	HashFallback interface{}
	HashFallbackHeader interface{}
	HashOn interface{}
	HashOnCookie interface{}
	HashOnCookiePath interface{}
	HashOnHeader interface{}
	Healthchecks interface{}
	Name interface{}
	Slots interface{}
}

// The set of arguments for constructing a Upstream resource.
type UpstreamArgs struct {
	HashFallback interface{}
	HashFallbackHeader interface{}
	HashOn interface{}
	HashOnCookie interface{}
	HashOnCookiePath interface{}
	HashOnHeader interface{}
	Healthchecks interface{}
	Name interface{}
	Slots interface{}
}
