// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			certificate, err := kong.NewCertificate(ctx, "certificate", &kong.CertificateArgs{
//				Certificate: pulumi.String("    -----BEGIN CERTIFICATE-----\n    ......\n    -----END CERTIFICATE-----\n"),
//				PrivateKey:  pulumi.String("    -----BEGIN PRIVATE KEY-----\n    .....\n    -----END PRIVATE KEY-----\n"),
//				Snis: pulumi.StringArray{
//					pulumi.String("foo.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kong.NewUpstream(ctx, "upstream", &kong.UpstreamArgs{
//				Name:               pulumi.String("sample_upstream"),
//				Slots:              pulumi.Int(10),
//				HashOn:             pulumi.String("header"),
//				HashFallback:       pulumi.String("cookie"),
//				HashOnHeader:       pulumi.String("HeaderName"),
//				HashFallbackHeader: pulumi.String("FallbackHeaderName"),
//				HashOnCookie:       pulumi.String("CookieName"),
//				HashOnCookiePath:   pulumi.String("/path"),
//				HostHeader:         pulumi.String("x-host"),
//				Tags: pulumi.StringArray{
//					pulumi.String("a"),
//					pulumi.String("b"),
//				},
//				ClientCertificateId: certificate.ID(),
//				Healthchecks: &kong.UpstreamHealthchecksArgs{
//					Active: &kong.UpstreamHealthchecksActiveArgs{
//						Type:                   pulumi.String("https"),
//						HttpPath:               pulumi.String("/status"),
//						Timeout:                pulumi.Int(10),
//						Concurrency:            pulumi.Int(20),
//						HttpsVerifyCertificate: pulumi.Bool(false),
//						HttpsSni:               pulumi.String("some.domain.com"),
//						Healthy: &kong.UpstreamHealthchecksActiveHealthyArgs{
//							Successes: pulumi.Int(1),
//							Interval:  pulumi.Int(5),
//							HttpStatuses: pulumi.IntArray{
//								pulumi.Int(200),
//								pulumi.Int(201),
//							},
//						},
//						Unhealthy: &kong.UpstreamHealthchecksActiveUnhealthyArgs{
//							Timeouts:     pulumi.Int(7),
//							Interval:     pulumi.Int(3),
//							TcpFailures:  pulumi.Int(1),
//							HttpFailures: pulumi.Int(2),
//							HttpStatuses: pulumi.IntArray{
//								pulumi.Int(500),
//								pulumi.Int(501),
//							},
//						},
//					},
//					Passive: &kong.UpstreamHealthchecksPassiveArgs{
//						Type: pulumi.String("https"),
//						Healthy: &kong.UpstreamHealthchecksPassiveHealthyArgs{
//							Successes: pulumi.Int(1),
//							HttpStatuses: pulumi.IntArray{
//								pulumi.Int(200),
//								pulumi.Int(201),
//								pulumi.Int(202),
//							},
//						},
//						Unhealthy: &kong.UpstreamHealthchecksPassiveUnhealthyArgs{
//							Timeouts:     pulumi.Int(3),
//							TcpFailures:  pulumi.Int(5),
//							HttpFailures: pulumi.Int(6),
//							HttpStatuses: pulumi.IntArray{
//								pulumi.Int(500),
//								pulumi.Int(501),
//								pulumi.Int(502),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// To import an upstream:
//
// ```sh
// $ pulumi import kong:index/upstream:Upstream <upstream_identifier> <upstream_id>
// ```
type Upstream struct {
	pulumi.CustomResourceState

	// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
	ClientCertificateId pulumi.StringPtrOutput `pulumi:"clientCertificateId"`
	// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
	HashFallback pulumi.StringPtrOutput `pulumi:"hashFallback"`
	// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
	HashFallbackHeader pulumi.StringPtrOutput `pulumi:"hashFallbackHeader"`
	// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
	HashOn pulumi.StringPtrOutput `pulumi:"hashOn"`
	// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
	HashOnCookie pulumi.StringPtrOutput `pulumi:"hashOnCookie"`
	// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
	// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
	// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
	// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
	// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
	// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
	// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
	// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
	// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
	// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
	// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
	// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
	// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
	HashOnCookiePath pulumi.StringPtrOutput `pulumi:"hashOnCookiePath"`
	// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
	HashOnHeader pulumi.StringPtrOutput     `pulumi:"hashOnHeader"`
	Healthchecks UpstreamHealthchecksOutput `pulumi:"healthchecks"`
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader pulumi.StringPtrOutput `pulumi:"hostHeader"`
	// is a hostname, which must be equal to the host of a Service.
	Name pulumi.StringOutput `pulumi:"name"`
	// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
	Slots pulumi.IntPtrOutput `pulumi:"slots"`
	// A list of strings associated with the Upstream for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewUpstream registers a new resource with the given unique name, arguments, and options.
func NewUpstream(ctx *pulumi.Context,
	name string, args *UpstreamArgs, opts ...pulumi.ResourceOption) (*Upstream, error) {
	if args == nil {
		args = &UpstreamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Upstream
	err := ctx.RegisterResource("kong:index/upstream:Upstream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpstream gets an existing Upstream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpstream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpstreamState, opts ...pulumi.ResourceOption) (*Upstream, error) {
	var resource Upstream
	err := ctx.ReadResource("kong:index/upstream:Upstream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Upstream resources.
type upstreamState struct {
	// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
	HashFallback *string `pulumi:"hashFallback"`
	// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
	HashFallbackHeader *string `pulumi:"hashFallbackHeader"`
	// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
	HashOn *string `pulumi:"hashOn"`
	// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
	HashOnCookie *string `pulumi:"hashOnCookie"`
	// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
	// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
	// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
	// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
	// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
	// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
	// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
	// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
	// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
	// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
	// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
	// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
	// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
	HashOnCookiePath *string `pulumi:"hashOnCookiePath"`
	// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
	HashOnHeader *string               `pulumi:"hashOnHeader"`
	Healthchecks *UpstreamHealthchecks `pulumi:"healthchecks"`
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader *string `pulumi:"hostHeader"`
	// is a hostname, which must be equal to the host of a Service.
	Name *string `pulumi:"name"`
	// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
	Slots *int `pulumi:"slots"`
	// A list of strings associated with the Upstream for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

type UpstreamState struct {
	// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
	ClientCertificateId pulumi.StringPtrInput
	// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
	HashFallback pulumi.StringPtrInput
	// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
	HashFallbackHeader pulumi.StringPtrInput
	// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
	HashOn pulumi.StringPtrInput
	// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
	HashOnCookie pulumi.StringPtrInput
	// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
	// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
	// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
	// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
	// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
	// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
	// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
	// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
	// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
	// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
	// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
	// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
	// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
	HashOnCookiePath pulumi.StringPtrInput
	// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
	HashOnHeader pulumi.StringPtrInput
	Healthchecks UpstreamHealthchecksPtrInput
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader pulumi.StringPtrInput
	// is a hostname, which must be equal to the host of a Service.
	Name pulumi.StringPtrInput
	// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
	Slots pulumi.IntPtrInput
	// A list of strings associated with the Upstream for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (UpstreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamState)(nil)).Elem()
}

type upstreamArgs struct {
	// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
	HashFallback *string `pulumi:"hashFallback"`
	// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
	HashFallbackHeader *string `pulumi:"hashFallbackHeader"`
	// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
	HashOn *string `pulumi:"hashOn"`
	// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
	HashOnCookie *string `pulumi:"hashOnCookie"`
	// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
	// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
	// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
	// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
	// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
	// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
	// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
	// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
	// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
	// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
	// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
	// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
	// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
	HashOnCookiePath *string `pulumi:"hashOnCookiePath"`
	// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
	HashOnHeader *string               `pulumi:"hashOnHeader"`
	Healthchecks *UpstreamHealthchecks `pulumi:"healthchecks"`
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader *string `pulumi:"hostHeader"`
	// is a hostname, which must be equal to the host of a Service.
	Name *string `pulumi:"name"`
	// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
	Slots *int `pulumi:"slots"`
	// A list of strings associated with the Upstream for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Upstream resource.
type UpstreamArgs struct {
	// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
	ClientCertificateId pulumi.StringPtrInput
	// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
	HashFallback pulumi.StringPtrInput
	// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
	HashFallbackHeader pulumi.StringPtrInput
	// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
	HashOn pulumi.StringPtrInput
	// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
	HashOnCookie pulumi.StringPtrInput
	// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
	// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
	// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
	// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
	// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
	// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
	// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
	// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
	// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
	// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
	// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
	// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
	// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
	// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
	// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
	// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
	HashOnCookiePath pulumi.StringPtrInput
	// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
	HashOnHeader pulumi.StringPtrInput
	Healthchecks UpstreamHealthchecksPtrInput
	// The hostname to be used as Host header when proxying requests through Kong.
	HostHeader pulumi.StringPtrInput
	// is a hostname, which must be equal to the host of a Service.
	Name pulumi.StringPtrInput
	// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
	Slots pulumi.IntPtrInput
	// A list of strings associated with the Upstream for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (UpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamArgs)(nil)).Elem()
}

type UpstreamInput interface {
	pulumi.Input

	ToUpstreamOutput() UpstreamOutput
	ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput
}

func (*Upstream) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil)).Elem()
}

func (i *Upstream) ToUpstreamOutput() UpstreamOutput {
	return i.ToUpstreamOutputWithContext(context.Background())
}

func (i *Upstream) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamOutput)
}

// UpstreamArrayInput is an input type that accepts UpstreamArray and UpstreamArrayOutput values.
// You can construct a concrete instance of `UpstreamArrayInput` via:
//
//	UpstreamArray{ UpstreamArgs{...} }
type UpstreamArrayInput interface {
	pulumi.Input

	ToUpstreamArrayOutput() UpstreamArrayOutput
	ToUpstreamArrayOutputWithContext(context.Context) UpstreamArrayOutput
}

type UpstreamArray []UpstreamInput

func (UpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Upstream)(nil)).Elem()
}

func (i UpstreamArray) ToUpstreamArrayOutput() UpstreamArrayOutput {
	return i.ToUpstreamArrayOutputWithContext(context.Background())
}

func (i UpstreamArray) ToUpstreamArrayOutputWithContext(ctx context.Context) UpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamArrayOutput)
}

// UpstreamMapInput is an input type that accepts UpstreamMap and UpstreamMapOutput values.
// You can construct a concrete instance of `UpstreamMapInput` via:
//
//	UpstreamMap{ "key": UpstreamArgs{...} }
type UpstreamMapInput interface {
	pulumi.Input

	ToUpstreamMapOutput() UpstreamMapOutput
	ToUpstreamMapOutputWithContext(context.Context) UpstreamMapOutput
}

type UpstreamMap map[string]UpstreamInput

func (UpstreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Upstream)(nil)).Elem()
}

func (i UpstreamMap) ToUpstreamMapOutput() UpstreamMapOutput {
	return i.ToUpstreamMapOutputWithContext(context.Background())
}

func (i UpstreamMap) ToUpstreamMapOutputWithContext(ctx context.Context) UpstreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamMapOutput)
}

type UpstreamOutput struct{ *pulumi.OutputState }

func (UpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil)).Elem()
}

func (o UpstreamOutput) ToUpstreamOutput() UpstreamOutput {
	return o
}

func (o UpstreamOutput) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return o
}

// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
func (o UpstreamOutput) ClientCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.ClientCertificateId }).(pulumi.StringPtrOutput)
}

// is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
func (o UpstreamOutput) HashFallback() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashFallback }).(pulumi.StringPtrOutput)
}

// is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
func (o UpstreamOutput) HashFallbackHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashFallbackHeader }).(pulumi.StringPtrOutput)
}

// is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
func (o UpstreamOutput) HashOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashOn }).(pulumi.StringPtrOutput)
}

// is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
func (o UpstreamOutput) HashOnCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashOnCookie }).(pulumi.StringPtrOutput)
}

// is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
func (o UpstreamOutput) HashOnCookiePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashOnCookiePath }).(pulumi.StringPtrOutput)
}

// is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
func (o UpstreamOutput) HashOnHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HashOnHeader }).(pulumi.StringPtrOutput)
}

func (o UpstreamOutput) Healthchecks() UpstreamHealthchecksOutput {
	return o.ApplyT(func(v *Upstream) UpstreamHealthchecksOutput { return v.Healthchecks }).(UpstreamHealthchecksOutput)
}

// The hostname to be used as Host header when proxying requests through Kong.
func (o UpstreamOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// is a hostname, which must be equal to the host of a Service.
func (o UpstreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
func (o UpstreamOutput) Slots() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.IntPtrOutput { return v.Slots }).(pulumi.IntPtrOutput)
}

// A list of strings associated with the Upstream for grouping and filtering.
func (o UpstreamOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type UpstreamArrayOutput struct{ *pulumi.OutputState }

func (UpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Upstream)(nil)).Elem()
}

func (o UpstreamArrayOutput) ToUpstreamArrayOutput() UpstreamArrayOutput {
	return o
}

func (o UpstreamArrayOutput) ToUpstreamArrayOutputWithContext(ctx context.Context) UpstreamArrayOutput {
	return o
}

func (o UpstreamArrayOutput) Index(i pulumi.IntInput) UpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Upstream {
		return vs[0].([]*Upstream)[vs[1].(int)]
	}).(UpstreamOutput)
}

type UpstreamMapOutput struct{ *pulumi.OutputState }

func (UpstreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Upstream)(nil)).Elem()
}

func (o UpstreamMapOutput) ToUpstreamMapOutput() UpstreamMapOutput {
	return o
}

func (o UpstreamMapOutput) ToUpstreamMapOutputWithContext(ctx context.Context) UpstreamMapOutput {
	return o
}

func (o UpstreamMapOutput) MapIndex(k pulumi.StringInput) UpstreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Upstream {
		return vs[0].(map[string]*Upstream)[vs[1].(string)]
	}).(UpstreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamInput)(nil)).Elem(), &Upstream{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamArrayInput)(nil)).Elem(), UpstreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamMapInput)(nil)).Elem(), UpstreamMap{})
	pulumi.RegisterOutputType(UpstreamOutput{})
	pulumi.RegisterOutputType(UpstreamArrayOutput{})
	pulumi.RegisterOutputType(UpstreamMapOutput{})
}
