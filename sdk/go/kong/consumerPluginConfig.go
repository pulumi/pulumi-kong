// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ConsumerPluginConfig struct {
	pulumi.CustomResourceState

	ComputedConfig pulumi.StringOutput `pulumi:"computedConfig"`
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	ConsumerId pulumi.StringOutput    `pulumi:"consumerId"`
	PluginName pulumi.StringOutput    `pulumi:"pluginName"`
}

// NewConsumerPluginConfig registers a new resource with the given unique name, arguments, and options.
func NewConsumerPluginConfig(ctx *pulumi.Context,
	name string, args *ConsumerPluginConfigArgs, opts ...pulumi.ResourceOption) (*ConsumerPluginConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.PluginName == nil {
		return nil, errors.New("invalid value for required argument 'PluginName'")
	}
	var resource ConsumerPluginConfig
	err := ctx.RegisterResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerPluginConfig gets an existing ConsumerPluginConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerPluginConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerPluginConfigState, opts ...pulumi.ResourceOption) (*ConsumerPluginConfig, error) {
	var resource ConsumerPluginConfig
	err := ctx.ReadResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerPluginConfig resources.
type consumerPluginConfigState struct {
	ComputedConfig *string `pulumi:"computedConfig"`
	// JSON format of plugin config
	ConfigJson *string `pulumi:"configJson"`
	ConsumerId *string `pulumi:"consumerId"`
	PluginName *string `pulumi:"pluginName"`
}

type ConsumerPluginConfigState struct {
	ComputedConfig pulumi.StringPtrInput
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrInput
	ConsumerId pulumi.StringPtrInput
	PluginName pulumi.StringPtrInput
}

func (ConsumerPluginConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerPluginConfigState)(nil)).Elem()
}

type consumerPluginConfigArgs struct {
	// JSON format of plugin config
	ConfigJson *string `pulumi:"configJson"`
	ConsumerId string  `pulumi:"consumerId"`
	PluginName string  `pulumi:"pluginName"`
}

// The set of arguments for constructing a ConsumerPluginConfig resource.
type ConsumerPluginConfigArgs struct {
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrInput
	ConsumerId pulumi.StringInput
	PluginName pulumi.StringInput
}

func (ConsumerPluginConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerPluginConfigArgs)(nil)).Elem()
}

type ConsumerPluginConfigInput interface {
	pulumi.Input

	ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput
	ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput
}

func (*ConsumerPluginConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPluginConfig)(nil))
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput {
	return i.ToConsumerPluginConfigOutputWithContext(context.Background())
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigOutput)
}

type ConsumerPluginConfigOutput struct {
	*pulumi.OutputState
}

func (ConsumerPluginConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPluginConfig)(nil))
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput {
	return o
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConsumerPluginConfigOutput{})
}
