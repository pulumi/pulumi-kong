// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ConsumerPluginConfig struct {
	s *pulumi.ResourceState
}

// NewConsumerPluginConfig registers a new resource with the given unique name, arguments, and options.
func NewConsumerPluginConfig(ctx *pulumi.Context,
	name string, args *ConsumerPluginConfigArgs, opts ...pulumi.ResourceOpt) (*ConsumerPluginConfig, error) {
	if args == nil || args.ConsumerId == nil {
		return nil, errors.New("missing required argument 'ConsumerId'")
	}
	if args == nil || args.PluginName == nil {
		return nil, errors.New("missing required argument 'PluginName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["configJson"] = nil
		inputs["consumerId"] = nil
		inputs["pluginName"] = nil
	} else {
		inputs["configJson"] = args.ConfigJson
		inputs["consumerId"] = args.ConsumerId
		inputs["pluginName"] = args.PluginName
	}
	inputs["computedConfig"] = nil
	s, err := ctx.RegisterResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConsumerPluginConfig{s: s}, nil
}

// GetConsumerPluginConfig gets an existing ConsumerPluginConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerPluginConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConsumerPluginConfigState, opts ...pulumi.ResourceOpt) (*ConsumerPluginConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["computedConfig"] = state.ComputedConfig
		inputs["configJson"] = state.ConfigJson
		inputs["consumerId"] = state.ConsumerId
		inputs["pluginName"] = state.PluginName
	}
	s, err := ctx.ReadResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConsumerPluginConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ConsumerPluginConfig) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConsumerPluginConfig) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ConsumerPluginConfig) ComputedConfig() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["computedConfig"])
}

// JSON format of plugin config
func (r *ConsumerPluginConfig) ConfigJson() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["configJson"])
}

func (r *ConsumerPluginConfig) ConsumerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["consumerId"])
}

func (r *ConsumerPluginConfig) PluginName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginName"])
}

// Input properties used for looking up and filtering ConsumerPluginConfig resources.
type ConsumerPluginConfigState struct {
	ComputedConfig interface{}
	// JSON format of plugin config
	ConfigJson interface{}
	ConsumerId interface{}
	PluginName interface{}
}

// The set of arguments for constructing a ConsumerPluginConfig resource.
type ConsumerPluginConfigArgs struct {
	// JSON format of plugin config
	ConfigJson interface{}
	ConsumerId interface{}
	PluginName interface{}
}
