// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ConsumerPluginConfig struct {
	pulumi.CustomResourceState

	ComputedConfig pulumi.StringOutput `pulumi:"computedConfig"`
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	ConsumerId pulumi.StringOutput    `pulumi:"consumerId"`
	PluginName pulumi.StringOutput    `pulumi:"pluginName"`
}

// NewConsumerPluginConfig registers a new resource with the given unique name, arguments, and options.
func NewConsumerPluginConfig(ctx *pulumi.Context,
	name string, args *ConsumerPluginConfigArgs, opts ...pulumi.ResourceOption) (*ConsumerPluginConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.PluginName == nil {
		return nil, errors.New("invalid value for required argument 'PluginName'")
	}
	var resource ConsumerPluginConfig
	err := ctx.RegisterResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerPluginConfig gets an existing ConsumerPluginConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerPluginConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerPluginConfigState, opts ...pulumi.ResourceOption) (*ConsumerPluginConfig, error) {
	var resource ConsumerPluginConfig
	err := ctx.ReadResource("kong:index/consumerPluginConfig:ConsumerPluginConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerPluginConfig resources.
type consumerPluginConfigState struct {
	ComputedConfig *string `pulumi:"computedConfig"`
	// JSON format of plugin config
	ConfigJson *string `pulumi:"configJson"`
	ConsumerId *string `pulumi:"consumerId"`
	PluginName *string `pulumi:"pluginName"`
}

type ConsumerPluginConfigState struct {
	ComputedConfig pulumi.StringPtrInput
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrInput
	ConsumerId pulumi.StringPtrInput
	PluginName pulumi.StringPtrInput
}

func (ConsumerPluginConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerPluginConfigState)(nil)).Elem()
}

type consumerPluginConfigArgs struct {
	// JSON format of plugin config
	ConfigJson *string `pulumi:"configJson"`
	ConsumerId string  `pulumi:"consumerId"`
	PluginName string  `pulumi:"pluginName"`
}

// The set of arguments for constructing a ConsumerPluginConfig resource.
type ConsumerPluginConfigArgs struct {
	// JSON format of plugin config
	ConfigJson pulumi.StringPtrInput
	ConsumerId pulumi.StringInput
	PluginName pulumi.StringInput
}

func (ConsumerPluginConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerPluginConfigArgs)(nil)).Elem()
}

type ConsumerPluginConfigInput interface {
	pulumi.Input

	ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput
	ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput
}

func (*ConsumerPluginConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPluginConfig)(nil))
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput {
	return i.ToConsumerPluginConfigOutputWithContext(context.Background())
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigOutput)
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigPtrOutput() ConsumerPluginConfigPtrOutput {
	return i.ToConsumerPluginConfigPtrOutputWithContext(context.Background())
}

func (i *ConsumerPluginConfig) ToConsumerPluginConfigPtrOutputWithContext(ctx context.Context) ConsumerPluginConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigPtrOutput)
}

type ConsumerPluginConfigPtrInput interface {
	pulumi.Input

	ToConsumerPluginConfigPtrOutput() ConsumerPluginConfigPtrOutput
	ToConsumerPluginConfigPtrOutputWithContext(ctx context.Context) ConsumerPluginConfigPtrOutput
}

type consumerPluginConfigPtrType ConsumerPluginConfigArgs

func (*consumerPluginConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerPluginConfig)(nil))
}

func (i *consumerPluginConfigPtrType) ToConsumerPluginConfigPtrOutput() ConsumerPluginConfigPtrOutput {
	return i.ToConsumerPluginConfigPtrOutputWithContext(context.Background())
}

func (i *consumerPluginConfigPtrType) ToConsumerPluginConfigPtrOutputWithContext(ctx context.Context) ConsumerPluginConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigPtrOutput)
}

// ConsumerPluginConfigArrayInput is an input type that accepts ConsumerPluginConfigArray and ConsumerPluginConfigArrayOutput values.
// You can construct a concrete instance of `ConsumerPluginConfigArrayInput` via:
//
//          ConsumerPluginConfigArray{ ConsumerPluginConfigArgs{...} }
type ConsumerPluginConfigArrayInput interface {
	pulumi.Input

	ToConsumerPluginConfigArrayOutput() ConsumerPluginConfigArrayOutput
	ToConsumerPluginConfigArrayOutputWithContext(context.Context) ConsumerPluginConfigArrayOutput
}

type ConsumerPluginConfigArray []ConsumerPluginConfigInput

func (ConsumerPluginConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ConsumerPluginConfig)(nil))
}

func (i ConsumerPluginConfigArray) ToConsumerPluginConfigArrayOutput() ConsumerPluginConfigArrayOutput {
	return i.ToConsumerPluginConfigArrayOutputWithContext(context.Background())
}

func (i ConsumerPluginConfigArray) ToConsumerPluginConfigArrayOutputWithContext(ctx context.Context) ConsumerPluginConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigArrayOutput)
}

// ConsumerPluginConfigMapInput is an input type that accepts ConsumerPluginConfigMap and ConsumerPluginConfigMapOutput values.
// You can construct a concrete instance of `ConsumerPluginConfigMapInput` via:
//
//          ConsumerPluginConfigMap{ "key": ConsumerPluginConfigArgs{...} }
type ConsumerPluginConfigMapInput interface {
	pulumi.Input

	ToConsumerPluginConfigMapOutput() ConsumerPluginConfigMapOutput
	ToConsumerPluginConfigMapOutputWithContext(context.Context) ConsumerPluginConfigMapOutput
}

type ConsumerPluginConfigMap map[string]ConsumerPluginConfigInput

func (ConsumerPluginConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ConsumerPluginConfig)(nil))
}

func (i ConsumerPluginConfigMap) ToConsumerPluginConfigMapOutput() ConsumerPluginConfigMapOutput {
	return i.ToConsumerPluginConfigMapOutputWithContext(context.Background())
}

func (i ConsumerPluginConfigMap) ToConsumerPluginConfigMapOutputWithContext(ctx context.Context) ConsumerPluginConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPluginConfigMapOutput)
}

type ConsumerPluginConfigOutput struct {
	*pulumi.OutputState
}

func (ConsumerPluginConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPluginConfig)(nil))
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigOutput() ConsumerPluginConfigOutput {
	return o
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigOutputWithContext(ctx context.Context) ConsumerPluginConfigOutput {
	return o
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigPtrOutput() ConsumerPluginConfigPtrOutput {
	return o.ToConsumerPluginConfigPtrOutputWithContext(context.Background())
}

func (o ConsumerPluginConfigOutput) ToConsumerPluginConfigPtrOutputWithContext(ctx context.Context) ConsumerPluginConfigPtrOutput {
	return o.ApplyT(func(v ConsumerPluginConfig) *ConsumerPluginConfig {
		return &v
	}).(ConsumerPluginConfigPtrOutput)
}

type ConsumerPluginConfigPtrOutput struct {
	*pulumi.OutputState
}

func (ConsumerPluginConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerPluginConfig)(nil))
}

func (o ConsumerPluginConfigPtrOutput) ToConsumerPluginConfigPtrOutput() ConsumerPluginConfigPtrOutput {
	return o
}

func (o ConsumerPluginConfigPtrOutput) ToConsumerPluginConfigPtrOutputWithContext(ctx context.Context) ConsumerPluginConfigPtrOutput {
	return o
}

type ConsumerPluginConfigArrayOutput struct{ *pulumi.OutputState }

func (ConsumerPluginConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerPluginConfig)(nil))
}

func (o ConsumerPluginConfigArrayOutput) ToConsumerPluginConfigArrayOutput() ConsumerPluginConfigArrayOutput {
	return o
}

func (o ConsumerPluginConfigArrayOutput) ToConsumerPluginConfigArrayOutputWithContext(ctx context.Context) ConsumerPluginConfigArrayOutput {
	return o
}

func (o ConsumerPluginConfigArrayOutput) Index(i pulumi.IntInput) ConsumerPluginConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerPluginConfig {
		return vs[0].([]ConsumerPluginConfig)[vs[1].(int)]
	}).(ConsumerPluginConfigOutput)
}

type ConsumerPluginConfigMapOutput struct{ *pulumi.OutputState }

func (ConsumerPluginConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConsumerPluginConfig)(nil))
}

func (o ConsumerPluginConfigMapOutput) ToConsumerPluginConfigMapOutput() ConsumerPluginConfigMapOutput {
	return o
}

func (o ConsumerPluginConfigMapOutput) ToConsumerPluginConfigMapOutputWithContext(ctx context.Context) ConsumerPluginConfigMapOutput {
	return o
}

func (o ConsumerPluginConfigMapOutput) MapIndex(k pulumi.StringInput) ConsumerPluginConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConsumerPluginConfig {
		return vs[0].(map[string]ConsumerPluginConfig)[vs[1].(string)]
	}).(ConsumerPluginConfigOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsumerPluginConfigOutput{})
	pulumi.RegisterOutputType(ConsumerPluginConfigPtrOutput{})
	pulumi.RegisterOutputType(ConsumerPluginConfigArrayOutput{})
	pulumi.RegisterOutputType(ConsumerPluginConfigMapOutput{})
}
