// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Service
//
// The service resource maps directly onto the json for the service endpoint in Kong.  For more information on the parameters [see the Kong Service create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#service-object).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := kong.NewService(ctx, "service", &kong.ServiceArgs{
// 			ConnectTimeout: pulumi.Int(1000),
// 			Host:           pulumi.String("test.org"),
// 			Path:           pulumi.String("/mypath"),
// 			Port:           pulumi.Int(8080),
// 			Protocol:       pulumi.String("http"),
// 			ReadTimeout:    pulumi.Int(3000),
// 			Retries:        pulumi.Int(5),
// 			WriteTimeout:   pulumi.Int(2000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// To use a client certificate and ca certificates combine with certificate resource (note protocol must be `https`):
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		certificate, err := kong.NewCertificate(ctx, "certificate", &kong.CertificateArgs{
// 			Certificate: pulumi.String(fmt.Sprintf("%v%v%v", "    -----BEGIN CERTIFICATE-----\n", "    ......\n", "    -----END CERTIFICATE-----\n")),
// 			PrivateKey:  pulumi.String(fmt.Sprintf("%v%v%v", "    -----BEGIN PRIVATE KEY-----\n", "    .....\n", "    -----END PRIVATE KEY-----\n")),
// 			Snis: pulumi.StringArray{
// 				pulumi.String("foo.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ca, err := kong.NewCertificate(ctx, "ca", &kong.CertificateArgs{
// 			Certificate: pulumi.String(fmt.Sprintf("%v%v%v", "    -----BEGIN CERTIFICATE-----\n", "    ......\n", "    -----END CERTIFICATE-----\n")),
// 			PrivateKey:  pulumi.String(fmt.Sprintf("%v%v%v", "    -----BEGIN PRIVATE KEY-----\n", "    .....\n", "    -----END PRIVATE KEY-----\n")),
// 			Snis: pulumi.StringArray{
// 				pulumi.String("ca.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kong.NewService(ctx, "service", &kong.ServiceArgs{
// 			Protocol:            pulumi.String("https"),
// 			Host:                pulumi.String("test.org"),
// 			TlsVerify:           pulumi.Bool(true),
// 			TlsVerifyDepth:      pulumi.Int(2),
// 			ClientCertificateId: certificate.ID(),
// 			CaCertificateIds: pulumi.StringArray{
// 				ca.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// To import a service
//
// ```sh
//  $ pulumi import kong:index/service:Service <service_identifier> <service_id>
// ```
type Service struct {
	pulumi.CustomResourceState

	// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
	CaCertificateIds pulumi.StringArrayOutput `pulumi:"caCertificateIds"`
	// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `Certificate` resource
	ClientCertificateId pulumi.StringPtrOutput `pulumi:"clientCertificateId"`
	// Connection timeout. Default(ms): 60000
	ConnectTimeout pulumi.IntPtrOutput `pulumi:"connectTimeout"`
	// Host to map to
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Service name
	Name pulumi.StringOutput `pulumi:"name"`
	// Path to map to
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Port to map to. Default: 80
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Protocol to use
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Read timeout. Default(ms): 60000
	ReadTimeout pulumi.IntPtrOutput `pulumi:"readTimeout"`
	// Number of retries. Default: 5
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// A list of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
	TlsVerify pulumi.BoolPtrOutput `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server’s TLS certificate.
	TlsVerifyDepth pulumi.IntPtrOutput `pulumi:"tlsVerifyDepth"`
	// Write timout. Default(ms): 60000
	WriteTimeout pulumi.IntPtrOutput `pulumi:"writeTimeout"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	var resource Service
	err := ctx.RegisterResource("kong:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("kong:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `Certificate` resource
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// Connection timeout. Default(ms): 60000
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Host to map to
	Host *string `pulumi:"host"`
	// Service name
	Name *string `pulumi:"name"`
	// Path to map to
	Path *string `pulumi:"path"`
	// Port to map to. Default: 80
	Port *int `pulumi:"port"`
	// Protocol to use
	Protocol *string `pulumi:"protocol"`
	// Read timeout. Default(ms): 60000
	ReadTimeout *int `pulumi:"readTimeout"`
	// Number of retries. Default: 5
	Retries *int `pulumi:"retries"`
	// A list of strings associated with the Service for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
	TlsVerify *bool `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server’s TLS certificate.
	TlsVerifyDepth *int `pulumi:"tlsVerifyDepth"`
	// Write timout. Default(ms): 60000
	WriteTimeout *int `pulumi:"writeTimeout"`
}

type ServiceState struct {
	// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
	CaCertificateIds pulumi.StringArrayInput
	// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `Certificate` resource
	ClientCertificateId pulumi.StringPtrInput
	// Connection timeout. Default(ms): 60000
	ConnectTimeout pulumi.IntPtrInput
	// Host to map to
	Host pulumi.StringPtrInput
	// Service name
	Name pulumi.StringPtrInput
	// Path to map to
	Path pulumi.StringPtrInput
	// Port to map to. Default: 80
	Port pulumi.IntPtrInput
	// Protocol to use
	Protocol pulumi.StringPtrInput
	// Read timeout. Default(ms): 60000
	ReadTimeout pulumi.IntPtrInput
	// Number of retries. Default: 5
	Retries pulumi.IntPtrInput
	// A list of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
	TlsVerify pulumi.BoolPtrInput
	// Maximum depth of chain while verifying Upstream server’s TLS certificate.
	TlsVerifyDepth pulumi.IntPtrInput
	// Write timout. Default(ms): 60000
	WriteTimeout pulumi.IntPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `Certificate` resource
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// Connection timeout. Default(ms): 60000
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Host to map to
	Host *string `pulumi:"host"`
	// Service name
	Name *string `pulumi:"name"`
	// Path to map to
	Path *string `pulumi:"path"`
	// Port to map to. Default: 80
	Port *int `pulumi:"port"`
	// Protocol to use
	Protocol string `pulumi:"protocol"`
	// Read timeout. Default(ms): 60000
	ReadTimeout *int `pulumi:"readTimeout"`
	// Number of retries. Default: 5
	Retries *int `pulumi:"retries"`
	// A list of strings associated with the Service for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
	TlsVerify *bool `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server’s TLS certificate.
	TlsVerifyDepth *int `pulumi:"tlsVerifyDepth"`
	// Write timout. Default(ms): 60000
	WriteTimeout *int `pulumi:"writeTimeout"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
	CaCertificateIds pulumi.StringArrayInput
	// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `Certificate` resource
	ClientCertificateId pulumi.StringPtrInput
	// Connection timeout. Default(ms): 60000
	ConnectTimeout pulumi.IntPtrInput
	// Host to map to
	Host pulumi.StringPtrInput
	// Service name
	Name pulumi.StringPtrInput
	// Path to map to
	Path pulumi.StringPtrInput
	// Port to map to. Default: 80
	Port pulumi.IntPtrInput
	// Protocol to use
	Protocol pulumi.StringInput
	// Read timeout. Default(ms): 60000
	ReadTimeout pulumi.IntPtrInput
	// Number of retries. Default: 5
	Retries pulumi.IntPtrInput
	// A list of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
	TlsVerify pulumi.BoolPtrInput
	// Maximum depth of chain while verifying Upstream server’s TLS certificate.
	TlsVerifyDepth pulumi.IntPtrInput
	// Write timout. Default(ms): 60000
	WriteTimeout pulumi.IntPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//          ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//          ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
