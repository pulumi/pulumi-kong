// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Service struct {
	pulumi.CustomResourceState

	ConnectTimeout pulumi.IntPtrOutput    `pulumi:"connectTimeout"`
	Host           pulumi.StringPtrOutput `pulumi:"host"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Path           pulumi.StringPtrOutput `pulumi:"path"`
	Port           pulumi.IntPtrOutput    `pulumi:"port"`
	Protocol       pulumi.StringOutput    `pulumi:"protocol"`
	ReadTimeout    pulumi.IntPtrOutput    `pulumi:"readTimeout"`
	Retries        pulumi.IntPtrOutput    `pulumi:"retries"`
	WriteTimeout   pulumi.IntPtrOutput    `pulumi:"writeTimeout"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	var resource Service
	err := ctx.RegisterResource("kong:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("kong:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	ConnectTimeout *int    `pulumi:"connectTimeout"`
	Host           *string `pulumi:"host"`
	Name           *string `pulumi:"name"`
	Path           *string `pulumi:"path"`
	Port           *int    `pulumi:"port"`
	Protocol       *string `pulumi:"protocol"`
	ReadTimeout    *int    `pulumi:"readTimeout"`
	Retries        *int    `pulumi:"retries"`
	WriteTimeout   *int    `pulumi:"writeTimeout"`
}

type ServiceState struct {
	ConnectTimeout pulumi.IntPtrInput
	Host           pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Path           pulumi.StringPtrInput
	Port           pulumi.IntPtrInput
	Protocol       pulumi.StringPtrInput
	ReadTimeout    pulumi.IntPtrInput
	Retries        pulumi.IntPtrInput
	WriteTimeout   pulumi.IntPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	ConnectTimeout *int    `pulumi:"connectTimeout"`
	Host           *string `pulumi:"host"`
	Name           *string `pulumi:"name"`
	Path           *string `pulumi:"path"`
	Port           *int    `pulumi:"port"`
	Protocol       string  `pulumi:"protocol"`
	ReadTimeout    *int    `pulumi:"readTimeout"`
	Retries        *int    `pulumi:"retries"`
	WriteTimeout   *int    `pulumi:"writeTimeout"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	ConnectTimeout pulumi.IntPtrInput
	Host           pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Path           pulumi.StringPtrInput
	Port           pulumi.IntPtrInput
	Protocol       pulumi.StringInput
	ReadTimeout    pulumi.IntPtrInput
	Retries        pulumi.IntPtrInput
	WriteTimeout   pulumi.IntPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct {
	*pulumi.OutputState
}

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
}
