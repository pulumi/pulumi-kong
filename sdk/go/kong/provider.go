// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the kong package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// An basic auth password for kong admin
	KongAdminPassword pulumi.StringPtrOutput `pulumi:"kongAdminPassword"`
	// API key for the kong api (Enterprise Edition)
	KongAdminToken pulumi.StringPtrOutput `pulumi:"kongAdminToken"`
	// The address of the kong admin url e.g. http://localhost:8001
	KongAdminUri pulumi.StringOutput `pulumi:"kongAdminUri"`
	// An basic auth user for kong admin
	KongAdminUsername pulumi.StringPtrOutput `pulumi:"kongAdminUsername"`
	// API key for the kong api (if you have locked it down)
	KongApiKey pulumi.StringPtrOutput `pulumi:"kongApiKey"`
	// Workspace context (Enterprise Edition)
	KongWorkspace pulumi.StringPtrOutput `pulumi:"kongWorkspace"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KongAdminUri == nil {
		return nil, errors.New("invalid value for required argument 'KongAdminUri'")
	}
	if args.StrictPluginsMatch == nil {
		args.StrictPluginsMatch = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "STRICT_PLUGINS_MATCH").(bool))
	}
	if args.TlsSkipVerify == nil {
		args.TlsSkipVerify = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "TLS_SKIP_VERIFY").(bool))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:kong", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// An basic auth password for kong admin
	KongAdminPassword *string `pulumi:"kongAdminPassword"`
	// API key for the kong api (Enterprise Edition)
	KongAdminToken *string `pulumi:"kongAdminToken"`
	// The address of the kong admin url e.g. http://localhost:8001
	KongAdminUri string `pulumi:"kongAdminUri"`
	// An basic auth user for kong admin
	KongAdminUsername *string `pulumi:"kongAdminUsername"`
	// API key for the kong api (if you have locked it down)
	KongApiKey *string `pulumi:"kongApiKey"`
	// Workspace context (Enterprise Edition)
	KongWorkspace *string `pulumi:"kongWorkspace"`
	// Should plugins `config_json` field strictly match plugin configuration
	StrictPluginsMatch *bool `pulumi:"strictPluginsMatch"`
	// Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// An basic auth password for kong admin
	KongAdminPassword pulumi.StringPtrInput
	// API key for the kong api (Enterprise Edition)
	KongAdminToken pulumi.StringPtrInput
	// The address of the kong admin url e.g. http://localhost:8001
	KongAdminUri pulumi.StringInput
	// An basic auth user for kong admin
	KongAdminUsername pulumi.StringPtrInput
	// API key for the kong api (if you have locked it down)
	KongApiKey pulumi.StringPtrInput
	// Workspace context (Enterprise Edition)
	KongWorkspace pulumi.StringPtrInput
	// Should plugins `config_json` field strictly match plugin configuration
	StrictPluginsMatch pulumi.BoolPtrInput
	// Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
	TlsSkipVerify pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *Provider) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderPtrInput interface {
	pulumi.Input

	ToProviderPtrOutput() ProviderPtrOutput
	ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput
}

type providerPtrType ProviderArgs

func (*providerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (i *providerPtrType) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *providerPtrType) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o.ToProviderPtrOutputWithContext(context.Background())
}

func (o ProviderOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Provider) *Provider {
		return &v
	}).(ProviderPtrOutput)
}

type ProviderPtrOutput struct{ *pulumi.OutputState }

func (ProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (o ProviderPtrOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) Elem() ProviderOutput {
	return o.ApplyT(func(v *Provider) Provider {
		if v != nil {
			return *v
		}
		var ret Provider
		return ret
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPtrInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderPtrOutput{})
}
