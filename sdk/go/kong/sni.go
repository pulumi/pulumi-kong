// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Sni struct {
	s *pulumi.ResourceState
}

// NewSni registers a new resource with the given unique name, arguments, and options.
func NewSni(ctx *pulumi.Context,
	name string, args *SniArgs, opts ...pulumi.ResourceOpt) (*Sni, error) {
	if args == nil || args.CertificateId == nil {
		return nil, errors.New("missing required argument 'CertificateId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificateId"] = nil
		inputs["name"] = nil
	} else {
		inputs["certificateId"] = args.CertificateId
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("kong:index/sni:Sni", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Sni{s: s}, nil
}

// GetSni gets an existing Sni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSni(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SniState, opts ...pulumi.ResourceOpt) (*Sni, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificateId"] = state.CertificateId
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("kong:index/sni:Sni", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Sni{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Sni) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Sni) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Sni) CertificateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificateId"])
}

func (r *Sni) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Sni resources.
type SniState struct {
	CertificateId interface{}
	Name interface{}
}

// The set of arguments for constructing a Sni resource.
type SniArgs struct {
	CertificateId interface{}
	Name interface{}
}
