// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Sni struct {
	pulumi.CustomResourceState

	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	Name          pulumi.StringOutput `pulumi:"name"`
}

// NewSni registers a new resource with the given unique name, arguments, and options.
func NewSni(ctx *pulumi.Context,
	name string, args *SniArgs, opts ...pulumi.ResourceOption) (*Sni, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	var resource Sni
	err := ctx.RegisterResource("kong:index/sni:Sni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSni gets an existing Sni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SniState, opts ...pulumi.ResourceOption) (*Sni, error) {
	var resource Sni
	err := ctx.ReadResource("kong:index/sni:Sni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sni resources.
type sniState struct {
	CertificateId *string `pulumi:"certificateId"`
	Name          *string `pulumi:"name"`
}

type SniState struct {
	CertificateId pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
}

func (SniState) ElementType() reflect.Type {
	return reflect.TypeOf((*sniState)(nil)).Elem()
}

type sniArgs struct {
	CertificateId string  `pulumi:"certificateId"`
	Name          *string `pulumi:"name"`
}

// The set of arguments for constructing a Sni resource.
type SniArgs struct {
	CertificateId pulumi.StringInput
	Name          pulumi.StringPtrInput
}

func (SniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sniArgs)(nil)).Elem()
}

type SniInput interface {
	pulumi.Input

	ToSniOutput() SniOutput
	ToSniOutputWithContext(ctx context.Context) SniOutput
}

func (*Sni) ElementType() reflect.Type {
	return reflect.TypeOf((*Sni)(nil))
}

func (i *Sni) ToSniOutput() SniOutput {
	return i.ToSniOutputWithContext(context.Background())
}

func (i *Sni) ToSniOutputWithContext(ctx context.Context) SniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SniOutput)
}

type SniOutput struct {
	*pulumi.OutputState
}

func (SniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sni)(nil))
}

func (o SniOutput) ToSniOutput() SniOutput {
	return o
}

func (o SniOutput) ToSniOutputWithContext(ctx context.Context) SniOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SniOutput{})
}
