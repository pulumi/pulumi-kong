// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ConsumerAcl
//
// Consumer ACL is a resource that allows you to configure the acl plugin for a consumer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-kong/sdk/v4/go/kong"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myConsumer, err := kong.NewConsumer(ctx, "myConsumer", &kong.ConsumerArgs{
// 			CustomId: pulumi.String("123"),
// 			Username: pulumi.String("User1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kong.NewPlugin(ctx, "aclPlugin", &kong.PluginArgs{
// 			ConfigJson: pulumi.String(fmt.Sprintf("%v%v%v%v", "	{\n", "		\"allow\": [\"group1\", \"group2\"]\n", "	}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kong.NewConsumerAcl(ctx, "consumerAcl", &kong.ConsumerAclArgs{
// 			ConsumerId: myConsumer.ID(),
// 			Group:      pulumi.String("group2"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("myTag"),
// 				pulumi.String("otherTag"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConsumerAcl struct {
	pulumi.CustomResourceState

	// the id of the consumer to be configured
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// the acl group
	Group pulumi.StringOutput `pulumi:"group"`
	// A list of strings associated with the consumer acl for grouping and filtering
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConsumerAcl registers a new resource with the given unique name, arguments, and options.
func NewConsumerAcl(ctx *pulumi.Context,
	name string, args *ConsumerAclArgs, opts ...pulumi.ResourceOption) (*ConsumerAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	var resource ConsumerAcl
	err := ctx.RegisterResource("kong:index/consumerAcl:ConsumerAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerAcl gets an existing ConsumerAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerAclState, opts ...pulumi.ResourceOption) (*ConsumerAcl, error) {
	var resource ConsumerAcl
	err := ctx.ReadResource("kong:index/consumerAcl:ConsumerAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerAcl resources.
type consumerAclState struct {
	// the id of the consumer to be configured
	ConsumerId *string `pulumi:"consumerId"`
	// the acl group
	Group *string `pulumi:"group"`
	// A list of strings associated with the consumer acl for grouping and filtering
	Tags []string `pulumi:"tags"`
}

type ConsumerAclState struct {
	// the id of the consumer to be configured
	ConsumerId pulumi.StringPtrInput
	// the acl group
	Group pulumi.StringPtrInput
	// A list of strings associated with the consumer acl for grouping and filtering
	Tags pulumi.StringArrayInput
}

func (ConsumerAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerAclState)(nil)).Elem()
}

type consumerAclArgs struct {
	// the id of the consumer to be configured
	ConsumerId string `pulumi:"consumerId"`
	// the acl group
	Group string `pulumi:"group"`
	// A list of strings associated with the consumer acl for grouping and filtering
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConsumerAcl resource.
type ConsumerAclArgs struct {
	// the id of the consumer to be configured
	ConsumerId pulumi.StringInput
	// the acl group
	Group pulumi.StringInput
	// A list of strings associated with the consumer acl for grouping and filtering
	Tags pulumi.StringArrayInput
}

func (ConsumerAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerAclArgs)(nil)).Elem()
}

type ConsumerAclInput interface {
	pulumi.Input

	ToConsumerAclOutput() ConsumerAclOutput
	ToConsumerAclOutputWithContext(ctx context.Context) ConsumerAclOutput
}

func (*ConsumerAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerAcl)(nil)).Elem()
}

func (i *ConsumerAcl) ToConsumerAclOutput() ConsumerAclOutput {
	return i.ToConsumerAclOutputWithContext(context.Background())
}

func (i *ConsumerAcl) ToConsumerAclOutputWithContext(ctx context.Context) ConsumerAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerAclOutput)
}

// ConsumerAclArrayInput is an input type that accepts ConsumerAclArray and ConsumerAclArrayOutput values.
// You can construct a concrete instance of `ConsumerAclArrayInput` via:
//
//          ConsumerAclArray{ ConsumerAclArgs{...} }
type ConsumerAclArrayInput interface {
	pulumi.Input

	ToConsumerAclArrayOutput() ConsumerAclArrayOutput
	ToConsumerAclArrayOutputWithContext(context.Context) ConsumerAclArrayOutput
}

type ConsumerAclArray []ConsumerAclInput

func (ConsumerAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerAcl)(nil)).Elem()
}

func (i ConsumerAclArray) ToConsumerAclArrayOutput() ConsumerAclArrayOutput {
	return i.ToConsumerAclArrayOutputWithContext(context.Background())
}

func (i ConsumerAclArray) ToConsumerAclArrayOutputWithContext(ctx context.Context) ConsumerAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerAclArrayOutput)
}

// ConsumerAclMapInput is an input type that accepts ConsumerAclMap and ConsumerAclMapOutput values.
// You can construct a concrete instance of `ConsumerAclMapInput` via:
//
//          ConsumerAclMap{ "key": ConsumerAclArgs{...} }
type ConsumerAclMapInput interface {
	pulumi.Input

	ToConsumerAclMapOutput() ConsumerAclMapOutput
	ToConsumerAclMapOutputWithContext(context.Context) ConsumerAclMapOutput
}

type ConsumerAclMap map[string]ConsumerAclInput

func (ConsumerAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerAcl)(nil)).Elem()
}

func (i ConsumerAclMap) ToConsumerAclMapOutput() ConsumerAclMapOutput {
	return i.ToConsumerAclMapOutputWithContext(context.Background())
}

func (i ConsumerAclMap) ToConsumerAclMapOutputWithContext(ctx context.Context) ConsumerAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerAclMapOutput)
}

type ConsumerAclOutput struct{ *pulumi.OutputState }

func (ConsumerAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerAcl)(nil)).Elem()
}

func (o ConsumerAclOutput) ToConsumerAclOutput() ConsumerAclOutput {
	return o
}

func (o ConsumerAclOutput) ToConsumerAclOutputWithContext(ctx context.Context) ConsumerAclOutput {
	return o
}

type ConsumerAclArrayOutput struct{ *pulumi.OutputState }

func (ConsumerAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerAcl)(nil)).Elem()
}

func (o ConsumerAclArrayOutput) ToConsumerAclArrayOutput() ConsumerAclArrayOutput {
	return o
}

func (o ConsumerAclArrayOutput) ToConsumerAclArrayOutputWithContext(ctx context.Context) ConsumerAclArrayOutput {
	return o
}

func (o ConsumerAclArrayOutput) Index(i pulumi.IntInput) ConsumerAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerAcl {
		return vs[0].([]*ConsumerAcl)[vs[1].(int)]
	}).(ConsumerAclOutput)
}

type ConsumerAclMapOutput struct{ *pulumi.OutputState }

func (ConsumerAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerAcl)(nil)).Elem()
}

func (o ConsumerAclMapOutput) ToConsumerAclMapOutput() ConsumerAclMapOutput {
	return o
}

func (o ConsumerAclMapOutput) ToConsumerAclMapOutputWithContext(ctx context.Context) ConsumerAclMapOutput {
	return o
}

func (o ConsumerAclMapOutput) MapIndex(k pulumi.StringInput) ConsumerAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerAcl {
		return vs[0].(map[string]*ConsumerAcl)[vs[1].(string)]
	}).(ConsumerAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerAclInput)(nil)).Elem(), &ConsumerAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerAclArrayInput)(nil)).Elem(), ConsumerAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerAclMapInput)(nil)).Elem(), ConsumerAclMap{})
	pulumi.RegisterOutputType(ConsumerAclOutput{})
	pulumi.RegisterOutputType(ConsumerAclArrayOutput{})
	pulumi.RegisterOutputType(ConsumerAclMapOutput{})
}
