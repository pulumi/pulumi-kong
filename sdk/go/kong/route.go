// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	Destinations  RouteDestinationArrayOutput `pulumi:"destinations"`
	Hosts         pulumi.StringArrayOutput    `pulumi:"hosts"`
	Methods       pulumi.StringArrayOutput    `pulumi:"methods"`
	Name          pulumi.StringOutput         `pulumi:"name"`
	Paths         pulumi.StringArrayOutput    `pulumi:"paths"`
	PreserveHost  pulumi.BoolPtrOutput        `pulumi:"preserveHost"`
	Protocols     pulumi.StringArrayOutput    `pulumi:"protocols"`
	RegexPriority pulumi.IntPtrOutput         `pulumi:"regexPriority"`
	ServiceId     pulumi.StringOutput         `pulumi:"serviceId"`
	Snis          pulumi.StringArrayOutput    `pulumi:"snis"`
	Sources       RouteSourceArrayOutput      `pulumi:"sources"`
	StripPath     pulumi.BoolPtrOutput        `pulumi:"stripPath"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource Route
	err := ctx.RegisterResource("kong:index/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("kong:index/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	Destinations  []RouteDestination `pulumi:"destinations"`
	Hosts         []string           `pulumi:"hosts"`
	Methods       []string           `pulumi:"methods"`
	Name          *string            `pulumi:"name"`
	Paths         []string           `pulumi:"paths"`
	PreserveHost  *bool              `pulumi:"preserveHost"`
	Protocols     []string           `pulumi:"protocols"`
	RegexPriority *int               `pulumi:"regexPriority"`
	ServiceId     *string            `pulumi:"serviceId"`
	Snis          []string           `pulumi:"snis"`
	Sources       []RouteSource      `pulumi:"sources"`
	StripPath     *bool              `pulumi:"stripPath"`
}

type RouteState struct {
	Destinations  RouteDestinationArrayInput
	Hosts         pulumi.StringArrayInput
	Methods       pulumi.StringArrayInput
	Name          pulumi.StringPtrInput
	Paths         pulumi.StringArrayInput
	PreserveHost  pulumi.BoolPtrInput
	Protocols     pulumi.StringArrayInput
	RegexPriority pulumi.IntPtrInput
	ServiceId     pulumi.StringPtrInput
	Snis          pulumi.StringArrayInput
	Sources       RouteSourceArrayInput
	StripPath     pulumi.BoolPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	Destinations  []RouteDestination `pulumi:"destinations"`
	Hosts         []string           `pulumi:"hosts"`
	Methods       []string           `pulumi:"methods"`
	Name          *string            `pulumi:"name"`
	Paths         []string           `pulumi:"paths"`
	PreserveHost  *bool              `pulumi:"preserveHost"`
	Protocols     []string           `pulumi:"protocols"`
	RegexPriority *int               `pulumi:"regexPriority"`
	ServiceId     string             `pulumi:"serviceId"`
	Snis          []string           `pulumi:"snis"`
	Sources       []RouteSource      `pulumi:"sources"`
	StripPath     *bool              `pulumi:"stripPath"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	Destinations  RouteDestinationArrayInput
	Hosts         pulumi.StringArrayInput
	Methods       pulumi.StringArrayInput
	Name          pulumi.StringPtrInput
	Paths         pulumi.StringArrayInput
	PreserveHost  pulumi.BoolPtrInput
	Protocols     pulumi.StringArrayInput
	RegexPriority pulumi.IntPtrInput
	ServiceId     pulumi.StringInput
	Snis          pulumi.StringArrayInput
	Sources       RouteSourceArrayInput
	StripPath     pulumi.BoolPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (Route) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

type RouteOutput struct {
	*pulumi.OutputState
}

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteOutput)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RouteOutput{})
}
