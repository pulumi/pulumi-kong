// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kong

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Plugin struct {
	pulumi.CustomResourceState

	ComputedConfig pulumi.StringOutput `pulumi:"computedConfig"`
	// plugin configuration in JSON format, configuration must be a valid JSON object.
	ConfigJson  pulumi.StringPtrOutput `pulumi:"configJson"`
	ConsumerId  pulumi.StringPtrOutput `pulumi:"consumerId"`
	Enabled     pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	RouteId     pulumi.StringPtrOutput `pulumi:"routeId"`
	ServiceId   pulumi.StringPtrOutput `pulumi:"serviceId"`
	StrictMatch pulumi.BoolPtrOutput   `pulumi:"strictMatch"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		args = &PluginArgs{}
	}
	var resource Plugin
	err := ctx.RegisterResource("kong:index/plugin:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("kong:index/plugin:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
	ComputedConfig *string `pulumi:"computedConfig"`
	// plugin configuration in JSON format, configuration must be a valid JSON object.
	ConfigJson  *string `pulumi:"configJson"`
	ConsumerId  *string `pulumi:"consumerId"`
	Enabled     *bool   `pulumi:"enabled"`
	Name        *string `pulumi:"name"`
	RouteId     *string `pulumi:"routeId"`
	ServiceId   *string `pulumi:"serviceId"`
	StrictMatch *bool   `pulumi:"strictMatch"`
}

type PluginState struct {
	ComputedConfig pulumi.StringPtrInput
	// plugin configuration in JSON format, configuration must be a valid JSON object.
	ConfigJson  pulumi.StringPtrInput
	ConsumerId  pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	RouteId     pulumi.StringPtrInput
	ServiceId   pulumi.StringPtrInput
	StrictMatch pulumi.BoolPtrInput
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// plugin configuration in JSON format, configuration must be a valid JSON object.
	ConfigJson  *string `pulumi:"configJson"`
	ConsumerId  *string `pulumi:"consumerId"`
	Enabled     *bool   `pulumi:"enabled"`
	Name        *string `pulumi:"name"`
	RouteId     *string `pulumi:"routeId"`
	ServiceId   *string `pulumi:"serviceId"`
	StrictMatch *bool   `pulumi:"strictMatch"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// plugin configuration in JSON format, configuration must be a valid JSON object.
	ConfigJson  pulumi.StringPtrInput
	ConsumerId  pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	RouteId     pulumi.StringPtrInput
	ServiceId   pulumi.StringPtrInput
	StrictMatch pulumi.BoolPtrInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}
