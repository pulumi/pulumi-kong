// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    public readonly destinations!: pulumi.Output<outputs.RouteDestination[] | undefined>;
    public readonly hosts!: pulumi.Output<string[] | undefined>;
    public readonly methods!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly paths!: pulumi.Output<string[] | undefined>;
    public readonly preserveHost!: pulumi.Output<boolean | undefined>;
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly regexPriority!: pulumi.Output<number | undefined>;
    public readonly serviceId!: pulumi.Output<string>;
    public readonly snis!: pulumi.Output<string[] | undefined>;
    public readonly sources!: pulumi.Output<outputs.RouteSource[] | undefined>;
    public readonly stripPath!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RouteState | undefined;
            inputs["destinations"] = state ? state.destinations : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["methods"] = state ? state.methods : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["paths"] = state ? state.paths : undefined;
            inputs["preserveHost"] = state ? state.preserveHost : undefined;
            inputs["protocols"] = state ? state.protocols : undefined;
            inputs["regexPriority"] = state ? state.regexPriority : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
            inputs["snis"] = state ? state.snis : undefined;
            inputs["sources"] = state ? state.sources : undefined;
            inputs["stripPath"] = state ? state.stripPath : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.protocols === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'protocols'");
            }
            if ((!args || args.serviceId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'serviceId'");
            }
            inputs["destinations"] = args ? args.destinations : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["methods"] = args ? args.methods : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["paths"] = args ? args.paths : undefined;
            inputs["preserveHost"] = args ? args.preserveHost : undefined;
            inputs["protocols"] = args ? args.protocols : undefined;
            inputs["regexPriority"] = args ? args.regexPriority : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
            inputs["snis"] = args ? args.snis : undefined;
            inputs["sources"] = args ? args.sources : undefined;
            inputs["stripPath"] = args ? args.stripPath : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Route.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    readonly destinations?: pulumi.Input<pulumi.Input<inputs.RouteDestination>[]>;
    readonly hosts?: pulumi.Input<pulumi.Input<string>[]>;
    readonly methods?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly paths?: pulumi.Input<pulumi.Input<string>[]>;
    readonly preserveHost?: pulumi.Input<boolean>;
    readonly protocols?: pulumi.Input<pulumi.Input<string>[]>;
    readonly regexPriority?: pulumi.Input<number>;
    readonly serviceId?: pulumi.Input<string>;
    readonly snis?: pulumi.Input<pulumi.Input<string>[]>;
    readonly sources?: pulumi.Input<pulumi.Input<inputs.RouteSource>[]>;
    readonly stripPath?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    readonly destinations?: pulumi.Input<pulumi.Input<inputs.RouteDestination>[]>;
    readonly hosts?: pulumi.Input<pulumi.Input<string>[]>;
    readonly methods?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly paths?: pulumi.Input<pulumi.Input<string>[]>;
    readonly preserveHost?: pulumi.Input<boolean>;
    readonly protocols: pulumi.Input<pulumi.Input<string>[]>;
    readonly regexPriority?: pulumi.Input<number>;
    readonly serviceId: pulumi.Input<string>;
    readonly snis?: pulumi.Input<pulumi.Input<string>[]>;
    readonly sources?: pulumi.Input<pulumi.Input<inputs.RouteSource>[]>;
    readonly stripPath?: pulumi.Input<boolean>;
}
