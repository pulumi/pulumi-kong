// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # kong.ConsumerJwtAuth
 *
 * Consumer jwt auth is a resource that allows you to configure the jwt auth plugin for a consumer.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const myConsumer = new kong.Consumer("my_consumer", {
 *     username: "User1",
 *     customId: "123",
 * });
 * const jwtPlugin = new kong.Plugin("jwt_plugin", {
 *     name: "jwt",
 *     configJson: `\x09{
 * \x09\x09"claims_to_verify": ["exp"]
 * \x09}
 * `,
 * });
 * const consumerJwtConfig = new kong.ConsumerJwtAuth("consumer_jwt_config", {
 *     consumerId: myConsumer.id,
 *     algorithm: "HS256",
 *     key: "my_key",
 *     rsaPublicKey: "foo",
 *     secret: "my_secret",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class ConsumerJwtAuth extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerJwtAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerJwtAuthState, opts?: pulumi.CustomResourceOptions): ConsumerJwtAuth {
        return new ConsumerJwtAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/consumerJwtAuth:ConsumerJwtAuth';

    /**
     * Returns true if the given object is an instance of ConsumerJwtAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerJwtAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerJwtAuth.__pulumiType;
    }

    /**
     * The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * the id of the consumer to be configured with jwt auth
     */
    public readonly consumerId!: pulumi.Output<string>;
    /**
     * A unique string identifying the credential. If left out, it will be auto-generated.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
     */
    public readonly rsaPublicKey!: pulumi.Output<string>;
    /**
     * If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
     */
    public readonly secret!: pulumi.Output<string | undefined>;
    /**
     * A list of strings associated with the consumer JWT auth for grouping and filtering
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConsumerJwtAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerJwtAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerJwtAuthArgs | ConsumerJwtAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerJwtAuthState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["consumerId"] = state ? state.consumerId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["rsaPublicKey"] = state ? state.rsaPublicKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConsumerJwtAuthArgs | undefined;
            if ((!args || args.consumerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            if ((!args || args.rsaPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rsaPublicKey'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["consumerId"] = args ? args.consumerId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["rsaPublicKey"] = args ? args.rsaPublicKey : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerJwtAuth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerJwtAuth resources.
 */
export interface ConsumerJwtAuthState {
    /**
     * The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * the id of the consumer to be configured with jwt auth
     */
    consumerId?: pulumi.Input<string>;
    /**
     * A unique string identifying the credential. If left out, it will be auto-generated.
     */
    key?: pulumi.Input<string>;
    /**
     * If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
     */
    secret?: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer JWT auth for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConsumerJwtAuth resource.
 */
export interface ConsumerJwtAuthArgs {
    /**
     * The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * the id of the consumer to be configured with jwt auth
     */
    consumerId: pulumi.Input<string>;
    /**
     * A unique string identifying the credential. If left out, it will be auto-generated.
     */
    key?: pulumi.Input<string>;
    /**
     * If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
     */
    rsaPublicKey: pulumi.Input<string>;
    /**
     * If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
     */
    secret?: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer JWT auth for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
