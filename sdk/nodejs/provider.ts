// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the kong package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'kong';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }


    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.kongAdminUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kongAdminUri'");
            }
            inputs["kongAdminPassword"] = args ? args.kongAdminPassword : undefined;
            inputs["kongAdminToken"] = args ? args.kongAdminToken : undefined;
            inputs["kongAdminUri"] = args ? args.kongAdminUri : undefined;
            inputs["kongAdminUsername"] = args ? args.kongAdminUsername : undefined;
            inputs["kongApiKey"] = args ? args.kongApiKey : undefined;
            inputs["strictPluginsMatch"] = pulumi.output((args ? args.strictPluginsMatch : undefined) ?? <any>utilities.getEnvBoolean("STRICT_PLUGINS_MATCH")).apply(JSON.stringify);
            inputs["tlsSkipVerify"] = pulumi.output((args ? args.tlsSkipVerify : undefined) ?? (<any>utilities.getEnvBoolean("TLS_SKIP_VERIFY") || false)).apply(JSON.stringify);
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * An basic auth password for kong admin
     */
    readonly kongAdminPassword?: pulumi.Input<string>;
    /**
     * API key for the kong api (Enterprise Edition)
     */
    readonly kongAdminToken?: pulumi.Input<string>;
    /**
     * The address of the kong admin url e.g. http://localhost:8001
     */
    readonly kongAdminUri: pulumi.Input<string>;
    /**
     * An basic auth user for kong admin
     */
    readonly kongAdminUsername?: pulumi.Input<string>;
    /**
     * API key for the kong api (if you have locked it down)
     */
    readonly kongApiKey?: pulumi.Input<string>;
    /**
     * Should plugins `config_json` field strictly match plugin configuration
     */
    readonly strictPluginsMatch?: pulumi.Input<boolean>;
    /**
     * Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
     */
    readonly tlsSkipVerify?: pulumi.Input<boolean>;
}
