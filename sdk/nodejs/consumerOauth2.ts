// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # kong.ConsumerOauth2
 *
 * Resource that allows you to configure the OAuth2 plugin credentials for a consumer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const myConsumer = new kong.Consumer("my_consumer", {
 *     username: "User1",
 *     customId: "123",
 * });
 * const oauth2Plugin = new kong.Plugin("oauth2_plugin", {
 *     name: "oauth2",
 *     configJson: `\x09{
 * \x09\x09"global_credentials": true,
 * \x09\x09"enable_password_grant": true,
 * \x09\x09"token_expiration": 180,
 * \x09\x09"refresh_token_ttl": 180,
 * \x09\x09"provision_key": "testprovisionkey"
 * \x09}
 * `,
 * });
 * const consumerOauth2 = new kong.ConsumerOauth2("consumer_oauth2", {
 *     name: "test_application",
 *     consumerId: myConsumer.id,
 *     clientId: "client_id",
 *     clientSecret: "client_secret",
 *     redirectUris: [
 *         "https://asdf.com/callback",
 *         "https://test.cl/callback",
 *     ],
 *     tags: ["myTag"],
 * });
 * ```
 */
export class ConsumerOauth2 extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerOauth2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerOauth2State, opts?: pulumi.CustomResourceOptions): ConsumerOauth2 {
        return new ConsumerOauth2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/consumerOauth2:ConsumerOauth2';

    /**
     * Returns true if the given object is an instance of ConsumerOauth2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerOauth2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerOauth2.__pulumiType;
    }

    /**
     * Unique oauth2 client id. If not set, the oauth2 plugin will generate one
     */
    declare public readonly clientId: pulumi.Output<string | undefined>;
    /**
     * Unique oauth2 client secret. If not set, the oauth2 plugin will generate one
     */
    declare public readonly clientSecret: pulumi.Output<string | undefined>;
    /**
     * The id of the consumer to be configured with oauth2.
     */
    declare public readonly consumerId: pulumi.Output<string>;
    /**
     * A boolean flag that indicates whether the clientSecret field will be stored in hashed form. If enabled on existing plugin instances, client secrets are hashed on the fly upon first usage. Default: `false`.
     */
    declare public readonly hashSecret: pulumi.Output<boolean | undefined>;
    /**
     * The name associated with the credential.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An array with one or more URLs in your app where users will be sent after authorization ([RFC 6742 Section 3.1.2](https://tools.ietf.org/html/rfc6749#section-3.1.2)).
     */
    declare public readonly redirectUris: pulumi.Output<string[]>;
    /**
     * A list of strings associated with the consumer for grouping and filtering.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConsumerOauth2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerOauth2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerOauth2Args | ConsumerOauth2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerOauth2State | undefined;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["consumerId"] = state?.consumerId;
            resourceInputs["hashSecret"] = state?.hashSecret;
            resourceInputs["name"] = state?.name;
            resourceInputs["redirectUris"] = state?.redirectUris;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ConsumerOauth2Args | undefined;
            if (args?.consumerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            if (args?.redirectUris === undefined && !opts.urn) {
                throw new Error("Missing required property 'redirectUris'");
            }
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret;
            resourceInputs["consumerId"] = args?.consumerId;
            resourceInputs["hashSecret"] = args?.hashSecret;
            resourceInputs["name"] = args?.name;
            resourceInputs["redirectUris"] = args?.redirectUris;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerOauth2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerOauth2 resources.
 */
export interface ConsumerOauth2State {
    /**
     * Unique oauth2 client id. If not set, the oauth2 plugin will generate one
     */
    clientId?: pulumi.Input<string>;
    /**
     * Unique oauth2 client secret. If not set, the oauth2 plugin will generate one
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The id of the consumer to be configured with oauth2.
     */
    consumerId?: pulumi.Input<string>;
    /**
     * A boolean flag that indicates whether the clientSecret field will be stored in hashed form. If enabled on existing plugin instances, client secrets are hashed on the fly upon first usage. Default: `false`.
     */
    hashSecret?: pulumi.Input<boolean>;
    /**
     * The name associated with the credential.
     */
    name?: pulumi.Input<string>;
    /**
     * An array with one or more URLs in your app where users will be sent after authorization ([RFC 6742 Section 3.1.2](https://tools.ietf.org/html/rfc6749#section-3.1.2)).
     */
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of strings associated with the consumer for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConsumerOauth2 resource.
 */
export interface ConsumerOauth2Args {
    /**
     * Unique oauth2 client id. If not set, the oauth2 plugin will generate one
     */
    clientId?: pulumi.Input<string>;
    /**
     * Unique oauth2 client secret. If not set, the oauth2 plugin will generate one
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The id of the consumer to be configured with oauth2.
     */
    consumerId: pulumi.Input<string>;
    /**
     * A boolean flag that indicates whether the clientSecret field will be stored in hashed form. If enabled on existing plugin instances, client secrets are hashed on the fly upon first usage. Default: `false`.
     */
    hashSecret?: pulumi.Input<boolean>;
    /**
     * The name associated with the credential.
     */
    name?: pulumi.Input<string>;
    /**
     * An array with one or more URLs in your app where users will be sent after authorization ([RFC 6742 Section 3.1.2](https://tools.ietf.org/html/rfc6749#section-3.1.2)).
     */
    redirectUris: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of strings associated with the consumer for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
