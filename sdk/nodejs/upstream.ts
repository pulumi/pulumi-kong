// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const certificate = new kong.Certificate("certificate", {
 *     certificate: `    -----BEGIN CERTIFICATE-----
 *     ......
 *     -----END CERTIFICATE-----
 * `,
 *     privateKey: `    -----BEGIN PRIVATE KEY-----
 *     .....
 *     -----END PRIVATE KEY-----
 * `,
 *     snis: ["foo.com"],
 * });
 * const upstream = new kong.Upstream("upstream", {
 *     slots: 10,
 *     hashOn: "header",
 *     hashFallback: "cookie",
 *     hashOnHeader: "HeaderName",
 *     hashFallbackHeader: "FallbackHeaderName",
 *     hashOnCookie: "CookieName",
 *     hashOnCookiePath: "/path",
 *     hostHeader: "x-host",
 *     tags: [
 *         "a",
 *         "b",
 *     ],
 *     clientCertificateId: certificate.id,
 *     healthchecks: {
 *         active: {
 *             type: "https",
 *             httpPath: "/status",
 *             timeout: 10,
 *             concurrency: 20,
 *             httpsVerifyCertificate: false,
 *             httpsSni: "some.domain.com",
 *             healthy: {
 *                 successes: 1,
 *                 interval: 5,
 *                 httpStatuses: [
 *                     200,
 *                     201,
 *                 ],
 *             },
 *             unhealthy: {
 *                 timeouts: 7,
 *                 interval: 3,
 *                 tcpFailures: 1,
 *                 httpFailures: 2,
 *                 httpStatuses: [
 *                     500,
 *                     501,
 *                 ],
 *             },
 *         },
 *         passive: {
 *             type: "https",
 *             healthy: {
 *                 successes: 1,
 *                 httpStatuses: [
 *                     200,
 *                     201,
 *                     202,
 *                 ],
 *             },
 *             unhealthy: {
 *                 timeouts: 3,
 *                 tcpFailures: 5,
 *                 httpFailures: 6,
 *                 httpStatuses: [
 *                     500,
 *                     501,
 *                     502,
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * To import an upstream
 *
 * ```sh
 *  $ pulumi import kong:index/upstream:Upstream <upstream_identifier> <upstream_id>
 * ```
 */
export class Upstream extends pulumi.CustomResource {
    /**
     * Get an existing Upstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpstreamState, opts?: pulumi.CustomResourceOptions): Upstream {
        return new Upstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/upstream:Upstream';

    /**
     * Returns true if the given object is an instance of Upstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upstream.__pulumiType;
    }

    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     */
    public readonly clientCertificateId!: pulumi.Output<string | undefined>;
    /**
     * is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
     */
    public readonly hashFallback!: pulumi.Output<string | undefined>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
     */
    public readonly hashFallbackHeader!: pulumi.Output<string | undefined>;
    /**
     * is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     */
    public readonly hashOn!: pulumi.Output<string | undefined>;
    /**
     * is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     */
    public readonly hashOnCookie!: pulumi.Output<string | undefined>;
    /**
     * is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
     * * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
     * * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
     * * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
     * * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
     * * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
     * * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
     * * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
     */
    public readonly hashOnCookiePath!: pulumi.Output<string | undefined>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
     */
    public readonly hashOnHeader!: pulumi.Output<string | undefined>;
    public readonly healthchecks!: pulumi.Output<outputs.UpstreamHealthchecks>;
    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     */
    public readonly hostHeader!: pulumi.Output<string | undefined>;
    /**
     * is a hostname, which must be equal to the host of a Service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     */
    public readonly slots!: pulumi.Output<number | undefined>;
    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Upstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpstreamArgs | UpstreamState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpstreamState | undefined;
            inputs["clientCertificateId"] = state ? state.clientCertificateId : undefined;
            inputs["hashFallback"] = state ? state.hashFallback : undefined;
            inputs["hashFallbackHeader"] = state ? state.hashFallbackHeader : undefined;
            inputs["hashOn"] = state ? state.hashOn : undefined;
            inputs["hashOnCookie"] = state ? state.hashOnCookie : undefined;
            inputs["hashOnCookiePath"] = state ? state.hashOnCookiePath : undefined;
            inputs["hashOnHeader"] = state ? state.hashOnHeader : undefined;
            inputs["healthchecks"] = state ? state.healthchecks : undefined;
            inputs["hostHeader"] = state ? state.hostHeader : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["slots"] = state ? state.slots : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as UpstreamArgs | undefined;
            inputs["clientCertificateId"] = args ? args.clientCertificateId : undefined;
            inputs["hashFallback"] = args ? args.hashFallback : undefined;
            inputs["hashFallbackHeader"] = args ? args.hashFallbackHeader : undefined;
            inputs["hashOn"] = args ? args.hashOn : undefined;
            inputs["hashOnCookie"] = args ? args.hashOnCookie : undefined;
            inputs["hashOnCookiePath"] = args ? args.hashOnCookiePath : undefined;
            inputs["hashOnHeader"] = args ? args.hashOnHeader : undefined;
            inputs["healthchecks"] = args ? args.healthchecks : undefined;
            inputs["hostHeader"] = args ? args.hostHeader : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["slots"] = args ? args.slots : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Upstream.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Upstream resources.
 */
export interface UpstreamState {
    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     */
    readonly clientCertificateId?: pulumi.Input<string>;
    /**
     * is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
     */
    readonly hashFallback?: pulumi.Input<string>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
     */
    readonly hashFallbackHeader?: pulumi.Input<string>;
    /**
     * is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     */
    readonly hashOn?: pulumi.Input<string>;
    /**
     * is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     */
    readonly hashOnCookie?: pulumi.Input<string>;
    /**
     * is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
     * * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
     * * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
     * * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
     * * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
     * * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
     * * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
     * * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
     */
    readonly hashOnCookiePath?: pulumi.Input<string>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
     */
    readonly hashOnHeader?: pulumi.Input<string>;
    readonly healthchecks?: pulumi.Input<inputs.UpstreamHealthchecks>;
    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     */
    readonly hostHeader?: pulumi.Input<string>;
    /**
     * is a hostname, which must be equal to the host of a Service.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     */
    readonly slots?: pulumi.Input<number>;
    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Upstream resource.
 */
export interface UpstreamArgs {
    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     */
    readonly clientCertificateId?: pulumi.Input<string>;
    /**
     * is a hashing input type if the primary `hashOn` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hashOn` is set to `cookie`. Defaults to `none`.
     */
    readonly hashFallback?: pulumi.Input<string>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashFallback` is set to `header`. Default `nil`.
     */
    readonly hashFallbackHeader?: pulumi.Input<string>;
    /**
     * is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     */
    readonly hashOn?: pulumi.Input<string>;
    /**
     * is a cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     */
    readonly hashOnCookie?: pulumi.Input<string>;
    /**
     * is a cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`. Defaults to `/`.
     * * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
     * * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
     * * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
     * * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
     * * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
     * * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
     * * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
     */
    readonly hashOnCookiePath?: pulumi.Input<string>;
    /**
     * is a header name to take the value from as hash input. Only required when `hashOn` is set to `header`. Default `nil`.
     */
    readonly hashOnHeader?: pulumi.Input<string>;
    readonly healthchecks?: pulumi.Input<inputs.UpstreamHealthchecks>;
    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     */
    readonly hostHeader?: pulumi.Input<string>;
    /**
     * is a hostname, which must be equal to the host of a Service.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     */
    readonly slots?: pulumi.Input<number>;
    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
