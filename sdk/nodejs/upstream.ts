// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Upstream extends pulumi.CustomResource {
    /**
     * Get an existing Upstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpstreamState, opts?: pulumi.CustomResourceOptions): Upstream {
        return new Upstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/upstream:Upstream';

    /**
     * Returns true if the given object is an instance of Upstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upstream.__pulumiType;
    }

    public readonly hashFallback!: pulumi.Output<string | undefined>;
    public readonly hashFallbackHeader!: pulumi.Output<string | undefined>;
    public readonly hashOn!: pulumi.Output<string | undefined>;
    public readonly hashOnCookie!: pulumi.Output<string | undefined>;
    public readonly hashOnCookiePath!: pulumi.Output<string | undefined>;
    public readonly hashOnHeader!: pulumi.Output<string | undefined>;
    public readonly healthchecks!: pulumi.Output<outputs.UpstreamHealthchecks>;
    public readonly name!: pulumi.Output<string>;
    public readonly slots!: pulumi.Output<number | undefined>;

    /**
     * Create a Upstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpstreamArgs | UpstreamState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as UpstreamState | undefined;
            inputs["hashFallback"] = state ? state.hashFallback : undefined;
            inputs["hashFallbackHeader"] = state ? state.hashFallbackHeader : undefined;
            inputs["hashOn"] = state ? state.hashOn : undefined;
            inputs["hashOnCookie"] = state ? state.hashOnCookie : undefined;
            inputs["hashOnCookiePath"] = state ? state.hashOnCookiePath : undefined;
            inputs["hashOnHeader"] = state ? state.hashOnHeader : undefined;
            inputs["healthchecks"] = state ? state.healthchecks : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["slots"] = state ? state.slots : undefined;
        } else {
            const args = argsOrState as UpstreamArgs | undefined;
            inputs["hashFallback"] = args ? args.hashFallback : undefined;
            inputs["hashFallbackHeader"] = args ? args.hashFallbackHeader : undefined;
            inputs["hashOn"] = args ? args.hashOn : undefined;
            inputs["hashOnCookie"] = args ? args.hashOnCookie : undefined;
            inputs["hashOnCookiePath"] = args ? args.hashOnCookiePath : undefined;
            inputs["hashOnHeader"] = args ? args.hashOnHeader : undefined;
            inputs["healthchecks"] = args ? args.healthchecks : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["slots"] = args ? args.slots : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Upstream.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Upstream resources.
 */
export interface UpstreamState {
    readonly hashFallback?: pulumi.Input<string>;
    readonly hashFallbackHeader?: pulumi.Input<string>;
    readonly hashOn?: pulumi.Input<string>;
    readonly hashOnCookie?: pulumi.Input<string>;
    readonly hashOnCookiePath?: pulumi.Input<string>;
    readonly hashOnHeader?: pulumi.Input<string>;
    readonly healthchecks?: pulumi.Input<inputs.UpstreamHealthchecks>;
    readonly name?: pulumi.Input<string>;
    readonly slots?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Upstream resource.
 */
export interface UpstreamArgs {
    readonly hashFallback?: pulumi.Input<string>;
    readonly hashFallbackHeader?: pulumi.Input<string>;
    readonly hashOn?: pulumi.Input<string>;
    readonly hashOnCookie?: pulumi.Input<string>;
    readonly hashOnCookiePath?: pulumi.Input<string>;
    readonly hashOnHeader?: pulumi.Input<string>;
    readonly healthchecks?: pulumi.Input<inputs.UpstreamHealthchecks>;
    readonly name?: pulumi.Input<string>;
    readonly slots?: pulumi.Input<number>;
}
