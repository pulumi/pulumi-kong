// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConsumerPluginConfig extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerPluginConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerPluginConfigState, opts?: pulumi.CustomResourceOptions): ConsumerPluginConfig {
        return new ConsumerPluginConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/consumerPluginConfig:ConsumerPluginConfig';

    /**
     * Returns true if the given object is an instance of ConsumerPluginConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerPluginConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerPluginConfig.__pulumiType;
    }

    public /*out*/ readonly computedConfig!: pulumi.Output<string>;
    /**
     * JSON format of plugin config
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    public readonly consumerId!: pulumi.Output<string>;
    public readonly pluginName!: pulumi.Output<string>;

    /**
     * Create a ConsumerPluginConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerPluginConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerPluginConfigArgs | ConsumerPluginConfigState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ConsumerPluginConfigState | undefined;
            inputs["computedConfig"] = state ? state.computedConfig : undefined;
            inputs["configJson"] = state ? state.configJson : undefined;
            inputs["consumerId"] = state ? state.consumerId : undefined;
            inputs["pluginName"] = state ? state.pluginName : undefined;
        } else {
            const args = argsOrState as ConsumerPluginConfigArgs | undefined;
            if (!args || args.consumerId === undefined) {
                throw new Error("Missing required property 'consumerId'");
            }
            if (!args || args.pluginName === undefined) {
                throw new Error("Missing required property 'pluginName'");
            }
            inputs["configJson"] = args ? args.configJson : undefined;
            inputs["consumerId"] = args ? args.consumerId : undefined;
            inputs["pluginName"] = args ? args.pluginName : undefined;
            inputs["computedConfig"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ConsumerPluginConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerPluginConfig resources.
 */
export interface ConsumerPluginConfigState {
    readonly computedConfig?: pulumi.Input<string>;
    /**
     * JSON format of plugin config
     */
    readonly configJson?: pulumi.Input<string>;
    readonly consumerId?: pulumi.Input<string>;
    readonly pluginName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConsumerPluginConfig resource.
 */
export interface ConsumerPluginConfigArgs {
    /**
     * JSON format of plugin config
     */
    readonly configJson?: pulumi.Input<string>;
    readonly consumerId: pulumi.Input<string>;
    readonly pluginName: pulumi.Input<string>;
}
