// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # kong.ConsumerBasicAuth
 *
 * Consumer basic auth is a resource that allows you to configure the basic auth plugin for a consumer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const myConsumer = new kong.Consumer("myConsumer", {
 *     customId: "123",
 *     username: "User1",
 * });
 * const basicAuthPlugin = new kong.Plugin("basicAuthPlugin", {});
 * const consumerBasicAuth = new kong.ConsumerBasicAuth("consumerBasicAuth", {
 *     consumerId: myConsumer.id,
 *     password: "bar_updated",
 *     tags: [
 *         "myTag",
 *         "anotherTag",
 *     ],
 *     username: "foo_updated",
 * });
 * ```
 */
export class ConsumerBasicAuth extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerBasicAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerBasicAuthState, opts?: pulumi.CustomResourceOptions): ConsumerBasicAuth {
        return new ConsumerBasicAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/consumerBasicAuth:ConsumerBasicAuth';

    /**
     * Returns true if the given object is an instance of ConsumerBasicAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerBasicAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerBasicAuth.__pulumiType;
    }

    /**
     * the id of the consumer to be configured with basic auth
     */
    public readonly consumerId!: pulumi.Output<string>;
    /**
     * password to be used for basic auth
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * A list of strings associated with the consumer basic auth for grouping and filtering
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * username to be used for basic auth
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ConsumerBasicAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerBasicAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerBasicAuthArgs | ConsumerBasicAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerBasicAuthState | undefined;
            resourceInputs["consumerId"] = state ? state.consumerId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ConsumerBasicAuthArgs | undefined;
            if ((!args || args.consumerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["consumerId"] = args ? args.consumerId : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerBasicAuth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerBasicAuth resources.
 */
export interface ConsumerBasicAuthState {
    /**
     * the id of the consumer to be configured with basic auth
     */
    consumerId?: pulumi.Input<string>;
    /**
     * password to be used for basic auth
     */
    password?: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer basic auth for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * username to be used for basic auth
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConsumerBasicAuth resource.
 */
export interface ConsumerBasicAuthArgs {
    /**
     * the id of the consumer to be configured with basic auth
     */
    consumerId: pulumi.Input<string>;
    /**
     * password to be used for basic auth
     */
    password: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer basic auth for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * username to be used for basic auth
     */
    username: pulumi.Input<string>;
}
