// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # kong.ConsumerKeyAuth
 *
 * Resource that allows you to configure the [Key Authentication](https://docs.konghq.com/hub/kong-inc/key-auth/) plugin for a consumer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const myConsumer = new kong.Consumer("myConsumer", {
 *     username: "User1",
 *     customId: "123",
 * });
 * const keyAuthPlugin = new kong.Plugin("keyAuthPlugin", {});
 * const consumerKeyAuth = new kong.ConsumerKeyAuth("consumerKeyAuth", {
 *     consumerId: myConsumer.id,
 *     key: "secret",
 *     tags: [
 *         "myTag",
 *         "anotherTag",
 *     ],
 * });
 * ```
 */
export class ConsumerKeyAuth extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerKeyAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerKeyAuthState, opts?: pulumi.CustomResourceOptions): ConsumerKeyAuth {
        return new ConsumerKeyAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/consumerKeyAuth:ConsumerKeyAuth';

    /**
     * Returns true if the given object is an instance of ConsumerKeyAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerKeyAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerKeyAuth.__pulumiType;
    }

    /**
     * the id of the consumer to associate the credentials to
     */
    public readonly consumerId!: pulumi.Output<string>;
    /**
     * Unique key to authenticate the client; if omitted the plugin will generate one
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * A list of strings associated with the consumer key auth for grouping and filtering
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConsumerKeyAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerKeyAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerKeyAuthArgs | ConsumerKeyAuthState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerKeyAuthState | undefined;
            inputs["consumerId"] = state ? state.consumerId : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConsumerKeyAuthArgs | undefined;
            if ((!args || args.consumerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            inputs["consumerId"] = args ? args.consumerId : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ConsumerKeyAuth.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerKeyAuth resources.
 */
export interface ConsumerKeyAuthState {
    /**
     * the id of the consumer to associate the credentials to
     */
    readonly consumerId?: pulumi.Input<string>;
    /**
     * Unique key to authenticate the client; if omitted the plugin will generate one
     */
    readonly key?: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer key auth for grouping and filtering
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConsumerKeyAuth resource.
 */
export interface ConsumerKeyAuthArgs {
    /**
     * the id of the consumer to associate the credentials to
     */
    readonly consumerId: pulumi.Input<string>;
    /**
     * Unique key to authenticate the client; if omitted the plugin will generate one
     */
    readonly key?: pulumi.Input<string>;
    /**
     * A list of strings associated with the consumer key auth for grouping and filtering
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
