// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # kong.Plugin
 *
 * The plugin resource maps directly onto the json for the API endpoint in Kong.  For more information on the parameters [see the Kong Api create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#plugin-object).
 * The `configJson` is passed through to the plugin to configure it as is.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const rateLimit = new kong.Plugin("rate_limit", {
 *     configJson: `	{
 * 		"second": 5,
 * 		"hour" : 1000
 * 	}
 * `,
 * });
 * ```
 * To apply a plugin to a consumer use the `consumerId` property, for example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const pluginConsumer = new kong.Consumer("plugin_consumer", {
 *     customId: "567",
 *     username: "PluginUser",
 * });
 * const rateLimit = new kong.Plugin("rate_limit", {
 *     configJson: `	{
 * 		"second": 5,
 * 		"hour" : 1000
 * 	}
 * `,
 *     consumerId: pluginConsumer.id,
 * });
 * ```
 *
 * To apply a plugin to a service use the `serviceId` property, for example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const service = new kong.Service("service", {
 *     host: "test.org",
 *     protocol: "http",
 * });
 * const rateLimit = new kong.Plugin("rate_limit", {
 *     configJson: `	{
 * 		"second": 10,
 * 		"hour" : 2000
 * 	}
 * `,
 *     serviceId: service.id,
 * });
 * ```
 *
 * To apply a plugin to a route use the `routeId` property, for example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const service = new kong.Service("service", {
 *     host: "test.org",
 *     protocol: "http",
 * });
 * const rateLimit = new kong.Plugin("rate_limit", {
 *     configJson: `	{
 * 		"second": 11,
 * 		"hour" : 4000
 * 	}
 * `,
 *     enabled: true,
 *     serviceId: service.id,
 * });
 * ```
 * ## Argument reference
 *
 * `pluginName` - (Required) the name of the plugin you want to configure
 * `consumerId` - (Optional) the consumer id you want to configure the plugin for
 * `serviceId`  - (Optional) the service id that you want to configure the plugin for
 * `routeId` - (Optional) the route id that you want to configure the plugin for
 * `enabled` - (Optional) whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
 * `configJson` - (Optional) this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
 * page of the plugin you are configuring
 *
 * ## Import
 *
 * To import a plugin
 *
 * ```sh
 *  $ pulumi import kong:index/plugin:Plugin <plugin_identifier> <plugin_id>
 * ```
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    public /*out*/ readonly computedConfig!: pulumi.Output<string>;
    /**
     * plugin configuration in JSON format, configuration must be a valid JSON object.
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    public readonly consumerId!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly routeId!: pulumi.Output<string | undefined>;
    public readonly serviceId!: pulumi.Output<string | undefined>;
    public readonly strictMatch!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            inputs["computedConfig"] = state ? state.computedConfig : undefined;
            inputs["configJson"] = state ? state.configJson : undefined;
            inputs["consumerId"] = state ? state.consumerId : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["routeId"] = state ? state.routeId : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
            inputs["strictMatch"] = state ? state.strictMatch : undefined;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            inputs["configJson"] = args ? args.configJson : undefined;
            inputs["consumerId"] = args ? args.consumerId : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["routeId"] = args ? args.routeId : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
            inputs["strictMatch"] = args ? args.strictMatch : undefined;
            inputs["computedConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Plugin.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    readonly computedConfig?: pulumi.Input<string>;
    /**
     * plugin configuration in JSON format, configuration must be a valid JSON object.
     */
    readonly configJson?: pulumi.Input<string>;
    readonly consumerId?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly routeId?: pulumi.Input<string>;
    readonly serviceId?: pulumi.Input<string>;
    readonly strictMatch?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * plugin configuration in JSON format, configuration must be a valid JSON object.
     */
    readonly configJson?: pulumi.Input<string>;
    readonly consumerId?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly routeId?: pulumi.Input<string>;
    readonly serviceId?: pulumi.Input<string>;
    readonly strictMatch?: pulumi.Input<boolean>;
}
