// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kong from "@pulumi/kong";
 *
 * const target = new kong.Target("target", {
 *     target: "sample_target:80",
 *     weight: 10,
 *     upstreamId: upstream.id,
 * });
 * ```
 *
 * ## Import
 *
 * To import a target use a combination of the upstream id and the target id as follows:
 *
 * ```sh
 * $ pulumi import kong:index/target:Target <target_identifier> <upstream_id>/<target_id>
 * ```
 */
export class Target extends pulumi.CustomResource {
    /**
     * Get an existing Target resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetState, opts?: pulumi.CustomResourceOptions): Target {
        return new Target(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/target:Target';

    /**
     * Returns true if the given object is an instance of Target.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Target {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Target.__pulumiType;
    }

    /**
     * A list set of strings associated with the Plugin for grouping and filtering
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
     */
    declare public readonly target: pulumi.Output<string>;
    /**
     * is the id of the upstream to apply this target to.
     */
    declare public readonly upstreamId: pulumi.Output<string>;
    /**
     * is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
     */
    declare public readonly weight: pulumi.Output<number>;

    /**
     * Create a Target resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetArgs | TargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetState | undefined;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["target"] = state?.target;
            resourceInputs["upstreamId"] = state?.upstreamId;
            resourceInputs["weight"] = state?.weight;
        } else {
            const args = argsOrState as TargetArgs | undefined;
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if (args?.upstreamId === undefined && !opts.urn) {
                throw new Error("Missing required property 'upstreamId'");
            }
            if (args?.weight === undefined && !opts.urn) {
                throw new Error("Missing required property 'weight'");
            }
            resourceInputs["tags"] = args?.tags;
            resourceInputs["target"] = args?.target;
            resourceInputs["upstreamId"] = args?.upstreamId;
            resourceInputs["weight"] = args?.weight;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Target.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Target resources.
 */
export interface TargetState {
    /**
     * A list set of strings associated with the Plugin for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
     */
    target?: pulumi.Input<string>;
    /**
     * is the id of the upstream to apply this target to.
     */
    upstreamId?: pulumi.Input<string>;
    /**
     * is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Target resource.
 */
export interface TargetArgs {
    /**
     * A list set of strings associated with the Plugin for grouping and filtering
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
     */
    target: pulumi.Input<string>;
    /**
     * is the id of the upstream to apply this target to.
     */
    upstreamId: pulumi.Input<string>;
    /**
     * is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
     */
    weight: pulumi.Input<number>;
}
