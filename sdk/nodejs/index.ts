// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ConsumerArgs, ConsumerState } from "./consumer";
export type Consumer = import("./consumer").Consumer;
export const Consumer: typeof import("./consumer").Consumer = null as any;
utilities.lazyLoad(exports, ["Consumer"], () => require("./consumer"));

export { ConsumerAclArgs, ConsumerAclState } from "./consumerAcl";
export type ConsumerAcl = import("./consumerAcl").ConsumerAcl;
export const ConsumerAcl: typeof import("./consumerAcl").ConsumerAcl = null as any;
utilities.lazyLoad(exports, ["ConsumerAcl"], () => require("./consumerAcl"));

export { ConsumerBasicAuthArgs, ConsumerBasicAuthState } from "./consumerBasicAuth";
export type ConsumerBasicAuth = import("./consumerBasicAuth").ConsumerBasicAuth;
export const ConsumerBasicAuth: typeof import("./consumerBasicAuth").ConsumerBasicAuth = null as any;
utilities.lazyLoad(exports, ["ConsumerBasicAuth"], () => require("./consumerBasicAuth"));

export { ConsumerJwtAuthArgs, ConsumerJwtAuthState } from "./consumerJwtAuth";
export type ConsumerJwtAuth = import("./consumerJwtAuth").ConsumerJwtAuth;
export const ConsumerJwtAuth: typeof import("./consumerJwtAuth").ConsumerJwtAuth = null as any;
utilities.lazyLoad(exports, ["ConsumerJwtAuth"], () => require("./consumerJwtAuth"));

export { ConsumerKeyAuthArgs, ConsumerKeyAuthState } from "./consumerKeyAuth";
export type ConsumerKeyAuth = import("./consumerKeyAuth").ConsumerKeyAuth;
export const ConsumerKeyAuth: typeof import("./consumerKeyAuth").ConsumerKeyAuth = null as any;
utilities.lazyLoad(exports, ["ConsumerKeyAuth"], () => require("./consumerKeyAuth"));

export { ConsumerOauth2Args, ConsumerOauth2State } from "./consumerOauth2";
export type ConsumerOauth2 = import("./consumerOauth2").ConsumerOauth2;
export const ConsumerOauth2: typeof import("./consumerOauth2").ConsumerOauth2 = null as any;
utilities.lazyLoad(exports, ["ConsumerOauth2"], () => require("./consumerOauth2"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export * from "./provider";
import { Provider } from "./provider";

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { TargetArgs, TargetState } from "./target";
export type Target = import("./target").Target;
export const Target: typeof import("./target").Target = null as any;
utilities.lazyLoad(exports, ["Target"], () => require("./target"));

export { UpstreamArgs, UpstreamState } from "./upstream";
export type Upstream = import("./upstream").Upstream;
export const Upstream: typeof import("./upstream").Upstream = null as any;
utilities.lazyLoad(exports, ["Upstream"], () => require("./upstream"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kong:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kong:index/consumer:Consumer":
                return new Consumer(name, <any>undefined, { urn })
            case "kong:index/consumerAcl:ConsumerAcl":
                return new ConsumerAcl(name, <any>undefined, { urn })
            case "kong:index/consumerBasicAuth:ConsumerBasicAuth":
                return new ConsumerBasicAuth(name, <any>undefined, { urn })
            case "kong:index/consumerJwtAuth:ConsumerJwtAuth":
                return new ConsumerJwtAuth(name, <any>undefined, { urn })
            case "kong:index/consumerKeyAuth:ConsumerKeyAuth":
                return new ConsumerKeyAuth(name, <any>undefined, { urn })
            case "kong:index/consumerOauth2:ConsumerOauth2":
                return new ConsumerOauth2(name, <any>undefined, { urn })
            case "kong:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "kong:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "kong:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "kong:index/target:Target":
                return new Target(name, <any>undefined, { urn })
            case "kong:index/upstream:Upstream":
                return new Upstream(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kong", "index/certificate", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumer", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerAcl", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerBasicAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerJwtAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerKeyAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerOauth2", _module)
pulumi.runtime.registerResourceModule("kong", "index/plugin", _module)
pulumi.runtime.registerResourceModule("kong", "index/route", _module)
pulumi.runtime.registerResourceModule("kong", "index/service", _module)
pulumi.runtime.registerResourceModule("kong", "index/target", _module)
pulumi.runtime.registerResourceModule("kong", "index/upstream", _module)
pulumi.runtime.registerResourcePackage("kong", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kong") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
