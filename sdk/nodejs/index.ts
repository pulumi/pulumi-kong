// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./certificate";
export * from "./consumer";
export * from "./consumerAcl";
export * from "./consumerBasicAuth";
export * from "./consumerJwtAuth";
export * from "./consumerKeyAuth";
export * from "./consumerOauth2";
export * from "./plugin";
export * from "./provider";
export * from "./route";
export * from "./service";
export * from "./target";
export * from "./upstream";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Certificate } from "./certificate";
import { Consumer } from "./consumer";
import { ConsumerAcl } from "./consumerAcl";
import { ConsumerBasicAuth } from "./consumerBasicAuth";
import { ConsumerJwtAuth } from "./consumerJwtAuth";
import { ConsumerKeyAuth } from "./consumerKeyAuth";
import { ConsumerOauth2 } from "./consumerOauth2";
import { Plugin } from "./plugin";
import { Route } from "./route";
import { Service } from "./service";
import { Target } from "./target";
import { Upstream } from "./upstream";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kong:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kong:index/consumer:Consumer":
                return new Consumer(name, <any>undefined, { urn })
            case "kong:index/consumerAcl:ConsumerAcl":
                return new ConsumerAcl(name, <any>undefined, { urn })
            case "kong:index/consumerBasicAuth:ConsumerBasicAuth":
                return new ConsumerBasicAuth(name, <any>undefined, { urn })
            case "kong:index/consumerJwtAuth:ConsumerJwtAuth":
                return new ConsumerJwtAuth(name, <any>undefined, { urn })
            case "kong:index/consumerKeyAuth:ConsumerKeyAuth":
                return new ConsumerKeyAuth(name, <any>undefined, { urn })
            case "kong:index/consumerOauth2:ConsumerOauth2":
                return new ConsumerOauth2(name, <any>undefined, { urn })
            case "kong:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "kong:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "kong:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "kong:index/target:Target":
                return new Target(name, <any>undefined, { urn })
            case "kong:index/upstream:Upstream":
                return new Upstream(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kong", "index/certificate", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumer", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerAcl", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerBasicAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerJwtAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerKeyAuth", _module)
pulumi.runtime.registerResourceModule("kong", "index/consumerOauth2", _module)
pulumi.runtime.registerResourceModule("kong", "index/plugin", _module)
pulumi.runtime.registerResourceModule("kong", "index/route", _module)
pulumi.runtime.registerResourceModule("kong", "index/service", _module)
pulumi.runtime.registerResourceModule("kong", "index/target", _module)
pulumi.runtime.registerResourceModule("kong", "index/upstream", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("kong", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kong") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
