// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kong:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    public readonly connectTimeout!: pulumi.Output<number | undefined>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly readTimeout!: pulumi.Output<number | undefined>;
    public readonly retries!: pulumi.Output<number | undefined>;
    public readonly writeTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            inputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["readTimeout"] = state ? state.readTimeout : undefined;
            inputs["retries"] = state ? state.retries : undefined;
            inputs["writeTimeout"] = state ? state.writeTimeout : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            inputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            inputs["host"] = args ? args.host : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["readTimeout"] = args ? args.readTimeout : undefined;
            inputs["retries"] = args ? args.retries : undefined;
            inputs["writeTimeout"] = args ? args.writeTimeout : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    readonly connectTimeout?: pulumi.Input<number>;
    readonly host?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly readTimeout?: pulumi.Input<number>;
    readonly retries?: pulumi.Input<number>;
    readonly writeTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    readonly connectTimeout?: pulumi.Input<number>;
    readonly host?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol: pulumi.Input<string>;
    readonly readTimeout?: pulumi.Input<number>;
    readonly retries?: pulumi.Input<number>;
    readonly writeTimeout?: pulumi.Input<number>;
}
