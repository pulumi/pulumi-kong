// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
     * 
     */
    @Import(name="caCertificateIds")
    private @Nullable Output<List<String>> caCertificateIds;

    /**
     * @return A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
     * 
     */
    public Optional<Output<List<String>>> caCertificateIds() {
        return Optional.ofNullable(this.caCertificateIds);
    }

    /**
     * ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
     * 
     */
    @Import(name="clientCertificateId")
    private @Nullable Output<String> clientCertificateId;

    /**
     * @return ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
     * 
     */
    public Optional<Output<String>> clientCertificateId() {
        return Optional.ofNullable(this.clientCertificateId);
    }

    /**
     * Connection timeout. Default(ms): 60000
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return Connection timeout. Default(ms): 60000
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Host to map to
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host to map to
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Service name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Service name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Path to map to
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path to map to
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Port to map to. Default: 80
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port to map to. Default: 80
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Protocol to use
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol to use
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Read timeout. Default(ms): 60000
     * 
     */
    @Import(name="readTimeout")
    private @Nullable Output<Integer> readTimeout;

    /**
     * @return Read timeout. Default(ms): 60000
     * 
     */
    public Optional<Output<Integer>> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }

    /**
     * Number of retries. Default: 5
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return Number of retries. Default: 5
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * A list of strings associated with the Service for grouping and filtering.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the Service for grouping and filtering.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
     * 
     */
    @Import(name="tlsVerify")
    private @Nullable Output<Boolean> tlsVerify;

    /**
     * @return Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
     * 
     */
    public Optional<Output<Boolean>> tlsVerify() {
        return Optional.ofNullable(this.tlsVerify);
    }

    /**
     * Maximum depth of chain while verifying Upstream server’s TLS certificate.
     * 
     */
    @Import(name="tlsVerifyDepth")
    private @Nullable Output<Integer> tlsVerifyDepth;

    /**
     * @return Maximum depth of chain while verifying Upstream server’s TLS certificate.
     * 
     */
    public Optional<Output<Integer>> tlsVerifyDepth() {
        return Optional.ofNullable(this.tlsVerifyDepth);
    }

    /**
     * Write timout. Default(ms): 60000
     * 
     */
    @Import(name="writeTimeout")
    private @Nullable Output<Integer> writeTimeout;

    /**
     * @return Write timout. Default(ms): 60000
     * 
     */
    public Optional<Output<Integer>> writeTimeout() {
        return Optional.ofNullable(this.writeTimeout);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.caCertificateIds = $.caCertificateIds;
        this.clientCertificateId = $.clientCertificateId;
        this.connectTimeout = $.connectTimeout;
        this.host = $.host;
        this.name = $.name;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.readTimeout = $.readTimeout;
        this.retries = $.retries;
        this.tags = $.tags;
        this.tlsVerify = $.tlsVerify;
        this.tlsVerifyDepth = $.tlsVerifyDepth;
        this.writeTimeout = $.writeTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificateIds A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateIds(@Nullable Output<List<String>> caCertificateIds) {
            $.caCertificateIds = caCertificateIds;
            return this;
        }

        /**
         * @param caCertificateIds A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateIds(List<String> caCertificateIds) {
            return caCertificateIds(Output.of(caCertificateIds));
        }

        /**
         * @param caCertificateIds A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateIds(String... caCertificateIds) {
            return caCertificateIds(List.of(caCertificateIds));
        }

        /**
         * @param clientCertificateId ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(@Nullable Output<String> clientCertificateId) {
            $.clientCertificateId = clientCertificateId;
            return this;
        }

        /**
         * @param clientCertificateId ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(String clientCertificateId) {
            return clientCertificateId(Output.of(clientCertificateId));
        }

        /**
         * @param connectTimeout Connection timeout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout Connection timeout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param host Host to map to
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host to map to
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param name Service name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Service name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path Path to map to
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path to map to
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port Port to map to. Default: 80
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port to map to. Default: 80
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol Protocol to use
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol to use
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param readTimeout Read timeout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(@Nullable Output<Integer> readTimeout) {
            $.readTimeout = readTimeout;
            return this;
        }

        /**
         * @param readTimeout Read timeout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(Integer readTimeout) {
            return readTimeout(Output.of(readTimeout));
        }

        /**
         * @param retries Number of retries. Default: 5
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries Number of retries. Default: 5
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param tags A list of strings associated with the Service for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the Service for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the Service for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tlsVerify Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
         * 
         * @return builder
         * 
         */
        public Builder tlsVerify(@Nullable Output<Boolean> tlsVerify) {
            $.tlsVerify = tlsVerify;
            return this;
        }

        /**
         * @param tlsVerify Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
         * 
         * @return builder
         * 
         */
        public Builder tlsVerify(Boolean tlsVerify) {
            return tlsVerify(Output.of(tlsVerify));
        }

        /**
         * @param tlsVerifyDepth Maximum depth of chain while verifying Upstream server’s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder tlsVerifyDepth(@Nullable Output<Integer> tlsVerifyDepth) {
            $.tlsVerifyDepth = tlsVerifyDepth;
            return this;
        }

        /**
         * @param tlsVerifyDepth Maximum depth of chain while verifying Upstream server’s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder tlsVerifyDepth(Integer tlsVerifyDepth) {
            return tlsVerifyDepth(Output.of(tlsVerifyDepth));
        }

        /**
         * @param writeTimeout Write timout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder writeTimeout(@Nullable Output<Integer> writeTimeout) {
            $.writeTimeout = writeTimeout;
            return this;
        }

        /**
         * @param writeTimeout Write timout. Default(ms): 60000
         * 
         * @return builder
         * 
         */
        public Builder writeTimeout(Integer writeTimeout) {
            return writeTimeout(Output.of(writeTimeout));
        }

        public ServiceState build() {
            return $;
        }
    }

}
