// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginArgs Empty = new PluginArgs();

    /**
     * this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
     * page of the plugin you are configuring
     * 
     */
    @Import(name="configJson")
    private @Nullable Output<String> configJson;

    /**
     * @return this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
     * page of the plugin you are configuring
     * 
     */
    public Optional<Output<String>> configJson() {
        return Optional.ofNullable(this.configJson);
    }

    /**
     * the consumer id you want to configure the plugin for
     * 
     */
    @Import(name="consumerId")
    private @Nullable Output<String> consumerId;

    /**
     * @return the consumer id you want to configure the plugin for
     * 
     */
    public Optional<Output<String>> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * the route id that you want to configure the plugin for
     * 
     */
    @Import(name="routeId")
    private @Nullable Output<String> routeId;

    /**
     * @return the route id that you want to configure the plugin for
     * 
     */
    public Optional<Output<String>> routeId() {
        return Optional.ofNullable(this.routeId);
    }

    /**
     * the service id that you want to configure the plugin for
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    /**
     * @return the service id that you want to configure the plugin for
     * 
     */
    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    @Import(name="strictMatch")
    private @Nullable Output<Boolean> strictMatch;

    public Optional<Output<Boolean>> strictMatch() {
        return Optional.ofNullable(this.strictMatch);
    }

    /**
     * A list of strings associated with the Plugin for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the Plugin for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PluginArgs() {}

    private PluginArgs(PluginArgs $) {
        this.configJson = $.configJson;
        this.consumerId = $.consumerId;
        this.enabled = $.enabled;
        this.name = $.name;
        this.routeId = $.routeId;
        this.serviceId = $.serviceId;
        this.strictMatch = $.strictMatch;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginArgs $;

        public Builder() {
            $ = new PluginArgs();
        }

        public Builder(PluginArgs defaults) {
            $ = new PluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configJson this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
         * page of the plugin you are configuring
         * 
         * @return builder
         * 
         */
        public Builder configJson(@Nullable Output<String> configJson) {
            $.configJson = configJson;
            return this;
        }

        /**
         * @param configJson this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
         * page of the plugin you are configuring
         * 
         * @return builder
         * 
         */
        public Builder configJson(String configJson) {
            return configJson(Output.of(configJson));
        }

        /**
         * @param consumerId the consumer id you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder consumerId(@Nullable Output<String> consumerId) {
            $.consumerId = consumerId;
            return this;
        }

        /**
         * @param consumerId the consumer id you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder consumerId(String consumerId) {
            return consumerId(Output.of(consumerId));
        }

        /**
         * @param enabled whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param routeId the route id that you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder routeId(@Nullable Output<String> routeId) {
            $.routeId = routeId;
            return this;
        }

        /**
         * @param routeId the route id that you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder routeId(String routeId) {
            return routeId(Output.of(routeId));
        }

        /**
         * @param serviceId the service id that you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId the service id that you want to configure the plugin for
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public Builder strictMatch(@Nullable Output<Boolean> strictMatch) {
            $.strictMatch = strictMatch;
            return this;
        }

        public Builder strictMatch(Boolean strictMatch) {
            return strictMatch(Output.of(strictMatch));
        }

        /**
         * @param tags A list of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public PluginArgs build() {
            return $;
        }
    }

}
