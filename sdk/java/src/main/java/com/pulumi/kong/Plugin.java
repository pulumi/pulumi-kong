// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kong.PluginArgs;
import com.pulumi.kong.Utilities;
import com.pulumi.kong.inputs.PluginState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # kong.Plugin
 * 
 * The plugin resource maps directly onto the json for the API endpoint in Kong.  For more information on the parameters [see the Kong Api create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#plugin-object).
 * The `config_json` is passed through to the plugin to configure it as is.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Plugin;
 * import com.pulumi.kong.PluginArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var rateLimit = new Plugin(&#34;rateLimit&#34;, PluginArgs.builder()        
 *             .configJson(&#34;&#34;&#34;
 * 	{
 * 		&#34;second&#34;: 5,
 * 		&#34;hour&#34; : 1000
 * 	}
 * 
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * To apply a plugin to a consumer use the `consumer_id` property, for example:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Consumer;
 * import com.pulumi.kong.ConsumerArgs;
 * import com.pulumi.kong.Plugin;
 * import com.pulumi.kong.PluginArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pluginConsumer = new Consumer(&#34;pluginConsumer&#34;, ConsumerArgs.builder()        
 *             .customId(&#34;567&#34;)
 *             .username(&#34;PluginUser&#34;)
 *             .build());
 * 
 *         var rateLimit = new Plugin(&#34;rateLimit&#34;, PluginArgs.builder()        
 *             .configJson(&#34;&#34;&#34;
 * 	{
 * 		&#34;second&#34;: 5,
 * 		&#34;hour&#34; : 1000
 * 	}
 * 
 *             &#34;&#34;&#34;)
 *             .consumerId(pluginConsumer.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * To apply a plugin to a service use the `service_id` property, for example:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Service;
 * import com.pulumi.kong.ServiceArgs;
 * import com.pulumi.kong.Plugin;
 * import com.pulumi.kong.PluginArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var service = new Service(&#34;service&#34;, ServiceArgs.builder()        
 *             .host(&#34;test.org&#34;)
 *             .protocol(&#34;http&#34;)
 *             .build());
 * 
 *         var rateLimit = new Plugin(&#34;rateLimit&#34;, PluginArgs.builder()        
 *             .configJson(&#34;&#34;&#34;
 * 	{
 * 		&#34;second&#34;: 10,
 * 		&#34;hour&#34; : 2000
 * 	}
 * 
 *             &#34;&#34;&#34;)
 *             .serviceId(service.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * To apply a plugin to a route use the `route_id` property, for example:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Service;
 * import com.pulumi.kong.ServiceArgs;
 * import com.pulumi.kong.Plugin;
 * import com.pulumi.kong.PluginArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var service = new Service(&#34;service&#34;, ServiceArgs.builder()        
 *             .host(&#34;test.org&#34;)
 *             .protocol(&#34;http&#34;)
 *             .build());
 * 
 *         var rateLimit = new Plugin(&#34;rateLimit&#34;, PluginArgs.builder()        
 *             .configJson(&#34;&#34;&#34;
 * 	{
 * 		&#34;second&#34;: 11,
 * 		&#34;hour&#34; : 4000
 * 	}
 * 
 *             &#34;&#34;&#34;)
 *             .enabled(true)
 *             .serviceId(service.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * To import a plugin:
 * 
 * ```sh
 * $ pulumi import kong:index/plugin:Plugin &lt;plugin_identifier&gt; &lt;plugin_id&gt;
 * ```
 * 
 */
@ResourceType(type="kong:index/plugin:Plugin")
public class Plugin extends com.pulumi.resources.CustomResource {
    @Export(name="computedConfig", refs={String.class}, tree="[0]")
    private Output<String> computedConfig;

    public Output<String> computedConfig() {
        return this.computedConfig;
    }
    /**
     * this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
     * page of the plugin you are configuring
     * 
     */
    @Export(name="configJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configJson;

    /**
     * @return this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
     * page of the plugin you are configuring
     * 
     */
    public Output<Optional<String>> configJson() {
        return Codegen.optional(this.configJson);
    }
    /**
     * the consumer id you want to configure the plugin for
     * 
     */
    @Export(name="consumerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consumerId;

    /**
     * @return the consumer id you want to configure the plugin for
     * 
     */
    public Output<Optional<String>> consumerId() {
        return Codegen.optional(this.consumerId);
    }
    /**
     * whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    /**
     * the route id that you want to configure the plugin for
     * 
     */
    @Export(name="routeId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> routeId;

    /**
     * @return the route id that you want to configure the plugin for
     * 
     */
    public Output<Optional<String>> routeId() {
        return Codegen.optional(this.routeId);
    }
    /**
     * the service id that you want to configure the plugin for
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceId;

    /**
     * @return the service id that you want to configure the plugin for
     * 
     */
    public Output<Optional<String>> serviceId() {
        return Codegen.optional(this.serviceId);
    }
    @Export(name="strictMatch", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> strictMatch;

    public Output<Optional<Boolean>> strictMatch() {
        return Codegen.optional(this.strictMatch);
    }
    /**
     * A list of strings associated with the Plugin for grouping and filtering
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of strings associated with the Plugin for grouping and filtering
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Plugin(String name) {
        this(name, PluginArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Plugin(String name, @Nullable PluginArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Plugin(String name, @Nullable PluginArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/plugin:Plugin", name, args == null ? PluginArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Plugin(String name, Output<String> id, @Nullable PluginState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/plugin:Plugin", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Plugin get(String name, Output<String> id, @Nullable PluginState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Plugin(name, id, state, options);
    }
}
