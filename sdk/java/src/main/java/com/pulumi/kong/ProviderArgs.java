// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * An basic auth password for kong admin
     * 
     */
    @Import(name="kongAdminPassword")
    private @Nullable Output<String> kongAdminPassword;

    /**
     * @return An basic auth password for kong admin
     * 
     */
    public Optional<Output<String>> kongAdminPassword() {
        return Optional.ofNullable(this.kongAdminPassword);
    }

    /**
     * API key for the kong api (Enterprise Edition)
     * 
     */
    @Import(name="kongAdminToken")
    private @Nullable Output<String> kongAdminToken;

    /**
     * @return API key for the kong api (Enterprise Edition)
     * 
     */
    public Optional<Output<String>> kongAdminToken() {
        return Optional.ofNullable(this.kongAdminToken);
    }

    /**
     * The address of the kong admin url e.g. http://localhost:8001
     * 
     */
    @Import(name="kongAdminUri")
    private @Nullable Output<String> kongAdminUri;

    /**
     * @return The address of the kong admin url e.g. http://localhost:8001
     * 
     */
    public Optional<Output<String>> kongAdminUri() {
        return Optional.ofNullable(this.kongAdminUri);
    }

    /**
     * An basic auth user for kong admin
     * 
     */
    @Import(name="kongAdminUsername")
    private @Nullable Output<String> kongAdminUsername;

    /**
     * @return An basic auth user for kong admin
     * 
     */
    public Optional<Output<String>> kongAdminUsername() {
        return Optional.ofNullable(this.kongAdminUsername);
    }

    /**
     * API key for the kong api (if you have locked it down)
     * 
     */
    @Import(name="kongApiKey")
    private @Nullable Output<String> kongApiKey;

    /**
     * @return API key for the kong api (if you have locked it down)
     * 
     */
    public Optional<Output<String>> kongApiKey() {
        return Optional.ofNullable(this.kongApiKey);
    }

    /**
     * Workspace context (Enterprise Edition)
     * 
     */
    @Import(name="kongWorkspace")
    private @Nullable Output<String> kongWorkspace;

    /**
     * @return Workspace context (Enterprise Edition)
     * 
     */
    public Optional<Output<String>> kongWorkspace() {
        return Optional.ofNullable(this.kongWorkspace);
    }

    /**
     * Should plugins `config_json` field strictly match plugin configuration
     * 
     */
    @Import(name="strictPluginsMatch", json=true)
    private @Nullable Output<Boolean> strictPluginsMatch;

    /**
     * @return Should plugins `config_json` field strictly match plugin configuration
     * 
     */
    public Optional<Output<Boolean>> strictPluginsMatch() {
        return Optional.ofNullable(this.strictPluginsMatch);
    }

    /**
     * Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
     * 
     */
    @Import(name="tlsSkipVerify", json=true)
    private @Nullable Output<Boolean> tlsSkipVerify;

    /**
     * @return Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
     * 
     */
    public Optional<Output<Boolean>> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.kongAdminPassword = $.kongAdminPassword;
        this.kongAdminToken = $.kongAdminToken;
        this.kongAdminUri = $.kongAdminUri;
        this.kongAdminUsername = $.kongAdminUsername;
        this.kongApiKey = $.kongApiKey;
        this.kongWorkspace = $.kongWorkspace;
        this.strictPluginsMatch = $.strictPluginsMatch;
        this.tlsSkipVerify = $.tlsSkipVerify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kongAdminPassword An basic auth password for kong admin
         * 
         * @return builder
         * 
         */
        public Builder kongAdminPassword(@Nullable Output<String> kongAdminPassword) {
            $.kongAdminPassword = kongAdminPassword;
            return this;
        }

        /**
         * @param kongAdminPassword An basic auth password for kong admin
         * 
         * @return builder
         * 
         */
        public Builder kongAdminPassword(String kongAdminPassword) {
            return kongAdminPassword(Output.of(kongAdminPassword));
        }

        /**
         * @param kongAdminToken API key for the kong api (Enterprise Edition)
         * 
         * @return builder
         * 
         */
        public Builder kongAdminToken(@Nullable Output<String> kongAdminToken) {
            $.kongAdminToken = kongAdminToken;
            return this;
        }

        /**
         * @param kongAdminToken API key for the kong api (Enterprise Edition)
         * 
         * @return builder
         * 
         */
        public Builder kongAdminToken(String kongAdminToken) {
            return kongAdminToken(Output.of(kongAdminToken));
        }

        /**
         * @param kongAdminUri The address of the kong admin url e.g. http://localhost:8001
         * 
         * @return builder
         * 
         */
        public Builder kongAdminUri(@Nullable Output<String> kongAdminUri) {
            $.kongAdminUri = kongAdminUri;
            return this;
        }

        /**
         * @param kongAdminUri The address of the kong admin url e.g. http://localhost:8001
         * 
         * @return builder
         * 
         */
        public Builder kongAdminUri(String kongAdminUri) {
            return kongAdminUri(Output.of(kongAdminUri));
        }

        /**
         * @param kongAdminUsername An basic auth user for kong admin
         * 
         * @return builder
         * 
         */
        public Builder kongAdminUsername(@Nullable Output<String> kongAdminUsername) {
            $.kongAdminUsername = kongAdminUsername;
            return this;
        }

        /**
         * @param kongAdminUsername An basic auth user for kong admin
         * 
         * @return builder
         * 
         */
        public Builder kongAdminUsername(String kongAdminUsername) {
            return kongAdminUsername(Output.of(kongAdminUsername));
        }

        /**
         * @param kongApiKey API key for the kong api (if you have locked it down)
         * 
         * @return builder
         * 
         */
        public Builder kongApiKey(@Nullable Output<String> kongApiKey) {
            $.kongApiKey = kongApiKey;
            return this;
        }

        /**
         * @param kongApiKey API key for the kong api (if you have locked it down)
         * 
         * @return builder
         * 
         */
        public Builder kongApiKey(String kongApiKey) {
            return kongApiKey(Output.of(kongApiKey));
        }

        /**
         * @param kongWorkspace Workspace context (Enterprise Edition)
         * 
         * @return builder
         * 
         */
        public Builder kongWorkspace(@Nullable Output<String> kongWorkspace) {
            $.kongWorkspace = kongWorkspace;
            return this;
        }

        /**
         * @param kongWorkspace Workspace context (Enterprise Edition)
         * 
         * @return builder
         * 
         */
        public Builder kongWorkspace(String kongWorkspace) {
            return kongWorkspace(Output.of(kongWorkspace));
        }

        /**
         * @param strictPluginsMatch Should plugins `config_json` field strictly match plugin configuration
         * 
         * @return builder
         * 
         */
        public Builder strictPluginsMatch(@Nullable Output<Boolean> strictPluginsMatch) {
            $.strictPluginsMatch = strictPluginsMatch;
            return this;
        }

        /**
         * @param strictPluginsMatch Should plugins `config_json` field strictly match plugin configuration
         * 
         * @return builder
         * 
         */
        public Builder strictPluginsMatch(Boolean strictPluginsMatch) {
            return strictPluginsMatch(Output.of(strictPluginsMatch));
        }

        /**
         * @param tlsSkipVerify Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(@Nullable Output<Boolean> tlsSkipVerify) {
            $.tlsSkipVerify = tlsSkipVerify;
            return this;
        }

        /**
         * @param tlsSkipVerify Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            return tlsSkipVerify(Output.of(tlsSkipVerify));
        }

        public ProviderArgs build() {
            $.strictPluginsMatch = Codegen.booleanProp("strictPluginsMatch").output().arg($.strictPluginsMatch).env("STRICT_PLUGINS_MATCH").getNullable();
            $.tlsSkipVerify = Codegen.booleanProp("tlsSkipVerify").output().arg($.tlsSkipVerify).env("TLS_SKIP_VERIFY").def(false).getNullable();
            return $;
        }
    }

}
