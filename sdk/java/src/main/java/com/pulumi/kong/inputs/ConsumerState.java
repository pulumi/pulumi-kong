// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumerState extends com.pulumi.resources.ResourceArgs {

    public static final ConsumerState Empty = new ConsumerState();

    /**
     * A custom id for the consumer, you must set either the username or custom_id
     * 
     */
    @Import(name="customId")
    private @Nullable Output<String> customId;

    /**
     * @return A custom id for the consumer, you must set either the username or custom_id
     * 
     */
    public Optional<Output<String>> customId() {
        return Optional.ofNullable(this.customId);
    }

    /**
     * A list of strings associated with the Consumer for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the Consumer for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The username to use, you must set either the username or custom_id
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to use, you must set either the username or custom_id
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ConsumerState() {}

    private ConsumerState(ConsumerState $) {
        this.customId = $.customId;
        this.tags = $.tags;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumerState $;

        public Builder() {
            $ = new ConsumerState();
        }

        public Builder(ConsumerState defaults) {
            $ = new ConsumerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customId A custom id for the consumer, you must set either the username or custom_id
         * 
         * @return builder
         * 
         */
        public Builder customId(@Nullable Output<String> customId) {
            $.customId = customId;
            return this;
        }

        /**
         * @param customId A custom id for the consumer, you must set either the username or custom_id
         * 
         * @return builder
         * 
         */
        public Builder customId(String customId) {
            return customId(Output.of(customId));
        }

        /**
         * @param tags A list of strings associated with the Consumer for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the Consumer for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the Consumer for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param username The username to use, you must set either the username or custom_id
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use, you must set either the username or custom_id
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConsumerState build() {
            return $;
        }
    }

}
