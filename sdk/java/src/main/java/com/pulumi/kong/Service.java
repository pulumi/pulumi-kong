// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kong.ServiceArgs;
import com.pulumi.kong.Utilities;
import com.pulumi.kong.inputs.ServiceState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # kong.Service
 * 
 * The service resource maps directly onto the json for the service endpoint in Kong.  For more information on the parameters [see the Kong Service create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#service-object).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Service;
 * import com.pulumi.kong.ServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var service = new Service("service", ServiceArgs.builder()
 *             .name("test")
 *             .protocol("http")
 *             .host("test.org")
 *             .port(8080)
 *             .path("/mypath")
 *             .retries(5)
 *             .connectTimeout(1000)
 *             .writeTimeout(2000)
 *             .readTimeout(3000)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * To use a client certificate and ca certificates combine with certificate resource (note protocol must be `https`):
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Certificate;
 * import com.pulumi.kong.CertificateArgs;
 * import com.pulumi.kong.Service;
 * import com.pulumi.kong.ServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var certificate = new Certificate("certificate", CertificateArgs.builder()
 *             .certificate("""
 *     -----BEGIN CERTIFICATE-----
 *     ......
 *     -----END CERTIFICATE-----
 *             """)
 *             .privateKey("""
 *     -----BEGIN PRIVATE KEY-----
 *     .....
 *     -----END PRIVATE KEY-----
 *             """)
 *             .snis("foo.com")
 *             .build());
 * 
 *         var ca = new Certificate("ca", CertificateArgs.builder()
 *             .certificate("""
 *     -----BEGIN CERTIFICATE-----
 *     ......
 *     -----END CERTIFICATE-----
 *             """)
 *             .privateKey("""
 *     -----BEGIN PRIVATE KEY-----
 *     .....
 *     -----END PRIVATE KEY-----
 *             """)
 *             .snis("ca.com")
 *             .build());
 * 
 *         var service = new Service("service", ServiceArgs.builder()
 *             .name("test")
 *             .protocol("https")
 *             .host("test.org")
 *             .tlsVerify(true)
 *             .tlsVerifyDepth(2)
 *             .clientCertificateId(certificate.id())
 *             .caCertificateIds(ca.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * To import a service:
 * 
 * ```sh
 * $ pulumi import kong:index/service:Service &lt;service_identifier&gt; &lt;service_id&gt;
 * ```
 * 
 */
@ResourceType(type="kong:index/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
     * 
     */
    @Export(name="caCertificateIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> caCertificateIds;

    /**
     * @return A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
     * 
     */
    public Output<Optional<List<String>>> caCertificateIds() {
        return Codegen.optional(this.caCertificateIds);
    }
    /**
     * ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
     * 
     */
    @Export(name="clientCertificateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificateId;

    /**
     * @return ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
     * 
     */
    public Output<Optional<String>> clientCertificateId() {
        return Codegen.optional(this.clientCertificateId);
    }
    /**
     * Connection timeout. Default(ms): 60000
     * 
     */
    @Export(name="connectTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> connectTimeout;

    /**
     * @return Connection timeout. Default(ms): 60000
     * 
     */
    public Output<Optional<Integer>> connectTimeout() {
        return Codegen.optional(this.connectTimeout);
    }
    /**
     * Host to map to
     * 
     */
    @Export(name="host", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> host;

    /**
     * @return Host to map to
     * 
     */
    public Output<Optional<String>> host() {
        return Codegen.optional(this.host);
    }
    /**
     * Service name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Service name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Path to map to
     * 
     */
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> path;

    /**
     * @return Path to map to
     * 
     */
    public Output<Optional<String>> path() {
        return Codegen.optional(this.path);
    }
    /**
     * Port to map to. Default: 80
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> port;

    /**
     * @return Port to map to. Default: 80
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * Protocol to use
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return Protocol to use
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * Read timeout. Default(ms): 60000
     * 
     */
    @Export(name="readTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> readTimeout;

    /**
     * @return Read timeout. Default(ms): 60000
     * 
     */
    public Output<Optional<Integer>> readTimeout() {
        return Codegen.optional(this.readTimeout);
    }
    /**
     * Number of retries. Default: 5
     * 
     */
    @Export(name="retries", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> retries;

    /**
     * @return Number of retries. Default: 5
     * 
     */
    public Output<Optional<Integer>> retries() {
        return Codegen.optional(this.retries);
    }
    /**
     * A list of strings associated with the Service for grouping and filtering.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of strings associated with the Service for grouping and filtering.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
     * 
     */
    @Export(name="tlsVerify", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tlsVerify;

    /**
     * @return Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
     * 
     */
    public Output<Optional<Boolean>> tlsVerify() {
        return Codegen.optional(this.tlsVerify);
    }
    /**
     * Maximum depth of chain while verifying Upstream server’s TLS certificate.
     * 
     */
    @Export(name="tlsVerifyDepth", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tlsVerifyDepth;

    /**
     * @return Maximum depth of chain while verifying Upstream server’s TLS certificate.
     * 
     */
    public Output<Optional<Integer>> tlsVerifyDepth() {
        return Codegen.optional(this.tlsVerifyDepth);
    }
    /**
     * Write timout. Default(ms): 60000
     * 
     */
    @Export(name="writeTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> writeTimeout;

    /**
     * @return Write timout. Default(ms): 60000
     * 
     */
    public Output<Optional<Integer>> writeTimeout() {
        return Codegen.optional(this.writeTimeout);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(java.lang.String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(java.lang.String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(java.lang.String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/service:Service", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Service(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/service:Service", name, state, makeResourceOptions(options, id), false);
    }

    private static ServiceArgs makeArgs(ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
