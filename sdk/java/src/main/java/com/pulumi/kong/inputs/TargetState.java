// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetState extends com.pulumi.resources.ResourceArgs {

    public static final TargetState Empty = new TargetState();

    /**
     * A list set of strings associated with the Plugin for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list set of strings associated with the Plugin for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * is the id of the upstream to apply this target to.
     * 
     */
    @Import(name="upstreamId")
    private @Nullable Output<String> upstreamId;

    /**
     * @return is the id of the upstream to apply this target to.
     * 
     */
    public Optional<Output<String>> upstreamId() {
        return Optional.ofNullable(this.upstreamId);
    }

    /**
     * is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private TargetState() {}

    private TargetState(TargetState $) {
        this.tags = $.tags;
        this.target = $.target;
        this.upstreamId = $.upstreamId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetState $;

        public Builder() {
            $ = new TargetState();
        }

        public Builder(TargetState defaults) {
            $ = new TargetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param tags A list set of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list set of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list set of strings associated with the Plugin for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param target is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param upstreamId is the id of the upstream to apply this target to.
         * 
         * @return builder
         * 
         */
        public Builder upstreamId(@Nullable Output<String> upstreamId) {
            $.upstreamId = upstreamId;
            return this;
        }

        /**
         * @param upstreamId is the id of the upstream to apply this target to.
         * 
         * @return builder
         * 
         */
        public Builder upstreamId(String upstreamId) {
            return upstreamId(Output.of(upstreamId));
        }

        /**
         * @param weight is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public TargetState build() {
            return $;
        }
    }

}
