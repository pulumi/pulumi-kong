// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumerAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsumerAclArgs Empty = new ConsumerAclArgs();

    /**
     * the id of the consumer to be configured
     * 
     */
    @Import(name="consumerId", required=true)
    private Output<String> consumerId;

    /**
     * @return the id of the consumer to be configured
     * 
     */
    public Output<String> consumerId() {
        return this.consumerId;
    }

    /**
     * the acl group
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return the acl group
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * A list of strings associated with the consumer acl for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the consumer acl for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConsumerAclArgs() {}

    private ConsumerAclArgs(ConsumerAclArgs $) {
        this.consumerId = $.consumerId;
        this.group = $.group;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumerAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumerAclArgs $;

        public Builder() {
            $ = new ConsumerAclArgs();
        }

        public Builder(ConsumerAclArgs defaults) {
            $ = new ConsumerAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerId the id of the consumer to be configured
         * 
         * @return builder
         * 
         */
        public Builder consumerId(Output<String> consumerId) {
            $.consumerId = consumerId;
            return this;
        }

        /**
         * @param consumerId the id of the consumer to be configured
         * 
         * @return builder
         * 
         */
        public Builder consumerId(String consumerId) {
            return consumerId(Output.of(consumerId));
        }

        /**
         * @param group the acl group
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group the acl group
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param tags A list of strings associated with the consumer acl for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the consumer acl for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the consumer acl for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ConsumerAclArgs build() {
            if ($.consumerId == null) {
                throw new MissingRequiredPropertyException("ConsumerAclArgs", "consumerId");
            }
            if ($.group == null) {
                throw new MissingRequiredPropertyException("ConsumerAclArgs", "group");
            }
            return $;
        }
    }

}
