// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumerKeyAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsumerKeyAuthArgs Empty = new ConsumerKeyAuthArgs();

    /**
     * the id of the consumer to associate the credentials to
     * 
     */
    @Import(name="consumerId", required=true)
    private Output<String> consumerId;

    /**
     * @return the id of the consumer to associate the credentials to
     * 
     */
    public Output<String> consumerId() {
        return this.consumerId;
    }

    /**
     * Unique key to authenticate the client; if omitted the plugin will generate one
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Unique key to authenticate the client; if omitted the plugin will generate one
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A list of strings associated with the consumer key auth for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the consumer key auth for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConsumerKeyAuthArgs() {}

    private ConsumerKeyAuthArgs(ConsumerKeyAuthArgs $) {
        this.consumerId = $.consumerId;
        this.key = $.key;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumerKeyAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumerKeyAuthArgs $;

        public Builder() {
            $ = new ConsumerKeyAuthArgs();
        }

        public Builder(ConsumerKeyAuthArgs defaults) {
            $ = new ConsumerKeyAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerId the id of the consumer to associate the credentials to
         * 
         * @return builder
         * 
         */
        public Builder consumerId(Output<String> consumerId) {
            $.consumerId = consumerId;
            return this;
        }

        /**
         * @param consumerId the id of the consumer to associate the credentials to
         * 
         * @return builder
         * 
         */
        public Builder consumerId(String consumerId) {
            return consumerId(Output.of(consumerId));
        }

        /**
         * @param key Unique key to authenticate the client; if omitted the plugin will generate one
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Unique key to authenticate the client; if omitted the plugin will generate one
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param tags A list of strings associated with the consumer key auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the consumer key auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the consumer key auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ConsumerKeyAuthArgs build() {
            $.consumerId = Objects.requireNonNull($.consumerId, "expected parameter 'consumerId' to be non-null");
            return $;
        }
    }

}
