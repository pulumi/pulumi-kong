// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumerBasicAuthState extends com.pulumi.resources.ResourceArgs {

    public static final ConsumerBasicAuthState Empty = new ConsumerBasicAuthState();

    /**
     * the id of the consumer to be configured with basic auth
     * 
     */
    @Import(name="consumerId")
    private @Nullable Output<String> consumerId;

    /**
     * @return the id of the consumer to be configured with basic auth
     * 
     */
    public Optional<Output<String>> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * password to be used for basic auth
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return password to be used for basic auth
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * A list of strings associated with the consumer basic auth for grouping and filtering
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the consumer basic auth for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * username to be used for basic auth
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return username to be used for basic auth
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ConsumerBasicAuthState() {}

    private ConsumerBasicAuthState(ConsumerBasicAuthState $) {
        this.consumerId = $.consumerId;
        this.password = $.password;
        this.tags = $.tags;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumerBasicAuthState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumerBasicAuthState $;

        public Builder() {
            $ = new ConsumerBasicAuthState();
        }

        public Builder(ConsumerBasicAuthState defaults) {
            $ = new ConsumerBasicAuthState(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerId the id of the consumer to be configured with basic auth
         * 
         * @return builder
         * 
         */
        public Builder consumerId(@Nullable Output<String> consumerId) {
            $.consumerId = consumerId;
            return this;
        }

        /**
         * @param consumerId the id of the consumer to be configured with basic auth
         * 
         * @return builder
         * 
         */
        public Builder consumerId(String consumerId) {
            return consumerId(Output.of(consumerId));
        }

        /**
         * @param password password to be used for basic auth
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password password to be used for basic auth
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param tags A list of strings associated with the consumer basic auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the consumer basic auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the consumer basic auth for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param username username to be used for basic auth
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username username to be used for basic auth
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConsumerBasicAuthState build() {
            return $;
        }
    }

}
