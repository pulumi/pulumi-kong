// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * A list of strings associated with the Certificate for grouping and filtering
     * 
     */
    @Import(name="snis")
    private @Nullable Output<List<String>> snis;

    /**
     * @return A list of strings associated with the Certificate for grouping and filtering
     * 
     */
    public Optional<Output<List<String>>> snis() {
        return Optional.ofNullable(this.snis);
    }

    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificate = $.certificate;
        this.privateKey = $.privateKey;
        this.snis = $.snis;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param privateKey should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param snis A list of strings associated with the Certificate for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder snis(@Nullable Output<List<String>> snis) {
            $.snis = snis;
            return this;
        }

        /**
         * @param snis A list of strings associated with the Certificate for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder snis(List<String> snis) {
            return snis(Output.of(snis));
        }

        /**
         * @param snis A list of strings associated with the Certificate for grouping and filtering
         * 
         * @return builder
         * 
         */
        public Builder snis(String... snis) {
            return snis(List.of(snis));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public CertificateState build() {
            return $;
        }
    }

}
