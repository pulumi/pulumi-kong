// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kong.outputs.UpstreamHealthchecksActiveHealthy;
import com.pulumi.kong.outputs.UpstreamHealthchecksActiveUnhealthy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UpstreamHealthchecksActive {
    /**
     * @return is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * 
     */
    private @Nullable Integer concurrency;
    private @Nullable UpstreamHealthchecksActiveHealthy healthy;
    /**
     * @return is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * 
     */
    private @Nullable String httpPath;
    /**
     * @return is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI. Default `nil`.
     * 
     */
    private @Nullable String httpsSni;
    /**
     * @return check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * 
     */
    private @Nullable Boolean httpsVerifyCertificate;
    /**
     * @return is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * 
     */
    private @Nullable String type;
    private @Nullable UpstreamHealthchecksActiveUnhealthy unhealthy;

    private UpstreamHealthchecksActive() {}
    /**
     * @return is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * 
     */
    public Optional<Integer> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }
    public Optional<UpstreamHealthchecksActiveHealthy> healthy() {
        return Optional.ofNullable(this.healthy);
    }
    /**
     * @return is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * 
     */
    public Optional<String> httpPath() {
        return Optional.ofNullable(this.httpPath);
    }
    /**
     * @return is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI. Default `nil`.
     * 
     */
    public Optional<String> httpsSni() {
        return Optional.ofNullable(this.httpsSni);
    }
    /**
     * @return check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * 
     */
    public Optional<Boolean> httpsVerifyCertificate() {
        return Optional.ofNullable(this.httpsVerifyCertificate);
    }
    /**
     * @return is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<UpstreamHealthchecksActiveUnhealthy> unhealthy() {
        return Optional.ofNullable(this.unhealthy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpstreamHealthchecksActive defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer concurrency;
        private @Nullable UpstreamHealthchecksActiveHealthy healthy;
        private @Nullable String httpPath;
        private @Nullable String httpsSni;
        private @Nullable Boolean httpsVerifyCertificate;
        private @Nullable Integer timeout;
        private @Nullable String type;
        private @Nullable UpstreamHealthchecksActiveUnhealthy unhealthy;
        public Builder() {}
        public Builder(UpstreamHealthchecksActive defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrency = defaults.concurrency;
    	      this.healthy = defaults.healthy;
    	      this.httpPath = defaults.httpPath;
    	      this.httpsSni = defaults.httpsSni;
    	      this.httpsVerifyCertificate = defaults.httpsVerifyCertificate;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.unhealthy = defaults.unhealthy;
        }

        @CustomType.Setter
        public Builder concurrency(@Nullable Integer concurrency) {
            this.concurrency = concurrency;
            return this;
        }
        @CustomType.Setter
        public Builder healthy(@Nullable UpstreamHealthchecksActiveHealthy healthy) {
            this.healthy = healthy;
            return this;
        }
        @CustomType.Setter
        public Builder httpPath(@Nullable String httpPath) {
            this.httpPath = httpPath;
            return this;
        }
        @CustomType.Setter
        public Builder httpsSni(@Nullable String httpsSni) {
            this.httpsSni = httpsSni;
            return this;
        }
        @CustomType.Setter
        public Builder httpsVerifyCertificate(@Nullable Boolean httpsVerifyCertificate) {
            this.httpsVerifyCertificate = httpsVerifyCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthy(@Nullable UpstreamHealthchecksActiveUnhealthy unhealthy) {
            this.unhealthy = unhealthy;
            return this;
        }
        public UpstreamHealthchecksActive build() {
            final var o = new UpstreamHealthchecksActive();
            o.concurrency = concurrency;
            o.healthy = healthy;
            o.httpPath = httpPath;
            o.httpsSni = httpsSni;
            o.httpsVerifyCertificate = httpsVerifyCertificate;
            o.timeout = timeout;
            o.type = type;
            o.unhealthy = unhealthy;
            return o;
        }
    }
}
