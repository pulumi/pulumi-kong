// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kong.UpstreamArgs;
import com.pulumi.kong.Utilities;
import com.pulumi.kong.inputs.UpstreamState;
import com.pulumi.kong.outputs.UpstreamHealthchecks;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Certificate;
 * import com.pulumi.kong.CertificateArgs;
 * import com.pulumi.kong.Upstream;
 * import com.pulumi.kong.UpstreamArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveHealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveUnhealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveHealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveUnhealthyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var certificate = new Certificate("certificate", CertificateArgs.builder()        
 *             .certificate("""
 *     -----BEGIN CERTIFICATE-----
 *     ......
 *     -----END CERTIFICATE-----
 *             """)
 *             .privateKey("""
 *     -----BEGIN PRIVATE KEY-----
 *     .....
 *     -----END PRIVATE KEY-----
 *             """)
 *             .snis("foo.com")
 *             .build());
 * 
 *         var upstream = new Upstream("upstream", UpstreamArgs.builder()        
 *             .name("sample_upstream")
 *             .slots(10)
 *             .hashOn("header")
 *             .hashFallback("cookie")
 *             .hashOnHeader("HeaderName")
 *             .hashFallbackHeader("FallbackHeaderName")
 *             .hashOnCookie("CookieName")
 *             .hashOnCookiePath("/path")
 *             .hostHeader("x-host")
 *             .tags(            
 *                 "a",
 *                 "b")
 *             .clientCertificateId(certificate.id())
 *             .healthchecks(UpstreamHealthchecksArgs.builder()
 *                 .active(UpstreamHealthchecksActiveArgs.builder()
 *                     .type("https")
 *                     .httpPath("/status")
 *                     .timeout(10)
 *                     .concurrency(20)
 *                     .httpsVerifyCertificate(false)
 *                     .httpsSni("some.domain.com")
 *                     .healthy(UpstreamHealthchecksActiveHealthyArgs.builder()
 *                         .successes(1)
 *                         .interval(5)
 *                         .httpStatuses(                        
 *                             200,
 *                             201)
 *                         .build())
 *                     .unhealthy(UpstreamHealthchecksActiveUnhealthyArgs.builder()
 *                         .timeouts(7)
 *                         .interval(3)
 *                         .tcpFailures(1)
 *                         .httpFailures(2)
 *                         .httpStatuses(                        
 *                             500,
 *                             501)
 *                         .build())
 *                     .build())
 *                 .passive(UpstreamHealthchecksPassiveArgs.builder()
 *                     .type("https")
 *                     .healthy(UpstreamHealthchecksPassiveHealthyArgs.builder()
 *                         .successes(1)
 *                         .httpStatuses(                        
 *                             200,
 *                             201,
 *                             202)
 *                         .build())
 *                     .unhealthy(UpstreamHealthchecksPassiveUnhealthyArgs.builder()
 *                         .timeouts(3)
 *                         .tcpFailures(5)
 *                         .httpFailures(6)
 *                         .httpStatuses(                        
 *                             500,
 *                             501,
 *                             502)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * To import an upstream:
 * 
 * ```sh
 * $ pulumi import kong:index/upstream:Upstream &lt;upstream_identifier&gt; &lt;upstream_id&gt;
 * ```
 * 
 */
@ResourceType(type="kong:index/upstream:Upstream")
public class Upstream extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    @Export(name="clientCertificateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificateId;

    /**
     * @return The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    public Output<Optional<String>> clientCertificateId() {
        return Codegen.optional(this.clientCertificateId);
    }
    /**
     * is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    @Export(name="hashFallback", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashFallback;

    /**
     * @return is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    public Output<Optional<String>> hashFallback() {
        return Codegen.optional(this.hashFallback);
    }
    /**
     * is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    @Export(name="hashFallbackHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashFallbackHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashFallbackHeader() {
        return Codegen.optional(this.hashFallbackHeader);
    }
    /**
     * is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    @Export(name="hashOn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOn;

    /**
     * @return is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    public Output<Optional<String>> hashOn() {
        return Codegen.optional(this.hashOn);
    }
    /**
     * is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    @Export(name="hashOnCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnCookie;

    /**
     * @return is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashOnCookie() {
        return Codegen.optional(this.hashOnCookie);
    }
    /**
     * is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
     * * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
     * * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
     * * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
     * * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
     * * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
     * * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
     * 
     */
    @Export(name="hashOnCookiePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnCookiePath;

    /**
     * @return is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
     * * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
     * * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
     * * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
     * * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
     * * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
     * * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
     * * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
     * * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
     * * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
     * * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
     * * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
     * * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
     * * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
     * * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
     * 
     */
    public Output<Optional<String>> hashOnCookiePath() {
        return Codegen.optional(this.hashOnCookiePath);
    }
    /**
     * is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    @Export(name="hashOnHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashOnHeader() {
        return Codegen.optional(this.hashOnHeader);
    }
    @Export(name="healthchecks", refs={UpstreamHealthchecks.class}, tree="[0]")
    private Output<UpstreamHealthchecks> healthchecks;

    public Output<UpstreamHealthchecks> healthchecks() {
        return this.healthchecks;
    }
    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    @Export(name="hostHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostHeader;

    /**
     * @return The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    public Output<Optional<String>> hostHeader() {
        return Codegen.optional(this.hostHeader);
    }
    /**
     * is a hostname, which must be equal to the host of a Service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return is a hostname, which must be equal to the host of a Service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    @Export(name="slots", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> slots;

    /**
     * @return is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    public Output<Optional<Integer>> slots() {
        return Codegen.optional(this.slots);
    }
    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Upstream(String name) {
        this(name, UpstreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Upstream(String name, @Nullable UpstreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Upstream(String name, @Nullable UpstreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/upstream:Upstream", name, args == null ? UpstreamArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Upstream(String name, Output<String> id, @Nullable UpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/upstream:Upstream", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Upstream get(String name, Output<String> id, @Nullable UpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Upstream(name, id, state, options);
    }
}
