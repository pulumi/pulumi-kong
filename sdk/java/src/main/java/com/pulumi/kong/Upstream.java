// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kong.UpstreamArgs;
import com.pulumi.kong.Utilities;
import com.pulumi.kong.inputs.UpstreamState;
import com.pulumi.kong.outputs.UpstreamHealthchecks;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kong.Certificate;
 * import com.pulumi.kong.CertificateArgs;
 * import com.pulumi.kong.Upstream;
 * import com.pulumi.kong.UpstreamArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveHealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksActiveUnhealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveHealthyArgs;
 * import com.pulumi.kong.inputs.UpstreamHealthchecksPassiveUnhealthyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var certificate = new Certificate(&#34;certificate&#34;, CertificateArgs.builder()        
 *             .certificate(&#34;&#34;&#34;
 *     -----BEGIN CERTIFICATE-----
 *     ......
 *     -----END CERTIFICATE-----
 *             &#34;&#34;&#34;)
 *             .privateKey(&#34;&#34;&#34;
 *     -----BEGIN PRIVATE KEY-----
 *     .....
 *     -----END PRIVATE KEY-----
 *             &#34;&#34;&#34;)
 *             .snis(&#34;foo.com&#34;)
 *             .build());
 * 
 *         var upstream = new Upstream(&#34;upstream&#34;, UpstreamArgs.builder()        
 *             .slots(10)
 *             .hashOn(&#34;header&#34;)
 *             .hashFallback(&#34;cookie&#34;)
 *             .hashOnHeader(&#34;HeaderName&#34;)
 *             .hashFallbackHeader(&#34;FallbackHeaderName&#34;)
 *             .hashOnCookie(&#34;CookieName&#34;)
 *             .hashOnCookiePath(&#34;/path&#34;)
 *             .hostHeader(&#34;x-host&#34;)
 *             .tags(            
 *                 &#34;a&#34;,
 *                 &#34;b&#34;)
 *             .clientCertificateId(certificate.id())
 *             .healthchecks(UpstreamHealthchecksArgs.builder()
 *                 .active(UpstreamHealthchecksActiveArgs.builder()
 *                     .type(&#34;https&#34;)
 *                     .httpPath(&#34;/status&#34;)
 *                     .timeout(10)
 *                     .concurrency(20)
 *                     .httpsVerifyCertificate(false)
 *                     .httpsSni(&#34;some.domain.com&#34;)
 *                     .healthy(UpstreamHealthchecksActiveHealthyArgs.builder()
 *                         .successes(1)
 *                         .interval(5)
 *                         .httpStatuses(                        
 *                             200,
 *                             201)
 *                         .build())
 *                     .unhealthy(UpstreamHealthchecksActiveUnhealthyArgs.builder()
 *                         .timeouts(7)
 *                         .interval(3)
 *                         .tcpFailures(1)
 *                         .httpFailures(2)
 *                         .httpStatuses(                        
 *                             500,
 *                             501)
 *                         .build())
 *                     .build())
 *                 .passive(UpstreamHealthchecksPassiveArgs.builder()
 *                     .type(&#34;https&#34;)
 *                     .healthy(UpstreamHealthchecksPassiveHealthyArgs.builder()
 *                         .successes(1)
 *                         .httpStatuses(                        
 *                             200,
 *                             201,
 *                             202)
 *                         .build())
 *                     .unhealthy(UpstreamHealthchecksPassiveUnhealthyArgs.builder()
 *                         .timeouts(3)
 *                         .tcpFailures(5)
 *                         .httpFailures(6)
 *                         .httpStatuses(                        
 *                             500,
 *                             501,
 *                             502)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * To import an upstream
 * 
 * ```sh
 *  $ pulumi import kong:index/upstream:Upstream &lt;upstream_identifier&gt; &lt;upstream_id&gt;
 * ```
 * 
 */
@ResourceType(type="kong:index/upstream:Upstream")
public class Upstream extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    @Export(name="clientCertificateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificateId;

    /**
     * @return The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    public Output<Optional<String>> clientCertificateId() {
        return Codegen.optional(this.clientCertificateId);
    }
    /**
     * is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    @Export(name="hashFallback", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashFallback;

    /**
     * @return is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    public Output<Optional<String>> hashFallback() {
        return Codegen.optional(this.hashFallback);
    }
    /**
     * is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    @Export(name="hashFallbackHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashFallbackHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashFallbackHeader() {
        return Codegen.optional(this.hashFallbackHeader);
    }
    /**
     * is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    @Export(name="hashOn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOn;

    /**
     * @return is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    public Output<Optional<String>> hashOn() {
        return Codegen.optional(this.hashOn);
    }
    /**
     * is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    @Export(name="hashOnCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnCookie;

    /**
     * @return is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashOnCookie() {
        return Codegen.optional(this.hashOnCookie);
    }
    /**
     * is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * 
     */
    @Export(name="hashOnCookiePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnCookiePath;

    /**
     * @return is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * 
     */
    public Output<Optional<String>> hashOnCookiePath() {
        return Codegen.optional(this.hashOnCookiePath);
    }
    /**
     * is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    @Export(name="hashOnHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashOnHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    public Output<Optional<String>> hashOnHeader() {
        return Codegen.optional(this.hashOnHeader);
    }
    @Export(name="healthchecks", refs={UpstreamHealthchecks.class}, tree="[0]")
    private Output<UpstreamHealthchecks> healthchecks;

    public Output<UpstreamHealthchecks> healthchecks() {
        return this.healthchecks;
    }
    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    @Export(name="hostHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostHeader;

    /**
     * @return The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    public Output<Optional<String>> hostHeader() {
        return Codegen.optional(this.hostHeader);
    }
    /**
     * is a hostname, which must be equal to the host of a Service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return is a hostname, which must be equal to the host of a Service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    @Export(name="slots", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> slots;

    /**
     * @return is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    public Output<Optional<Integer>> slots() {
        return Codegen.optional(this.slots);
    }
    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Upstream(String name) {
        this(name, UpstreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Upstream(String name, @Nullable UpstreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Upstream(String name, @Nullable UpstreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/upstream:Upstream", name, args == null ? UpstreamArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Upstream(String name, Output<String> id, @Nullable UpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kong:index/upstream:Upstream", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Upstream get(String name, Output<String> id, @Nullable UpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Upstream(name, id, state, options);
    }
}
