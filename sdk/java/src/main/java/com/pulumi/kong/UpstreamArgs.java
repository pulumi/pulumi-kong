// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kong;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kong.inputs.UpstreamHealthchecksArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UpstreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpstreamArgs Empty = new UpstreamArgs();

    /**
     * The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    @Import(name="clientCertificateId")
    private @Nullable Output<String> clientCertificateId;

    /**
     * @return The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
     * 
     */
    public Optional<Output<String>> clientCertificateId() {
        return Optional.ofNullable(this.clientCertificateId);
    }

    /**
     * is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    @Import(name="hashFallback")
    private @Nullable Output<String> hashFallback;

    /**
     * @return is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> hashFallback() {
        return Optional.ofNullable(this.hashFallback);
    }

    /**
     * is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    @Import(name="hashFallbackHeader")
    private @Nullable Output<String> hashFallbackHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
     * 
     */
    public Optional<Output<String>> hashFallbackHeader() {
        return Optional.ofNullable(this.hashFallbackHeader);
    }

    /**
     * is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    @Import(name="hashOn")
    private @Nullable Output<String> hashOn;

    /**
     * @return is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> hashOn() {
        return Optional.ofNullable(this.hashOn);
    }

    /**
     * is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    @Import(name="hashOnCookie")
    private @Nullable Output<String> hashOnCookie;

    /**
     * @return is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
     * 
     */
    public Optional<Output<String>> hashOnCookie() {
        return Optional.ofNullable(this.hashOnCookie);
    }

    /**
     * is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * 
     */
    @Import(name="hashOnCookiePath")
    private @Nullable Output<String> hashOnCookiePath;

    /**
     * @return is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
     * 
     */
    public Optional<Output<String>> hashOnCookiePath() {
        return Optional.ofNullable(this.hashOnCookiePath);
    }

    /**
     * is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    @Import(name="hashOnHeader")
    private @Nullable Output<String> hashOnHeader;

    /**
     * @return is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
     * 
     */
    public Optional<Output<String>> hashOnHeader() {
        return Optional.ofNullable(this.hashOnHeader);
    }

    @Import(name="healthchecks")
    private @Nullable Output<UpstreamHealthchecksArgs> healthchecks;

    public Optional<Output<UpstreamHealthchecksArgs>> healthchecks() {
        return Optional.ofNullable(this.healthchecks);
    }

    /**
     * The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    @Import(name="hostHeader")
    private @Nullable Output<String> hostHeader;

    /**
     * @return The hostname to be used as Host header when proxying requests through Kong.
     * 
     */
    public Optional<Output<String>> hostHeader() {
        return Optional.ofNullable(this.hostHeader);
    }

    /**
     * is a hostname, which must be equal to the host of a Service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return is a hostname, which must be equal to the host of a Service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    @Import(name="slots")
    private @Nullable Output<Integer> slots;

    /**
     * @return is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
     * 
     */
    public Optional<Output<Integer>> slots() {
        return Optional.ofNullable(this.slots);
    }

    /**
     * A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings associated with the Upstream for grouping and filtering.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private UpstreamArgs() {}

    private UpstreamArgs(UpstreamArgs $) {
        this.clientCertificateId = $.clientCertificateId;
        this.hashFallback = $.hashFallback;
        this.hashFallbackHeader = $.hashFallbackHeader;
        this.hashOn = $.hashOn;
        this.hashOnCookie = $.hashOnCookie;
        this.hashOnCookiePath = $.hashOnCookiePath;
        this.hashOnHeader = $.hashOnHeader;
        this.healthchecks = $.healthchecks;
        this.hostHeader = $.hostHeader;
        this.name = $.name;
        this.slots = $.slots;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpstreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpstreamArgs $;

        public Builder() {
            $ = new UpstreamArgs();
        }

        public Builder(UpstreamArgs defaults) {
            $ = new UpstreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificateId The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(@Nullable Output<String> clientCertificateId) {
            $.clientCertificateId = clientCertificateId;
            return this;
        }

        /**
         * @param clientCertificateId The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(String clientCertificateId) {
            return clientCertificateId(Output.of(clientCertificateId));
        }

        /**
         * @param hashFallback is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder hashFallback(@Nullable Output<String> hashFallback) {
            $.hashFallback = hashFallback;
            return this;
        }

        /**
         * @param hashFallback is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder hashFallback(String hashFallback) {
            return hashFallback(Output.of(hashFallback));
        }

        /**
         * @param hashFallbackHeader is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashFallbackHeader(@Nullable Output<String> hashFallbackHeader) {
            $.hashFallbackHeader = hashFallbackHeader;
            return this;
        }

        /**
         * @param hashFallbackHeader is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashFallbackHeader(String hashFallbackHeader) {
            return hashFallbackHeader(Output.of(hashFallbackHeader));
        }

        /**
         * @param hashOn is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder hashOn(@Nullable Output<String> hashOn) {
            $.hashOn = hashOn;
            return this;
        }

        /**
         * @param hashOn is a hashing input type: ` none  `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder hashOn(String hashOn) {
            return hashOn(Output.of(hashOn));
        }

        /**
         * @param hashOnCookie is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnCookie(@Nullable Output<String> hashOnCookie) {
            $.hashOnCookie = hashOnCookie;
            return this;
        }

        /**
         * @param hashOnCookie is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnCookie(String hashOnCookie) {
            return hashOnCookie(Output.of(hashOnCookie));
        }

        /**
         * @param hashOnCookiePath is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnCookiePath(@Nullable Output<String> hashOnCookiePath) {
            $.hashOnCookiePath = hashOnCookiePath;
            return this;
        }

        /**
         * @param hashOnCookiePath is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnCookiePath(String hashOnCookiePath) {
            return hashOnCookiePath(Output.of(hashOnCookiePath));
        }

        /**
         * @param hashOnHeader is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnHeader(@Nullable Output<String> hashOnHeader) {
            $.hashOnHeader = hashOnHeader;
            return this;
        }

        /**
         * @param hashOnHeader is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
         * 
         * @return builder
         * 
         */
        public Builder hashOnHeader(String hashOnHeader) {
            return hashOnHeader(Output.of(hashOnHeader));
        }

        public Builder healthchecks(@Nullable Output<UpstreamHealthchecksArgs> healthchecks) {
            $.healthchecks = healthchecks;
            return this;
        }

        public Builder healthchecks(UpstreamHealthchecksArgs healthchecks) {
            return healthchecks(Output.of(healthchecks));
        }

        /**
         * @param hostHeader The hostname to be used as Host header when proxying requests through Kong.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(@Nullable Output<String> hostHeader) {
            $.hostHeader = hostHeader;
            return this;
        }

        /**
         * @param hostHeader The hostname to be used as Host header when proxying requests through Kong.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(String hostHeader) {
            return hostHeader(Output.of(hostHeader));
        }

        /**
         * @param name is a hostname, which must be equal to the host of a Service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name is a hostname, which must be equal to the host of a Service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param slots is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
         * 
         * @return builder
         * 
         */
        public Builder slots(@Nullable Output<Integer> slots) {
            $.slots = slots;
            return this;
        }

        /**
         * @param slots is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
         * 
         * @return builder
         * 
         */
        public Builder slots(Integer slots) {
            return slots(Output.of(slots));
        }

        /**
         * @param tags A list of strings associated with the Upstream for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings associated with the Upstream for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings associated with the Upstream for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public UpstreamArgs build() {
            return $;
        }
    }

}
