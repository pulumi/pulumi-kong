// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Kong.Certificate("certificate", new()
    ///     {
    ///         Cert = @"    -----BEGIN CERTIFICATE-----
    ///     ......
    ///     -----END CERTIFICATE-----
    /// ",
    ///         PrivateKey = @"    -----BEGIN PRIVATE KEY-----
    ///     .....
    ///     -----END PRIVATE KEY-----
    /// ",
    ///         Snis = new[]
    ///         {
    ///             "foo.com",
    ///         },
    ///     });
    /// 
    ///     var upstream = new Kong.Upstream("upstream", new()
    ///     {
    ///         Slots = 10,
    ///         HashOn = "header",
    ///         HashFallback = "cookie",
    ///         HashOnHeader = "HeaderName",
    ///         HashFallbackHeader = "FallbackHeaderName",
    ///         HashOnCookie = "CookieName",
    ///         HashOnCookiePath = "/path",
    ///         HostHeader = "x-host",
    ///         Tags = new[]
    ///         {
    ///             "a",
    ///             "b",
    ///         },
    ///         ClientCertificateId = certificate.Id,
    ///         Healthchecks = new Kong.Inputs.UpstreamHealthchecksArgs
    ///         {
    ///             Active = new Kong.Inputs.UpstreamHealthchecksActiveArgs
    ///             {
    ///                 Type = "https",
    ///                 HttpPath = "/status",
    ///                 Timeout = 10,
    ///                 Concurrency = 20,
    ///                 HttpsVerifyCertificate = false,
    ///                 HttpsSni = "some.domain.com",
    ///                 Healthy = new Kong.Inputs.UpstreamHealthchecksActiveHealthyArgs
    ///                 {
    ///                     Successes = 1,
    ///                     Interval = 5,
    ///                     HttpStatuses = new[]
    ///                     {
    ///                         200,
    ///                         201,
    ///                     },
    ///                 },
    ///                 Unhealthy = new Kong.Inputs.UpstreamHealthchecksActiveUnhealthyArgs
    ///                 {
    ///                     Timeouts = 7,
    ///                     Interval = 3,
    ///                     TcpFailures = 1,
    ///                     HttpFailures = 2,
    ///                     HttpStatuses = new[]
    ///                     {
    ///                         500,
    ///                         501,
    ///                     },
    ///                 },
    ///             },
    ///             Passive = new Kong.Inputs.UpstreamHealthchecksPassiveArgs
    ///             {
    ///                 Type = "https",
    ///                 Healthy = new Kong.Inputs.UpstreamHealthchecksPassiveHealthyArgs
    ///                 {
    ///                     Successes = 1,
    ///                     HttpStatuses = new[]
    ///                     {
    ///                         200,
    ///                         201,
    ///                         202,
    ///                     },
    ///                 },
    ///                 Unhealthy = new Kong.Inputs.UpstreamHealthchecksPassiveUnhealthyArgs
    ///                 {
    ///                     Timeouts = 3,
    ///                     TcpFailures = 5,
    ///                     HttpFailures = 6,
    ///                     HttpStatuses = new[]
    ///                     {
    ///                         500,
    ///                         501,
    ///                         502,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// To import an upstream
    /// 
    /// ```sh
    ///  $ pulumi import kong:index/upstream:Upstream &lt;upstream_identifier&gt; &lt;upstream_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/upstream:Upstream")]
    public partial class Upstream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Output("clientCertificateId")]
        public Output<string?> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Output("hashFallback")]
        public Output<string?> HashFallback { get; private set; } = null!;

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Output("hashFallbackHeader")]
        public Output<string?> HashFallbackHeader { get; private set; } = null!;

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Output("hashOn")]
        public Output<string?> HashOn { get; private set; } = null!;

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Output("hashOnCookie")]
        public Output<string?> HashOnCookie { get; private set; } = null!;

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// </summary>
        [Output("hashOnCookiePath")]
        public Output<string?> HashOnCookiePath { get; private set; } = null!;

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Output("hashOnHeader")]
        public Output<string?> HashOnHeader { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<Outputs.UpstreamHealthchecks> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Output("hostHeader")]
        public Output<string?> HostHeader { get; private set; } = null!;

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Output("slots")]
        public Output<int?> Slots { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Upstream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Upstream(string name, UpstreamArgs? args = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, args ?? new UpstreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Upstream(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Upstream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Upstream Get(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Upstream(name, id, state, options);
        }
    }

    public sealed class UpstreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public UpstreamArgs()
        {
        }
        public static new UpstreamArgs Empty => new UpstreamArgs();
    }

    public sealed class UpstreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksGetArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public UpstreamState()
        {
        }
        public static new UpstreamState Empty => new UpstreamState();
    }
}
