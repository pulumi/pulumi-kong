// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var certificate = new Kong.Certificate("certificate", new Kong.CertificateArgs
    ///         {
    ///             Certificate = @"    -----BEGIN CERTIFICATE-----
    ///     ......
    ///     -----END CERTIFICATE-----
    /// ",
    ///             PrivateKey = @"    -----BEGIN PRIVATE KEY-----
    ///     .....
    ///     -----END PRIVATE KEY-----
    /// ",
    ///             Snis = 
    ///             {
    ///                 "foo.com",
    ///             },
    ///         });
    ///         var upstream = new Kong.Upstream("upstream", new Kong.UpstreamArgs
    ///         {
    ///             Slots = 10,
    ///             HashOn = "header",
    ///             HashFallback = "cookie",
    ///             HashOnHeader = "HeaderName",
    ///             HashFallbackHeader = "FallbackHeaderName",
    ///             HashOnCookie = "CookieName",
    ///             HashOnCookiePath = "/path",
    ///             HostHeader = "x-host",
    ///             Tags = 
    ///             {
    ///                 "a",
    ///                 "b",
    ///             },
    ///             ClientCertificateId = certificate.Id,
    ///             Healthchecks = new Kong.Inputs.UpstreamHealthchecksArgs
    ///             {
    ///                 Active = new Kong.Inputs.UpstreamHealthchecksActiveArgs
    ///                 {
    ///                     Type = "https",
    ///                     HttpPath = "/status",
    ///                     Timeout = 10,
    ///                     Concurrency = 20,
    ///                     HttpsVerifyCertificate = false,
    ///                     HttpsSni = "some.domain.com",
    ///                     Healthy = new Kong.Inputs.UpstreamHealthchecksActiveHealthyArgs
    ///                     {
    ///                         Successes = 1,
    ///                         Interval = 5,
    ///                         HttpStatuses = 
    ///                         {
    ///                             200,
    ///                             201,
    ///                         },
    ///                     },
    ///                     Unhealthy = new Kong.Inputs.UpstreamHealthchecksActiveUnhealthyArgs
    ///                     {
    ///                         Timeouts = 7,
    ///                         Interval = 3,
    ///                         TcpFailures = 1,
    ///                         HttpFailures = 2,
    ///                         HttpStatuses = 
    ///                         {
    ///                             500,
    ///                             501,
    ///                         },
    ///                     },
    ///                 },
    ///                 Passive = new Kong.Inputs.UpstreamHealthchecksPassiveArgs
    ///                 {
    ///                     Type = "https",
    ///                     Healthy = new Kong.Inputs.UpstreamHealthchecksPassiveHealthyArgs
    ///                     {
    ///                         Successes = 1,
    ///                         HttpStatuses = 
    ///                         {
    ///                             200,
    ///                             201,
    ///                             202,
    ///                         },
    ///                     },
    ///                     Unhealthy = new Kong.Inputs.UpstreamHealthchecksPassiveUnhealthyArgs
    ///                     {
    ///                         Timeouts = 3,
    ///                         TcpFailures = 5,
    ///                         HttpFailures = 6,
    ///                         HttpStatuses = 
    ///                         {
    ///                             500,
    ///                             501,
    ///                             502,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// To import an upstream
    /// 
    /// ```sh
    ///  $ pulumi import kong:index/upstream:Upstream &lt;upstream_identifier&gt; &lt;upstream_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/upstream:Upstream")]
    public partial class Upstream : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Output("clientCertificateId")]
        public Output<string?> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Output("hashFallback")]
        public Output<string?> HashFallback { get; private set; } = null!;

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Output("hashFallbackHeader")]
        public Output<string?> HashFallbackHeader { get; private set; } = null!;

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Output("hashOn")]
        public Output<string?> HashOn { get; private set; } = null!;

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Output("hashOnCookie")]
        public Output<string?> HashOnCookie { get; private set; } = null!;

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
        /// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
        /// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
        /// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
        /// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
        /// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
        /// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
        /// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
        /// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
        /// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
        /// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
        /// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
        /// </summary>
        [Output("hashOnCookiePath")]
        public Output<string?> HashOnCookiePath { get; private set; } = null!;

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Output("hashOnHeader")]
        public Output<string?> HashOnHeader { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<Outputs.UpstreamHealthchecks> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Output("hostHeader")]
        public Output<string?> HostHeader { get; private set; } = null!;

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Output("slots")]
        public Output<int?> Slots { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Upstream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Upstream(string name, UpstreamArgs? args = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, args ?? new UpstreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Upstream(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Upstream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Upstream Get(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Upstream(name, id, state, options);
        }
    }

    public sealed class UpstreamArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
        /// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
        /// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
        /// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
        /// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
        /// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
        /// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
        /// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
        /// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
        /// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
        /// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
        /// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public UpstreamArgs()
        {
        }
    }

    public sealed class UpstreamState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client certificate to use (from certificate resource) while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// is a hashing input type if the primary `hash_on` does not return a hash (eg. header is missing, or no consumer identified). One of: `none`, `consumer`, `ip`, `header`, or `cookie`. Not available if `hash_on` is set to `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// is a hashing input type: `none `(resulting in a weighted*round*robin scheme with no hashing), `consumer`, `ip`, `header`, or `cookie`. Defaults to `none`.
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// is a cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response. Default `nil`.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// is a cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Defaults to `/`.
        /// * `healthchecks.active.type` - (Optional) is a active health check type. HTTP or HTTPS, or just attempt a TCP connection. Possible values are `tcp`, `http` or `https`. Defaults to `http`.
        /// * `healthchecks.active.timeout` - (Optional) is a socket timeout for active health checks (in seconds). Defaults to `1`.
        /// * `healthchecks.active.concurrency` - (Optional) is a number of targets to check concurrently in active health checks. Defaults to `10`.
        /// * `healthchecks.active.http_path` - (Optional) is a path to use in GET HTTP request to run as a probe on active health checks. Defaults to `/`.
        /// * `healthchecks.active.https_verify_certificate` - (Optional) check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to `true`.
        /// * `healthchecks.active.https_sni` - (Optional) is the hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target hostâ€™s certificate can be verified with the proper SNI. Default `nil`.
        /// * `healthchecks.active.healthy.interval` - (Optional) is an interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.healthy.successes` - (Optional) is a number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy. Defaults to `0`.
        /// * `healthchecks.active.healthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to `[200, 302]`.
        /// * `healthchecks.active.unhealthy.interval` - (Optional) is an interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_failures` - (Optional) is a number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.timeouts` - (Optional) is a number of timeouts in active probes to consider a target unhealthy. Defaults to `0`.
        /// * `healthchecks.active.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to `[429, 404, 500, 501, 502, 503, 504, 505]`.
        /// * `healthchecks.passive.type` - (Optional) is a passive health check type. Interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Possible values are `tcp`, `http` or `https` (in passive checks, `http` and `https` options are equivalent.). Defaults to `http`.
        /// * `healthchecks.passive.healthy.successes` - (Optional) is a Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.healthy.http_statuses` - (Optional) is an array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]`.
        /// * `healthchecks.passive.unhealthy.tcp_failures` - (Optional) is a number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_failures` - (Optional) is a number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.timeouts` - (Optional) is a number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to `0`.
        /// * `healthchecks.passive.unhealthy.http_statuses` - (Optional) is an array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to `[429, 500, 503]`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// is a header name to take the value from as hash input. Only required when `hash_on` is set to `header`. Default `nil`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksGetArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as Host header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// is a hostname, which must be equal to the host of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// is the number of slots in the load balancer algorithm (10*65536, defaults to 10000).
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public UpstreamState()
        {
        }
    }
}
