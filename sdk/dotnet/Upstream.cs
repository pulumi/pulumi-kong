// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    public partial class Upstream : Pulumi.CustomResource
    {
        [Output("hashFallback")]
        public Output<string?> HashFallback { get; private set; } = null!;

        [Output("hashFallbackHeader")]
        public Output<string?> HashFallbackHeader { get; private set; } = null!;

        [Output("hashOn")]
        public Output<string?> HashOn { get; private set; } = null!;

        [Output("hashOnCookie")]
        public Output<string?> HashOnCookie { get; private set; } = null!;

        [Output("hashOnCookiePath")]
        public Output<string?> HashOnCookiePath { get; private set; } = null!;

        [Output("hashOnHeader")]
        public Output<string?> HashOnHeader { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<Outputs.UpstreamHealthchecks> Healthchecks { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("slots")]
        public Output<int?> Slots { get; private set; } = null!;


        /// <summary>
        /// Create a Upstream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Upstream(string name, UpstreamArgs? args = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Upstream(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/upstream:Upstream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Upstream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Upstream Get(string name, Input<string> id, UpstreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Upstream(name, id, state, options);
        }
    }

    public sealed class UpstreamArgs : Pulumi.ResourceArgs
    {
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksArgs>? Healthchecks { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slots")]
        public Input<int>? Slots { get; set; }

        public UpstreamArgs()
        {
        }
    }

    public sealed class UpstreamState : Pulumi.ResourceArgs
    {
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.UpstreamHealthchecksGetArgs>? Healthchecks { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slots")]
        public Input<int>? Slots { get; set; }

        public UpstreamState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class UpstreamHealthchecksActiveArgs : Pulumi.ResourceArgs
    {
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        [Input("healthy")]
        public Input<UpstreamHealthchecksActiveHealthyArgs>? Healthy { get; set; }

        [Input("httpPath")]
        public Input<string>? HttpPath { get; set; }

        [Input("httpsSni")]
        public Input<string>? HttpsSni { get; set; }

        [Input("httpsVerifyCertificate")]
        public Input<bool>? HttpsVerifyCertificate { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("unhealthy")]
        public Input<UpstreamHealthchecksActiveUnhealthyArgs>? Unhealthy { get; set; }

        public UpstreamHealthchecksActiveArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksActiveGetArgs : Pulumi.ResourceArgs
    {
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        [Input("healthy")]
        public Input<UpstreamHealthchecksActiveHealthyGetArgs>? Healthy { get; set; }

        [Input("httpPath")]
        public Input<string>? HttpPath { get; set; }

        [Input("httpsSni")]
        public Input<string>? HttpsSni { get; set; }

        [Input("httpsVerifyCertificate")]
        public Input<bool>? HttpsVerifyCertificate { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("unhealthy")]
        public Input<UpstreamHealthchecksActiveUnhealthyGetArgs>? Unhealthy { get; set; }

        public UpstreamHealthchecksActiveGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksActiveHealthyArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("successes")]
        public Input<int>? Successes { get; set; }

        public UpstreamHealthchecksActiveHealthyArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksActiveHealthyGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("successes")]
        public Input<int>? Successes { get; set; }

        public UpstreamHealthchecksActiveHealthyGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksActiveUnhealthyArgs : Pulumi.ResourceArgs
    {
        [Input("httpFailures")]
        public Input<int>? HttpFailures { get; set; }

        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("tcpFailures")]
        public Input<int>? TcpFailures { get; set; }

        [Input("timeouts")]
        public Input<int>? Timeouts { get; set; }

        public UpstreamHealthchecksActiveUnhealthyArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksActiveUnhealthyGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpFailures")]
        public Input<int>? HttpFailures { get; set; }

        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("tcpFailures")]
        public Input<int>? TcpFailures { get; set; }

        [Input("timeouts")]
        public Input<int>? Timeouts { get; set; }

        public UpstreamHealthchecksActiveUnhealthyGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksArgs : Pulumi.ResourceArgs
    {
        [Input("active")]
        public Input<UpstreamHealthchecksActiveArgs>? Active { get; set; }

        [Input("passive")]
        public Input<UpstreamHealthchecksPassiveArgs>? Passive { get; set; }

        public UpstreamHealthchecksArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksGetArgs : Pulumi.ResourceArgs
    {
        [Input("active")]
        public Input<UpstreamHealthchecksActiveGetArgs>? Active { get; set; }

        [Input("passive")]
        public Input<UpstreamHealthchecksPassiveGetArgs>? Passive { get; set; }

        public UpstreamHealthchecksGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveArgs : Pulumi.ResourceArgs
    {
        [Input("healthy")]
        public Input<UpstreamHealthchecksPassiveHealthyArgs>? Healthy { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("unhealthy")]
        public Input<UpstreamHealthchecksPassiveUnhealthyArgs>? Unhealthy { get; set; }

        public UpstreamHealthchecksPassiveArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveGetArgs : Pulumi.ResourceArgs
    {
        [Input("healthy")]
        public Input<UpstreamHealthchecksPassiveHealthyGetArgs>? Healthy { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("unhealthy")]
        public Input<UpstreamHealthchecksPassiveUnhealthyGetArgs>? Unhealthy { get; set; }

        public UpstreamHealthchecksPassiveGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveHealthyArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("successes")]
        public Input<int>? Successes { get; set; }

        public UpstreamHealthchecksPassiveHealthyArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveHealthyGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("successes")]
        public Input<int>? Successes { get; set; }

        public UpstreamHealthchecksPassiveHealthyGetArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveUnhealthyArgs : Pulumi.ResourceArgs
    {
        [Input("httpFailures")]
        public Input<int>? HttpFailures { get; set; }

        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("tcpFailures")]
        public Input<int>? TcpFailures { get; set; }

        [Input("timeouts")]
        public Input<int>? Timeouts { get; set; }

        public UpstreamHealthchecksPassiveUnhealthyArgs()
        {
        }
    }

    public sealed class UpstreamHealthchecksPassiveUnhealthyGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpFailures")]
        public Input<int>? HttpFailures { get; set; }

        [Input("httpStatuses")]
        private InputList<int>? _httpStatuses;
        public InputList<int> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<int>());
            set => _httpStatuses = value;
        }

        [Input("tcpFailures")]
        public Input<int>? TcpFailures { get; set; }

        [Input("timeouts")]
        public Input<int>? Timeouts { get; set; }

        public UpstreamHealthchecksPassiveUnhealthyGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class UpstreamHealthchecks
    {
        public readonly UpstreamHealthchecksActive Active;
        public readonly UpstreamHealthchecksPassive Passive;

        [OutputConstructor]
        private UpstreamHealthchecks(
            UpstreamHealthchecksActive active,
            UpstreamHealthchecksPassive passive)
        {
            Active = active;
            Passive = passive;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksActive
    {
        public readonly int? Concurrency;
        public readonly UpstreamHealthchecksActiveHealthy Healthy;
        public readonly string? HttpPath;
        public readonly string? HttpsSni;
        public readonly bool? HttpsVerifyCertificate;
        public readonly int? Timeout;
        public readonly string? Type;
        public readonly UpstreamHealthchecksActiveUnhealthy Unhealthy;

        [OutputConstructor]
        private UpstreamHealthchecksActive(
            int? concurrency,
            UpstreamHealthchecksActiveHealthy healthy,
            string? httpPath,
            string? httpsSni,
            bool? httpsVerifyCertificate,
            int? timeout,
            string? type,
            UpstreamHealthchecksActiveUnhealthy unhealthy)
        {
            Concurrency = concurrency;
            Healthy = healthy;
            HttpPath = httpPath;
            HttpsSni = httpsSni;
            HttpsVerifyCertificate = httpsVerifyCertificate;
            Timeout = timeout;
            Type = type;
            Unhealthy = unhealthy;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksActiveHealthy
    {
        public readonly ImmutableArray<int> HttpStatuses;
        public readonly int Interval;
        public readonly int Successes;

        [OutputConstructor]
        private UpstreamHealthchecksActiveHealthy(
            ImmutableArray<int> httpStatuses,
            int interval,
            int successes)
        {
            HttpStatuses = httpStatuses;
            Interval = interval;
            Successes = successes;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksActiveUnhealthy
    {
        public readonly int HttpFailures;
        public readonly ImmutableArray<int> HttpStatuses;
        public readonly int Interval;
        public readonly int TcpFailures;
        public readonly int Timeouts;

        [OutputConstructor]
        private UpstreamHealthchecksActiveUnhealthy(
            int httpFailures,
            ImmutableArray<int> httpStatuses,
            int interval,
            int tcpFailures,
            int timeouts)
        {
            HttpFailures = httpFailures;
            HttpStatuses = httpStatuses;
            Interval = interval;
            TcpFailures = tcpFailures;
            Timeouts = timeouts;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksPassive
    {
        public readonly UpstreamHealthchecksPassiveHealthy Healthy;
        public readonly string? Type;
        public readonly UpstreamHealthchecksPassiveUnhealthy Unhealthy;

        [OutputConstructor]
        private UpstreamHealthchecksPassive(
            UpstreamHealthchecksPassiveHealthy healthy,
            string? type,
            UpstreamHealthchecksPassiveUnhealthy unhealthy)
        {
            Healthy = healthy;
            Type = type;
            Unhealthy = unhealthy;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksPassiveHealthy
    {
        public readonly ImmutableArray<int> HttpStatuses;
        public readonly int? Successes;

        [OutputConstructor]
        private UpstreamHealthchecksPassiveHealthy(
            ImmutableArray<int> httpStatuses,
            int? successes)
        {
            HttpStatuses = httpStatuses;
            Successes = successes;
        }
    }

    [OutputType]
    public sealed class UpstreamHealthchecksPassiveUnhealthy
    {
        public readonly int? HttpFailures;
        public readonly ImmutableArray<int> HttpStatuses;
        public readonly int? TcpFailures;
        public readonly int? Timeouts;

        [OutputConstructor]
        private UpstreamHealthchecksPassiveUnhealthy(
            int? httpFailures,
            ImmutableArray<int> httpStatuses,
            int? tcpFailures,
            int? timeouts)
        {
            HttpFailures = httpFailures;
            HttpStatuses = httpStatuses;
            TcpFailures = tcpFailures;
            Timeouts = timeouts;
        }
    }
    }
}
