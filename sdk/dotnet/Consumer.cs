// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## # kong.Consumer
    /// 
    /// The consumer resource maps directly onto the json for creating a Consumer in Kong.  For more information on the parameters [see the Kong Consumer create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#consumer-object).
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var consumer = new Kong.Consumer("consumer", new()
    ///     {
    ///         CustomId = "123",
    ///         Tags = new[]
    ///         {
    ///             "mySuperTag",
    ///         },
    ///         Username = "User1",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// To import a consumer:
    /// 
    /// ```sh
    /// $ pulumi import kong:index/consumer:Consumer &lt;consumer_identifier&gt; &lt;consumer_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/consumer:Consumer")]
    public partial class Consumer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A custom id for the consumer, you must set either the username or custom_id
        /// </summary>
        [Output("customId")]
        public Output<string?> CustomId { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the Consumer for grouping and filtering
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The username to use, you must set either the username or custom_id
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Consumer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Consumer(string name, ConsumerArgs? args = null, CustomResourceOptions? options = null)
            : base("kong:index/consumer:Consumer", name, args ?? new ConsumerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Consumer(string name, Input<string> id, ConsumerState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/consumer:Consumer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Consumer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Consumer Get(string name, Input<string> id, ConsumerState? state = null, CustomResourceOptions? options = null)
        {
            return new Consumer(name, id, state, options);
        }
    }

    public sealed class ConsumerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A custom id for the consumer, you must set either the username or custom_id
        /// </summary>
        [Input("customId")]
        public Input<string>? CustomId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Consumer for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The username to use, you must set either the username or custom_id
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConsumerArgs()
        {
        }
        public static new ConsumerArgs Empty => new ConsumerArgs();
    }

    public sealed class ConsumerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A custom id for the consumer, you must set either the username or custom_id
        /// </summary>
        [Input("customId")]
        public Input<string>? CustomId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Consumer for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The username to use, you must set either the username or custom_id
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConsumerState()
        {
        }
        public static new ConsumerState Empty => new ConsumerState();
    }
}
