// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// The provider type for the kong package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [KongResourceType("pulumi:providers:kong")]
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// An basic auth password for kong admin
        /// </summary>
        [Output("kongAdminPassword")]
        public Output<string?> KongAdminPassword { get; private set; } = null!;

        /// <summary>
        /// API key for the kong api (Enterprise Edition)
        /// </summary>
        [Output("kongAdminToken")]
        public Output<string?> KongAdminToken { get; private set; } = null!;

        /// <summary>
        /// The address of the kong admin url e.g. http://localhost:8001
        /// </summary>
        [Output("kongAdminUri")]
        public Output<string> KongAdminUri { get; private set; } = null!;

        /// <summary>
        /// An basic auth user for kong admin
        /// </summary>
        [Output("kongAdminUsername")]
        public Output<string?> KongAdminUsername { get; private set; } = null!;

        /// <summary>
        /// API key for the kong api (if you have locked it down)
        /// </summary>
        [Output("kongApiKey")]
        public Output<string?> KongApiKey { get; private set; } = null!;

        /// <summary>
        /// Workspace context (Enterprise Edition)
        /// </summary>
        [Output("kongWorkspace")]
        public Output<string?> KongWorkspace { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("kong", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An basic auth password for kong admin
        /// </summary>
        [Input("kongAdminPassword")]
        public Input<string>? KongAdminPassword { get; set; }

        /// <summary>
        /// API key for the kong api (Enterprise Edition)
        /// </summary>
        [Input("kongAdminToken")]
        public Input<string>? KongAdminToken { get; set; }

        /// <summary>
        /// The address of the kong admin url e.g. http://localhost:8001
        /// </summary>
        [Input("kongAdminUri", required: true)]
        public Input<string> KongAdminUri { get; set; } = null!;

        /// <summary>
        /// An basic auth user for kong admin
        /// </summary>
        [Input("kongAdminUsername")]
        public Input<string>? KongAdminUsername { get; set; }

        /// <summary>
        /// API key for the kong api (if you have locked it down)
        /// </summary>
        [Input("kongApiKey")]
        public Input<string>? KongApiKey { get; set; }

        /// <summary>
        /// Workspace context (Enterprise Edition)
        /// </summary>
        [Input("kongWorkspace")]
        public Input<string>? KongWorkspace { get; set; }

        /// <summary>
        /// Should plugins `config_json` field strictly match plugin configuration
        /// </summary>
        [Input("strictPluginsMatch", json: true)]
        public Input<bool>? StrictPluginsMatch { get; set; }

        /// <summary>
        /// Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
        /// </summary>
        [Input("tlsSkipVerify", json: true)]
        public Input<bool>? TlsSkipVerify { get; set; }

        public ProviderArgs()
        {
            StrictPluginsMatch = Utilities.GetEnvBoolean("STRICT_PLUGINS_MATCH");
            TlsSkipVerify = Utilities.GetEnvBoolean("TLS_SKIP_VERIFY") ?? false;
        }
    }
}
