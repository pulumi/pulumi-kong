// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    public partial class Route : Pulumi.CustomResource
    {
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.RouteDestinations>> Destinations { get; private set; } = null!;

        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        [Output("methods")]
        public Output<ImmutableArray<string>> Methods { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        [Output("preserveHost")]
        public Output<bool?> PreserveHost { get; private set; } = null!;

        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        [Output("regexPriority")]
        public Output<int?> RegexPriority { get; private set; } = null!;

        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        [Output("snis")]
        public Output<ImmutableArray<string>> Snis { get; private set; } = null!;

        [Output("sources")]
        public Output<ImmutableArray<Outputs.RouteSources>> Sources { get; private set; } = null!;

        [Output("stripPath")]
        public Output<bool?> StripPath { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("kong:index/route:Route", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/route:Route", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
        {
            return new Route(name, id, state, options);
        }
    }

    public sealed class RouteArgs : Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<Inputs.RouteDestinationsArgs>? _destinations;
        public InputList<Inputs.RouteDestinationsArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.RouteDestinationsArgs>());
            set => _destinations = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("methods")]
        private InputList<string>? _methods;
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols", required: true)]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("regexPriority")]
        public Input<int>? RegexPriority { get; set; }

        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        [Input("snis")]
        private InputList<string>? _snis;
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("sources")]
        private InputList<Inputs.RouteSourcesArgs>? _sources;
        public InputList<Inputs.RouteSourcesArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RouteSourcesArgs>());
            set => _sources = value;
        }

        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        public RouteArgs()
        {
        }
    }

    public sealed class RouteState : Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<Inputs.RouteDestinationsGetArgs>? _destinations;
        public InputList<Inputs.RouteDestinationsGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.RouteDestinationsGetArgs>());
            set => _destinations = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("methods")]
        private InputList<string>? _methods;
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("regexPriority")]
        public Input<int>? RegexPriority { get; set; }

        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("snis")]
        private InputList<string>? _snis;
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("sources")]
        private InputList<Inputs.RouteSourcesGetArgs>? _sources;
        public InputList<Inputs.RouteSourcesGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RouteSourcesGetArgs>());
            set => _sources = value;
        }

        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        public RouteState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RouteDestinationsArgs : Pulumi.ResourceArgs
    {
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        public RouteDestinationsArgs()
        {
        }
    }

    public sealed class RouteDestinationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        public RouteDestinationsGetArgs()
        {
        }
    }

    public sealed class RouteSourcesArgs : Pulumi.ResourceArgs
    {
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        public RouteSourcesArgs()
        {
        }
    }

    public sealed class RouteSourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        public RouteSourcesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RouteDestinations
    {
        public readonly string? Ip;
        public readonly int? Port;

        [OutputConstructor]
        private RouteDestinations(
            string? ip,
            int? port)
        {
            Ip = ip;
            Port = port;
        }
    }

    [OutputType]
    public sealed class RouteSources
    {
        public readonly string? Ip;
        public readonly int? Port;

        [OutputConstructor]
        private RouteSources(
            string? ip,
            int? port)
        {
            Ip = ip;
            Port = port;
        }
    }
    }
}
