// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## # kong.Certificate
    /// 
    /// For more information on creating certificates in Kong [see their documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#certificate-object)
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Kong.Certificate("certificate", new()
    ///     {
    ///         Cert = "public key --- 123 ----",
    ///         PrivateKey = "private key --- 456 ----",
    ///         Snis = new[]
    ///         {
    ///             "foo.com",
    ///             "bar.com",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "myTag",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// To import a certificate:
    /// 
    /// ```sh
    /// $ pulumi import kong:index/certificate:Certificate &lt;certifcate_identifier&gt; &lt;certificate_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
        /// </summary>
        [Output("certificate")]
        public Output<string> Cert { get; private set; } = null!;

        /// <summary>
        /// should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the Certificate for grouping and filtering
        /// </summary>
        [Output("snis")]
        public Output<ImmutableArray<string>> Snis { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("kong:index/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Cert { get; set; } = null!;

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("snis")]
        private InputList<string>? _snis;

        /// <summary>
        /// A list of strings associated with the Certificate for grouping and filtering
        /// </summary>
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// should be the public key of your certificate it is mapped to the `Cert` parameter on the Kong API.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Cert { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// should be the private key of your certificate it is mapped to the `Key` parameter on the Kong API.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("snis")]
        private InputList<string>? _snis;

        /// <summary>
        /// A list of strings associated with the Certificate for grouping and filtering
        /// </summary>
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
