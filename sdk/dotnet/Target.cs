// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var target = new Kong.Target("target", new()
    ///     {
    ///         TargetAddress = "sample_target:80",
    ///         Weight = 10,
    ///         UpstreamId = upstream.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// To import a target use a combination of the upstream id and the target id as follows:
    /// 
    /// ```sh
    /// $ pulumi import kong:index/target:Target &lt;target_identifier&gt; &lt;upstream_id&gt;/&lt;target_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/target:Target")]
    public partial class Target : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list set of strings associated with the Plugin for grouping and filtering
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
        /// </summary>
        [Output("target")]
        public Output<string> TargetAddress { get; private set; } = null!;

        /// <summary>
        /// is the id of the upstream to apply this target to.
        /// </summary>
        [Output("upstreamId")]
        public Output<string> UpstreamId { get; private set; } = null!;

        /// <summary>
        /// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
        /// </summary>
        [Output("weight")]
        public Output<int> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a Target resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Target(string name, TargetArgs args, CustomResourceOptions? options = null)
            : base("kong:index/target:Target", name, args ?? new TargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Target(string name, Input<string> id, TargetState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/target:Target", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Target resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Target Get(string name, Input<string> id, TargetState? state = null, CustomResourceOptions? options = null)
        {
            return new Target(name, id, state, options);
        }
    }

    public sealed class TargetArgs : global::Pulumi.ResourceArgs
    {
        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list set of strings associated with the Plugin for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> TargetAddress { get; set; } = null!;

        /// <summary>
        /// is the id of the upstream to apply this target to.
        /// </summary>
        [Input("upstreamId", required: true)]
        public Input<string> UpstreamId { get; set; } = null!;

        /// <summary>
        /// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public TargetArgs()
        {
        }
        public static new TargetArgs Empty => new TargetArgs();
    }

    public sealed class TargetState : global::Pulumi.ResourceArgs
    {
        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list set of strings associated with the Plugin for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// is the target address (IP or hostname) and port. If omitted the port defaults to 8000.
        /// </summary>
        [Input("target")]
        public Input<string>? TargetAddress { get; set; }

        /// <summary>
        /// is the id of the upstream to apply this target to.
        /// </summary>
        [Input("upstreamId")]
        public Input<string>? UpstreamId { get; set; }

        /// <summary>
        /// is the weight this target gets within the upstream load balancer (0-1000, defaults to 100).
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public TargetState()
        {
        }
        public static new TargetState Empty => new TargetState();
    }
}
