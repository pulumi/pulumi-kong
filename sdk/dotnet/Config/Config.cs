// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Kong
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("kong");

        private static readonly __Value<string?> _kongAdminPassword = new __Value<string?>(() => __config.Get("kongAdminPassword"));
        /// <summary>
        /// An basic auth password for kong admin
        /// </summary>
        public static string? KongAdminPassword
        {
            get => _kongAdminPassword.Get();
            set => _kongAdminPassword.Set(value);
        }

        private static readonly __Value<string?> _kongAdminToken = new __Value<string?>(() => __config.Get("kongAdminToken"));
        /// <summary>
        /// API key for the kong api (Enterprise Edition)
        /// </summary>
        public static string? KongAdminToken
        {
            get => _kongAdminToken.Get();
            set => _kongAdminToken.Set(value);
        }

        private static readonly __Value<string?> _kongAdminUri = new __Value<string?>(() => __config.Get("kongAdminUri"));
        /// <summary>
        /// The address of the kong admin url e.g. http://localhost:8001
        /// </summary>
        public static string? KongAdminUri
        {
            get => _kongAdminUri.Get();
            set => _kongAdminUri.Set(value);
        }

        private static readonly __Value<string?> _kongAdminUsername = new __Value<string?>(() => __config.Get("kongAdminUsername"));
        /// <summary>
        /// An basic auth user for kong admin
        /// </summary>
        public static string? KongAdminUsername
        {
            get => _kongAdminUsername.Get();
            set => _kongAdminUsername.Set(value);
        }

        private static readonly __Value<string?> _kongApiKey = new __Value<string?>(() => __config.Get("kongApiKey"));
        /// <summary>
        /// API key for the kong api (if you have locked it down)
        /// </summary>
        public static string? KongApiKey
        {
            get => _kongApiKey.Get();
            set => _kongApiKey.Set(value);
        }

        private static readonly __Value<string?> _kongWorkspace = new __Value<string?>(() => __config.Get("kongWorkspace"));
        /// <summary>
        /// Workspace context (Enterprise Edition)
        /// </summary>
        public static string? KongWorkspace
        {
            get => _kongWorkspace.Get();
            set => _kongWorkspace.Set(value);
        }

        private static readonly __Value<bool?> _strictPluginsMatch = new __Value<bool?>(() => __config.GetBoolean("strictPluginsMatch") ?? Utilities.GetEnvBoolean("STRICT_PLUGINS_MATCH"));
        /// <summary>
        /// Should plugins `config_json` field strictly match plugin configuration
        /// </summary>
        public static bool? StrictPluginsMatch
        {
            get => _strictPluginsMatch.Get();
            set => _strictPluginsMatch.Set(value);
        }

        private static readonly __Value<bool?> _tlsSkipVerify = new __Value<bool?>(() => __config.GetBoolean("tlsSkipVerify") ?? Utilities.GetEnvBoolean("TLS_SKIP_VERIFY") ?? false);
        /// <summary>
        /// Whether to skip tls verify for https kong api endpoint using self signed or untrusted certs
        /// </summary>
        public static bool? TlsSkipVerify
        {
            get => _tlsSkipVerify.Get();
            set => _tlsSkipVerify.Set(value);
        }

    }
}
