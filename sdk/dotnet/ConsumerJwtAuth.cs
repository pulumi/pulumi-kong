// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## # kong.ConsumerJwtAuth
    /// 
    /// Consumer jwt auth is a resource that allows you to configure the jwt auth plugin for a consumer.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myConsumer = new Kong.Consumer("myConsumer", new()
    ///     {
    ///         CustomId = "123",
    ///         Username = "User1",
    ///     });
    /// 
    ///     var jwtPlugin = new Kong.Plugin("jwtPlugin", new()
    ///     {
    ///         ConfigJson = @"	{
    /// 		""claims_to_verify"": [""exp""]
    /// 	}
    /// 
    /// ",
    ///     });
    /// 
    ///     var consumerJwtConfig = new Kong.ConsumerJwtAuth("consumerJwtConfig", new()
    ///     {
    ///         Algorithm = "HS256",
    ///         ConsumerId = myConsumer.Id,
    ///         Key = "my_key",
    ///         RsaPublicKey = "foo",
    ///         Secret = "my_secret",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [KongResourceType("kong:index/consumerJwtAuth:ConsumerJwtAuth")]
    public partial class ConsumerJwtAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
        /// </summary>
        [Output("algorithm")]
        public Output<string?> Algorithm { get; private set; } = null!;

        /// <summary>
        /// the id of the consumer to be configured with jwt auth
        /// </summary>
        [Output("consumerId")]
        public Output<string> ConsumerId { get; private set; } = null!;

        /// <summary>
        /// A unique string identifying the credential. If left out, it will be auto-generated.
        /// </summary>
        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        /// <summary>
        /// If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
        /// </summary>
        [Output("rsaPublicKey")]
        public Output<string> RsaPublicKey { get; private set; } = null!;

        /// <summary>
        /// If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the consumer JWT auth for grouping and filtering
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ConsumerJwtAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConsumerJwtAuth(string name, ConsumerJwtAuthArgs args, CustomResourceOptions? options = null)
            : base("kong:index/consumerJwtAuth:ConsumerJwtAuth", name, args ?? new ConsumerJwtAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConsumerJwtAuth(string name, Input<string> id, ConsumerJwtAuthState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/consumerJwtAuth:ConsumerJwtAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConsumerJwtAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConsumerJwtAuth Get(string name, Input<string> id, ConsumerJwtAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new ConsumerJwtAuth(name, id, state, options);
        }
    }

    public sealed class ConsumerJwtAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// the id of the consumer to be configured with jwt auth
        /// </summary>
        [Input("consumerId", required: true)]
        public Input<string> ConsumerId { get; set; } = null!;

        /// <summary>
        /// A unique string identifying the credential. If left out, it will be auto-generated.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
        /// </summary>
        [Input("rsaPublicKey", required: true)]
        public Input<string> RsaPublicKey { get; set; } = null!;

        /// <summary>
        /// If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the consumer JWT auth for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ConsumerJwtAuthArgs()
        {
        }
        public static new ConsumerJwtAuthArgs Empty => new ConsumerJwtAuthArgs();
    }

    public sealed class ConsumerJwtAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used to verify the token’s signature. Can be HS256, HS384, HS512, RS256, or ES256, Default is `HS256`
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// the id of the consumer to be configured with jwt auth
        /// </summary>
        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        /// <summary>
        /// A unique string identifying the credential. If left out, it will be auto-generated.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// If algorithm is `RS256` or `ES256`, the public key (in PEM format) to use to verify the token’s signature
        /// </summary>
        [Input("rsaPublicKey")]
        public Input<string>? RsaPublicKey { get; set; }

        /// <summary>
        /// If algorithm is `HS256` or `ES256`, the secret used to sign JWTs for this credential. If left out, will be auto-generated
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the consumer JWT auth for grouping and filtering
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ConsumerJwtAuthState()
        {
        }
        public static new ConsumerJwtAuthState Empty => new ConsumerJwtAuthState();
    }
}
