// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## # kong.Service
    /// 
    /// The service resource maps directly onto the json for the service endpoint in Kong.  For more information on the parameters [see the Kong Service create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#service-object).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var service = new Kong.Service("service", new()
    ///     {
    ///         ConnectTimeout = 1000,
    ///         Host = "test.org",
    ///         Path = "/mypath",
    ///         Port = 8080,
    ///         Protocol = "http",
    ///         ReadTimeout = 3000,
    ///         Retries = 5,
    ///         WriteTimeout = 2000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// To use a client certificate and ca certificates combine with certificate resource (note protocol must be `https`):
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Kong.Certificate("certificate", new()
    ///     {
    ///         Cert = @"    -----BEGIN CERTIFICATE-----
    ///     ......
    ///     -----END CERTIFICATE-----
    /// ",
    ///         PrivateKey = @"    -----BEGIN PRIVATE KEY-----
    ///     .....
    ///     -----END PRIVATE KEY-----
    /// ",
    ///         Snis = new[]
    ///         {
    ///             "foo.com",
    ///         },
    ///     });
    /// 
    ///     var ca = new Kong.Certificate("ca", new()
    ///     {
    ///         Cert = @"    -----BEGIN CERTIFICATE-----
    ///     ......
    ///     -----END CERTIFICATE-----
    /// ",
    ///         PrivateKey = @"    -----BEGIN PRIVATE KEY-----
    ///     .....
    ///     -----END PRIVATE KEY-----
    /// ",
    ///         Snis = new[]
    ///         {
    ///             "ca.com",
    ///         },
    ///     });
    /// 
    ///     var service = new Kong.Service("service", new()
    ///     {
    ///         Protocol = "https",
    ///         Host = "test.org",
    ///         TlsVerify = true,
    ///         TlsVerifyDepth = 2,
    ///         ClientCertificateId = certificate.Id,
    ///         CaCertificateIds = new[]
    ///         {
    ///             ca.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// To import a service
    /// 
    /// ```sh
    ///  $ pulumi import kong:index/service:Service &lt;service_identifier&gt; &lt;service_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
        /// </summary>
        [Output("caCertificateIds")]
        public Output<ImmutableArray<string>> CaCertificateIds { get; private set; } = null!;

        /// <summary>
        /// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
        /// </summary>
        [Output("clientCertificateId")]
        public Output<string?> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// Connection timeout. Default(ms): 60000
        /// </summary>
        [Output("connectTimeout")]
        public Output<int?> ConnectTimeout { get; private set; } = null!;

        /// <summary>
        /// Host to map to
        /// </summary>
        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Path to map to
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// Port to map to. Default: 80
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// Protocol to use
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Read timeout. Default(ms): 60000
        /// </summary>
        [Output("readTimeout")]
        public Output<int?> ReadTimeout { get; private set; } = null!;

        /// <summary>
        /// Number of retries. Default: 5
        /// </summary>
        [Output("retries")]
        public Output<int?> Retries { get; private set; } = null!;

        /// <summary>
        /// A list of strings associated with the Service for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
        /// </summary>
        [Output("tlsVerify")]
        public Output<bool?> TlsVerify { get; private set; } = null!;

        /// <summary>
        /// Maximum depth of chain while verifying Upstream server’s TLS certificate.
        /// </summary>
        [Output("tlsVerifyDepth")]
        public Output<int?> TlsVerifyDepth { get; private set; } = null!;

        /// <summary>
        /// Write timout. Default(ms): 60000
        /// </summary>
        [Output("writeTimeout")]
        public Output<int?> WriteTimeout { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("kong:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("caCertificateIds")]
        private InputList<string>? _caCertificateIds;

        /// <summary>
        /// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
        /// </summary>
        public InputList<string> CaCertificateIds
        {
            get => _caCertificateIds ?? (_caCertificateIds = new InputList<string>());
            set => _caCertificateIds = value;
        }

        /// <summary>
        /// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// Connection timeout. Default(ms): 60000
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Host to map to
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to map to
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Port to map to. Default: 80
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Protocol to use
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// Read timeout. Default(ms): 60000
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        /// <summary>
        /// Number of retries. Default: 5
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Service for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
        /// </summary>
        [Input("tlsVerify")]
        public Input<bool>? TlsVerify { get; set; }

        /// <summary>
        /// Maximum depth of chain while verifying Upstream server’s TLS certificate.
        /// </summary>
        [Input("tlsVerifyDepth")]
        public Input<int>? TlsVerifyDepth { get; set; }

        /// <summary>
        /// Write timout. Default(ms): 60000
        /// </summary>
        [Input("writeTimeout")]
        public Input<int>? WriteTimeout { get; set; }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        [Input("caCertificateIds")]
        private InputList<string>? _caCertificateIds;

        /// <summary>
        /// A of CA Certificate IDs (created from the certificate resource). that are used to build the trust store while verifying upstream server’s TLS certificate.
        /// </summary>
        public InputList<string> CaCertificateIds
        {
            get => _caCertificateIds ?? (_caCertificateIds = new InputList<string>());
            set => _caCertificateIds = value;
        }

        /// <summary>
        /// ID of Certificate to be used as client certificate while TLS handshaking to the upstream server. Use ID from `kong.Certificate` resource
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// Connection timeout. Default(ms): 60000
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Host to map to
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to map to
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Port to map to. Default: 80
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Protocol to use
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Read timeout. Default(ms): 60000
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        /// <summary>
        /// Number of retries. Default: 5
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of strings associated with the Service for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether to enable verification of upstream server TLS certificate. If not set then the nginx default is respected.
        /// </summary>
        [Input("tlsVerify")]
        public Input<bool>? TlsVerify { get; set; }

        /// <summary>
        /// Maximum depth of chain while verifying Upstream server’s TLS certificate.
        /// </summary>
        [Input("tlsVerifyDepth")]
        public Input<int>? TlsVerifyDepth { get; set; }

        /// <summary>
        /// Write timout. Default(ms): 60000
        /// </summary>
        [Input("writeTimeout")]
        public Input<int>? WriteTimeout { get; set; }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
