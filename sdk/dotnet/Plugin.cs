// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kong
{
    /// <summary>
    /// ## # kong.Plugin
    /// 
    /// The plugin resource maps directly onto the json for the API endpoint in Kong.  For more information on the parameters [see the Kong Api create documentation](https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#plugin-object).
    /// The `config_json` is passed through to the plugin to configure it as is.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var rateLimit = new Kong.Plugin("rateLimit", new Kong.PluginArgs
    ///         {
    ///             ConfigJson = @"	{
    /// 		""second"": 5,
    /// 		""hour"" : 1000
    /// 	}
    /// 
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// To apply a plugin to a consumer use the `consumer_id` property, for example:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var pluginConsumer = new Kong.Consumer("pluginConsumer", new Kong.ConsumerArgs
    ///         {
    ///             CustomId = "567",
    ///             Username = "PluginUser",
    ///         });
    ///         var rateLimit = new Kong.Plugin("rateLimit", new Kong.PluginArgs
    ///         {
    ///             ConfigJson = @"	{
    /// 		""second"": 5,
    /// 		""hour"" : 1000
    /// 	}
    /// 
    /// ",
    ///             ConsumerId = pluginConsumer.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// To apply a plugin to a service use the `service_id` property, for example:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var service = new Kong.Service("service", new Kong.ServiceArgs
    ///         {
    ///             Host = "test.org",
    ///             Protocol = "http",
    ///         });
    ///         var rateLimit = new Kong.Plugin("rateLimit", new Kong.PluginArgs
    ///         {
    ///             ConfigJson = @"	{
    /// 		""second"": 10,
    /// 		""hour"" : 2000
    /// 	}
    /// 
    /// ",
    ///             ServiceId = service.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// To apply a plugin to a route use the `route_id` property, for example:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Kong = Pulumi.Kong;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var service = new Kong.Service("service", new Kong.ServiceArgs
    ///         {
    ///             Host = "test.org",
    ///             Protocol = "http",
    ///         });
    ///         var rateLimit = new Kong.Plugin("rateLimit", new Kong.PluginArgs
    ///         {
    ///             ConfigJson = @"	{
    /// 		""second"": 11,
    /// 		""hour"" : 4000
    /// 	}
    /// 
    /// ",
    ///             Enabled = true,
    ///             ServiceId = service.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// * `plugin_name` - (Required) the name of the plugin you want to configure
    /// * `consumer_id` - (Optional) the consumer id you want to configure the plugin for
    /// * `service_id`  - (Optional) the service id that you want to configure the plugin for
    /// * `route_id` - (Optional) the route id that you want to configure the plugin for
    /// * `enabled` - (Optional) whether the plugin is enabled or not, use if you want to keep the plugin installed but disable it
    /// * `config_json` - (Optional) this is the configuration json for how you want to configure the plugin.  The json is passed straight through to kong as is.  You can get the json config from the Kong documentation
    ///   page of the plugin you are configuring
    /// * `tags` - (Optional) A list of strings associated with the Plugin for grouping and filtering
    /// 
    /// ## Import
    /// 
    /// To import a plugin
    /// 
    /// ```sh
    ///  $ pulumi import kong:index/plugin:Plugin &lt;plugin_identifier&gt; &lt;plugin_id&gt;
    /// ```
    /// </summary>
    [KongResourceType("kong:index/plugin:Plugin")]
    public partial class Plugin : Pulumi.CustomResource
    {
        [Output("computedConfig")]
        public Output<string> ComputedConfig { get; private set; } = null!;

        /// <summary>
        /// plugin configuration in JSON format, configuration must be a valid JSON object.
        /// </summary>
        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        [Output("consumerId")]
        public Output<string?> ConsumerId { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("routeId")]
        public Output<string?> RouteId { get; private set; } = null!;

        [Output("serviceId")]
        public Output<string?> ServiceId { get; private set; } = null!;

        [Output("strictMatch")]
        public Output<bool?> StrictMatch { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Plugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plugin(string name, PluginArgs? args = null, CustomResourceOptions? options = null)
            : base("kong:index/plugin:Plugin", name, args ?? new PluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plugin(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
            : base("kong:index/plugin:Plugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plugin Get(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
        {
            return new Plugin(name, id, state, options);
        }
    }

    public sealed class PluginArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// plugin configuration in JSON format, configuration must be a valid JSON object.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("strictMatch")]
        public Input<bool>? StrictMatch { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PluginArgs()
        {
        }
    }

    public sealed class PluginState : Pulumi.ResourceArgs
    {
        [Input("computedConfig")]
        public Input<string>? ComputedConfig { get; set; }

        /// <summary>
        /// plugin configuration in JSON format, configuration must be a valid JSON object.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("strictMatch")]
        public Input<bool>? StrictMatch { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PluginState()
        {
        }
    }
}
